<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Git常用命令总结]]></title>
      <url>/git/201802/git-pub/git-bash-02.html</url>
      <content type="html"><![CDATA[<h1 id="Git常用命令总结"><a href="#Git常用命令总结" class="headerlink" title="Git常用命令总结"></a>Git常用命令总结</h1><h2 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h2><pre><code>在本地新建一个repo,进入一个项目目录,执行git init,会初始化一个repo,并在当前文件夹下创建一个.git文件夹.
</code></pre><h2 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h2><pre><code>获取一个url对应的远程Git repo, 创建一个local copy.
一般的格式是git clone [url].
clone下来的repo会以url最后一个斜线后面的名称命名,创建一个文件夹,如果想要指定特定的名称,可以git clone [url] newname指定.
</code></pre><h2 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h2><pre><code>查询repo的状态.
git status -s: -s表示short, -s的输出标记会有两列,第一列是对staging区域而言,第二列是对working目录而言.
</code></pre><h2 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h2><pre><code>show commit history of a branch.
git log --oneline --number: 每条log只显示一行,显示number条.
git log --oneline --graph:可以图形化地表示出分支合并历史.
git log branchname可以显示特定分支的log.
git log --oneline branch1 ^branch2,可以查看在分支1,却不在分支2中的提交.^表示排除这个分支(Window下可能要给^branch2加上引号).
git log --decorate会显示出tag信息.
git log --author=[author name] 可以指定作者的提交历史.
git log --since --before --until --after 根据提交时间筛选log.
--no-merges可以将merge的commits排除在外.
git log --grep 根据commit信息过滤log: git log --grep=keywords
默认情况下, git log --grep --author是OR的关系,即满足一条即被返回,如果你想让它们是AND的关系,可以加上--all-match的option.
git log -S: filter by introduced diff.
比如: git log -SmethodName (注意S和后面的词之间没有等号分隔).
git log -p: show patch introduced at each commit.
每一个提交都是一个快照(snapshot),Git会把每次提交的diff计算出来,作为一个patch显示给你看.
另一种方法是git show [SHA].
git log --stat: show diffstat of changes introduced at each commit.
同样是用来看改动的相对信息的,--stat比-p的输出更简单一些.
</code></pre><h2 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h2><pre><code>在提交之前,Git有一个暂存区(staging area),可以放入新添加的文件或者加入新的改动. commit时提交的改动是上一次加入到staging area中的改动,而不是我们disk上的改动.
git add .
会递归地添加当前工作目录中的所有文件.
</code></pre><h2 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h2><pre><code>不加参数的git diff:
show diff of unstaged changes.
此命令比较的是工作目录中当前文件和暂存区域快照之间的差异,也就是修改之后还没有暂存起来的变化内容.

若要看已经暂存起来的文件和上次提交时的快照之间的差异,可以用:
git diff --cached 命令.
show diff of staged changes.
(Git 1.6.1 及更高版本还允许使用 git diff --staged，效果是相同的).

git diff HEAD
show diff of all staged or unstated changes.
也即比较woking directory和上次提交之间所有的改动.

如果想看自从某个版本之后都改动了什么,可以用:
git diff [version tag]
跟log命令一样,diff也可以加上--stat参数来简化输出.

git diff [branchA] [branchB]可以用来比较两个分支.
它实际上会返回一个由A到B的patch,不是我们想要的结果.
一般我们想要的结果是两个分支分开以后各自的改动都是什么,是由命令:
git diff [branchA]…[branchB]给出的.
实际上它是:git diff $(git merge-base [branchA] [branchB]) [branchB]的结果.
</code></pre><h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h2><pre><code>提交已经被add进来的改动.
git commit -m “the commit message&quot;
git commit -a 会先把所有已经track的文件的改动add进来,然后提交(有点像svn的一次提交,不用先暂存). 对于没有track的文件,还是需要git add一下.
git commit --amend 增补提交. 会使用与当前提交节点相同的父节点进行一次新的提交,旧的提交将会被取消.
</code></pre><h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h2><pre><code>undo changes and commits.
这里的HEAD关键字指的是当前分支最末梢最新的一个提交.也就是版本库中该分支上的最新版本.
git reset HEAD: unstage files from index and reset pointer to HEAD
这个命令用来把不小心add进去的文件从staged状态取出来,可以单独针对某一个文件操作: git reset HEAD - - filename, 这个- - 也可以不加.
git reset --soft
move HEAD to specific commit reference, index and staging are untouched.
git reset --hard
unstage files AND undo any changes in the working directory since last commit.
使用git reset —hard HEAD进行reset,即上次提交之后,所有staged的改动和工作目录的改动都会消失,还原到上次提交的状态.
这里的HEAD可以被写成任何一次提交的SHA-1.
不带soft和hard参数的git reset,实际上带的是默认参数mixed.

总结:
git reset --mixed id,是将git的HEAD变了(也就是提交记录变了),但文件并没有改变，(也就是working tree并没有改变). 取消了commit和add的内容.
git reset --soft id. 实际上，是git reset –mixed id 后,又做了一次git add.即取消了commit的内容.
git reset --hard id.是将git的HEAD变了,文件也变了.
按改动范围排序如下:
soft (commit) &lt; mixed (commit + add) &lt; hard (commit + add + local working)
</code></pre><h2 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h2><pre><code>反转撤销提交.只要把出错的提交(commit)的名字(reference)作为参数传给命令就可以了.
git revert HEAD: 撤销最近的一个提交.
git revert会创建一个反向的新提交,可以通过参数-n来告诉Git先不要提交.
</code></pre><h2 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h2><pre><code>git rm file: 从staging区移除文件,同时也移除出工作目录.
git rm --cached: 从staging区移除文件,但留在工作目录中.
git rm --cached从功能上等同于git reset HEAD,清除了缓存区,但不动工作目录树.
</code></pre><h2 id="git-clean"><a href="#git-clean" class="headerlink" title="git clean"></a>git clean</h2><pre><code>git clean是从工作目录中移除没有track的文件.
通常的参数是git clean -df:
-d表示同时移除目录,-f表示force,因为在git的配置文件中, clean.requireForce=true,如果不加-f,clean将会拒绝执行.
</code></pre><h2 id="git-mv"><a href="#git-mv" class="headerlink" title="git mv"></a>git mv</h2><pre><code>git rm - - cached orig; mv orig new; git add new
</code></pre><h2 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h2><pre><code>把当前的改动压入一个栈.
git stash将会把当前目录和index中的所有改动(但不包括未track的文件)压入一个栈,然后留给你一个clean的工作状态,即处于上一次最新提交处.
git stash list会显示这个栈的list.
git stash apply:取出stash中的上一个项目(stash@{0}),并且应用于当前的工作目录.
也可以指定别的项目,比如git stash apply stash@{1}.
如果你在应用stash中项目的同时想要删除它,可以用git stash pop

删除stash中的项目:
git stash drop: 删除上一个,也可指定参数删除指定的一个项目.
git stash clear: 删除所有项目.
</code></pre><h2 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h2><pre><code>git branch可以用来列出分支,创建分支和删除分支.
git branch -v可以看见每一个分支的最后一次提交.
git branch: 列出本地所有分支,当前分支会被星号标示出.
git branch (branchname): 创建一个新的分支(当你用这种方式创建分支的时候,分支是基于你的上一次提交建立的). 
git branch -d (branchname): 删除一个分支.
删除remote的分支:
git push (remote-name) :(branch-name): delete a remote branch.
这个是因为完整的命令形式是:
git push remote-name local-branch:remote-branch
而这里local-branch的部分为空,就意味着删除了remote-branch
</code></pre><h2 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h2><p>　　git checkout (branchname)   切换到一个分支.<br>     git checkout -b (branchname): 创建并切换到新的分支.<br>     这个命令是将git branch newbranch和git checkout newbranch合在一起的结果.<br>     checkout还有另一个作用:替换本地改动:<br>     git checkout –<filename><br>     此命令会使用HEAD中的最新内容替换掉你的工作目录中的文件.已添加到暂存区的改动以及新文件都不会受到影响.<br>     注意:git checkout filename会删除该文件中所有没有暂存和提交的改动,这个操作是不可逆的.</filename></p>
<h2 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h2><pre><code>把一个分支merge进当前的分支.
git merge [alias]/[branch]
把远程分支merge到当前分支.

如果出现冲突,需要手动修改,可以用git mergetool.
解决冲突的时候可以用到git diff,解决完之后用git add添加,即表示冲突已经被resolved.
</code></pre><h2 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h2><pre><code>tag a point in history as import.
会在一个提交上建立永久性的书签,通常是发布一个release版本或者ship了什么东西之后加tag.
比如: git tag v1.0
git tag -a v1.0, -a参数会允许你添加一些信息,即make an annotated tag.
当你运行git tag -a命令的时候,Git会打开一个编辑器让你输入tag信息.

我们可以利用commit SHA来给一个过去的提交打tag:
git tag -a v0.9 XXXX

push的时候是不包含tag的,如果想包含,可以在push时加上--tags参数.
fetch的时候,branch HEAD可以reach的tags是自动被fetch下来的, tags that aren’t reachable from branch heads will be skipped.如果想确保所有的tags都被包含进来,需要加上--tags选项.
</code></pre><h2 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h2><pre><code>list, add and delete remote repository aliases.
因为不需要每次都用完整的url,所以Git为每一个remote repo的url都建立一个别名,然后用git remote来管理这个list.
git remote: 列出remote aliases.
如果你clone一个project,Git会自动将原来的url添加进来,别名就叫做:origin.
git remote -v:可以看见每一个别名对应的实际url.
git remote add [alias] [url]: 添加一个新的remote repo.
git remote rm [alias]: 删除一个存在的remote alias.
git remote rename [old-alias] [new-alias]: 重命名.
git remote set-url [alias] [url]:更新url. 可以加上—push和fetch参数,为同一个别名set不同的存取地址.
</code></pre><h2 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h2><pre><code>download new branches and data from a remote repository.
可以git fetch [alias]取某一个远程repo,也可以git fetch --all取到全部repo
fetch将会取到所有你本地没有的数据,所有取下来的分支可以被叫做remote branches,它们和本地分支一样(可以看diff,log等,也可以merge到其他分支),但是Git不允许你checkout到它们. 
</code></pre><h2 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h2><pre><code>fetch from a remote repo and try to merge into the current branch.
pull == fetch + merge FETCH_HEAD
git pull会首先执行git fetch,然后执行git merge,把取来的分支的head merge到当前分支.这个merge操作会产生一个新的commit.    
如果使用--rebase参数,它会执行git rebase来取代原来的git merge.
</code></pre><h2 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h2><pre><code>--rebase不会产生合并的提交,它会将本地的所有提交临时保存为补丁(patch),放在”.git/rebase”目录中,然后将当前分支更新到最新的分支尖端,最后把保存的补丁应用到分支上.
rebase的过程中,也许会出现冲突,Git会停止rebase并让你解决冲突,在解决完冲突之后,用git add去更新这些内容,然后无需执行commit,只需要:
git rebase --continue就会继续打余下的补丁.
git rebase --abort将会终止rebase,当前分支将会回到rebase之前的状态.
</code></pre><h2 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h2><pre><code>push your new branches and data to a remote repository.
git push [alias] [branch]
将会把当前分支merge到alias上的[branch]分支.如果分支已经存在,将会更新,如果不存在,将会添加这个分支.
如果有多个人向同一个remote repo push代码, Git会首先在你试图push的分支上运行git log,检查它的历史中是否能看到server上的branch现在的tip,如果本地历史中不能看到server的tip,说明本地的代码不是最新的,Git会拒绝你的push,让你先fetch,merge,之后再push,这样就保证了所有人的改动都会被考虑进来.
</code></pre><h2 id="git-reflog"><a href="#git-reflog" class="headerlink" title="git reflog"></a>git reflog</h2><pre><code>git reflog是对reflog进行管理的命令,reflog是git用来记录引用变化的一种机制,比如记录分支的变化或者是HEAD引用的变化.
当git reflog不指定引用的时候,默认列出HEAD的reflog.
HEAD@{0}代表HEAD当前的值,HEAD@{3}代表HEAD在3次变化之前的值.
git会将变化记录到HEAD对应的reflog文件中,其路径为.git/logs/HEAD, 分支的reflog文件都放在.git/logs/refs目录下的子目录中.
</code></pre><p>特殊符号:<br>     ^代表父提交,当一个提交有多个父提交时,可以通过在^后面跟上一个数字,表示第几个父提交: ^相当于^1.<br>     ~<n>相当于连续的<n>个^.</n></n></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://git-scm.com/book/zh/v1" target="_blank" rel="noopener">http://git-scm.com/book/zh/v1</a><br><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">https://git-scm.com/book/zh/v2</a></p>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
            <tag> git命令 </tag>
            
            <tag> 命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/article/201802/hello-world-02.html</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[windows-skill]]></title>
      <url>/article/201802/skill-pub/windows-skill-02.html</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Window 如何通过cmd查看端口被谁占用、相应进程、杀死进程命令详解]]></title>
      <url>/skill/201802/skill-pub/win-cmd-netstat-02.html</url>
      <content type="html"><![CDATA[<h2 id="一、-查看所有进程占用的端口"><a href="#一、-查看所有进程占用的端口" class="headerlink" title="一、 查看所有进程占用的端口"></a>一、 查看所有进程占用的端口</h2><p>在开始-运行-cmd,输入：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat –ano</span><br></pre></td></tr></table></figure></p>
<p>可以查看所有进程</p>
<h2 id="二、查看占用指定端口的程序"><a href="#二、查看占用指定端口的程序" class="headerlink" title="二、查看占用指定端口的程序"></a>二、查看占用指定端口的程序</h2><p>当你在用tomcat发布程序时，经常会遇到端口被占用的情况，我们想知道是哪个程序或进程占用了端口，可以用该命令 netstat –ano|findstr “指定端口号” 二、查看占用指定端口的程序 当你在用tomcat发布程序时，经常会遇到端口被占用的情况，我们想知道是哪个程序或进程占用了端口，可以用该命令 netstat –ano|findstr “指定端口号” 二、查看占用指定端口的程序 </p>
<p>当你在用tomcat发布程序时，经常会遇到端口被占用的情况，我们想知道是哪个程序或进程占用了端口，可以用该命令 netstat –ano|findstr “指定端口号”<br>如:查询占用了8080端口的进程：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano|findstr "8080"</span><br></pre></td></tr></table></figure>
<h2 id="三、通过任务管理器杀死相关的进程"><a href="#三、通过任务管理器杀死相关的进程" class="headerlink" title="三、通过任务管理器杀死相关的进程"></a>三、通过任务管理器杀死相关的进程</h2><h3 id="方法一：使用任务管理器杀死进程"><a href="#方法一：使用任务管理器杀死进程" class="headerlink" title="方法一：使用任务管理器杀死进程"></a>方法一：使用任务管理器杀死进程</h3><p>打开任务管理器-&gt;查看-&gt;选择列-&gt;然后勾选PID选项，回到任务管理器上可以查看到对应的pid，然后结束进程<br>当然上面的方法有时候不好用，就是任务管理器中的进程比较多的时候，然后去找到对应的进程是很麻烦的，所以还有一种方法可以杀死进程的</p>
<h3 id="方法二：使用命令杀死进程"><a href="#方法二：使用命令杀死进程" class="headerlink" title="方法二：使用命令杀死进程"></a>方法二：使用命令杀死进程</h3><ol>
<li>首先找到进程号对应的进程名称<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tasklist|findstr 进程号</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>如:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tasklist|findstr 3112</span><br></pre></td></tr></table></figure></p>
<ol>
<li>然后根据进程名称杀死进程<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill /f /t /im 进程名称</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>如:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill /f /t /im /javaw.exe</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> skill </category>
            
        </categories>
        
        
        <tags>
            
            <tag> windows命令 </tag>
            
            <tag> cmd </tag>
            
            <tag> netstat，tasklist </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows / Linux 多版本tomcat 共存配置方法[配置两个或多个Tomcat启动的方法]]]></title>
      <url>/JAVA%E5%BC%80%E5%8F%91/Linux/201801/windows-linux-multi-tomcat-conf-28.html</url>
      <content type="html"><![CDATA[<div> Windows / Linux 多版本tomcat 共存配置方法[配置两个或多个Tomcat启动的方法]</div><br><div></div><br><div></div><br><div>用解压版的tomcat，不要用安装版的。  tomcat历史版本下载地址 <a href="https://archive.apache.org/dist/tomcat/" target="_blank" rel="noopener">https://archive.apache.org/dist/tomcat/</a><br><br># 下载路径：/dist/tomcat/tomcat-9/v9.0.4/bin 绿色替换为你自己想要下载的版本号<br><br></div><br><div></div><br><div>修改conf\server.xml，</div><br><div></div><br><div>1、修改http访问端口</div><br><div>conf下的server.xml文件的服务访问端口，默认是8080可以改成其它的，如7000</div><br><div></div><br><div>&lt;!– &lt;Connector port=”8080” protocol=”HTTP/1.1”  maxThreads=”150” connectionTimeout=”20000”  redirectPort=”8443” /&gt; –&gt;</div><br><div>&lt;Connector port=”8060” protocol=”HTTP/1.1”  maxThreads=”150” connectionTimeout=”20000”  redirectPort=”8443” /&gt;</div><br><div></div><br><div></div><br><div>2、修改shutdown端口</div><br><div>默认8005</div><br><div></div><br><div>&lt;!– &lt;Server port=”8065” shutdown=”SHUTDOWN”&gt; –&gt;</div><br><div>&lt;Server port=”6005” shutdown=”SHUTDOWN”&gt;</div><br><div></div><br><div></div><br><div>3、修改jvm启动默认端口，默认端口为8009   改成其他端口</div><br><div></div><br><div> &lt;!– &lt;Connector port=”8009” protocol=”AJP/1.3” redirectPort=”8443” /&gt; –&gt;</div><br><div>    &lt;Connector port=”6009” protocol=”AJP/1.3” redirectPort=”8443” /&gt;</div><br><div></div><br><div></div><br><div>## Windows tomcat 设置方法：</div><br><div></div><br><div>设置各个tomcat所使用的jdk版本</div><br><div>在bin 目录的startup.bat， shutdown.bat 文件增加</div><br><div></div><br><div>如：tomcat-6.0版本设置使用jdk6</div><br><div></div><br><div>打开startup.bat , shutdown.bat 在第7行的后面， rem Guess CATALINA_HOME if not defined的上方增加如下代码</div><br><div></div><br><div>set JAVA_HOME=D:\Program Files\Java\jdk1.6.0_45</div><br><div>set JRE_HOME=D:\Program Files\Java\jre6</div><br><div></div><br><div></div><br><div>## linux tomcat 设置方法：</div><br><div>同windows的设置方法，修改文件为startup.sh， shutdown.sh</div><br><div></div><br><div></div><br><div>.sh为linux下的执行脚本</div><br><div>.bat 为windows下的批处理脚本</div><br><div></div><br><div></div><br><div>其他版本的<a href="http://dev.yunnan.ws/" title="http://dev.yunnan.ws" target="_blank" rel="noopener">tomcat</a>设置方法一致，</div><br><div></div><br><div># 端口推荐的方式为版本号和默认端口结合的方式，这样方便记忆和配置：</div><br><div></div><br><div>http访问端口  80+2位tomcat版本号  如： tomcat6.0  建议修改为 8060    默认：8080</div><br><div></div><br><div>shutdown端口  2位tomcat版本号+05  如： tomcat6.0  建议修改为6005    默认：8005</div><br><div></div><br><div>jvm启动默认端口  2位tomcat版本号+09   如： tomcat6.0  建议修改为6009   默认：8009</div><br><div></div><br><div></div><br><div>tekin</div><br><div></div><br><div>启动tomcat: 执行 \bin\startup.bat</div><br><div></div><br><div>关闭tomcat: 执行 \bin\shutdown.bat</div><br><div></div><br><div></div><br><div>## linux tomcat 启动方法：</div><br><div></div><br><div>启动tomcat: 执行 bin/startup.sh</div><br><div></div><br><div>关闭tomcat: 执行 bin/shutdown.sh</div><br><div></div><br><div>tekin 原创，转载请保留出处</div><br><div></div>]]></content>
      
        <categories>
            
            <category> JAVA开发 </category>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> bat </tag>
            
            <tag> linux </tag>
            
            <tag> tomcat </tag>
            
            <tag> windows </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[github tarball 直接下载项目最新源码方法]]></title>
      <url>/%E5%85%B6%E4%BB%96/201801/github-tarball-download-24.html</url>
      <content type="html"><![CDATA[<p>github tarball 直接下载项目最新源码方法github tarball 直接下载项目最新源码方法</p>
<p>&nbsp;</p>
<p>如下载  <span style="font-family: 'Open Sans', sans-serif; font-size: 13px; font-style: normal; font-weight: 400;">hosts_ads_block 项目的 </span><span style="font-family: 'Open Sans', sans-serif; font-size: 13px; font-style: normal; font-weight: 400;">master 分支：</span></p>
<h3 id="https-github-com-tekintian-hosts-ads-block-tarball-master"><a href="#https-github-com-tekintian-hosts-ads-block-tarball-master" class="headerlink" title="https://github.com/tekintian/hosts_ads_block/tarball/master"></a><a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a><span style="color: #008000;">tekintian</span>/<span style="color: #008000;">hosts_ads_block</span>/<span style="color: #ff0000;"><strong>tarball</strong></span>/<span style="color: #008000;">master</span></h3><p>绿色部分根据实际项目目录更改即可</p>
]]></content>
      
        <categories>
            
            <category> 其他 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[linux 开机自动启动自定义脚本]]></title>
      <url>/Linux/201801/linux-reboot-start-diy-sh-19.html</url>
      <content type="html"><![CDATA[<p>在百度上可以找到好几种Linux开机启动各种服务的方法,在这里我写的是自己喜欢的方式.</p>
<p>博主是一个不怎么记事的人,有些配置在系统的目录下,配置了一次后就忘了,再也不想去系统的目录下找各种奇奇怪怪的目录和名字.就比如说这个开机启动,在配置完了后的某一天,想要在加一个启动的服务,然而那时已经忘了以前是在哪个目录下配置的了,一个大写的懵逼,所以就自己新建一个脚本放在自己能找到的目录,只用在系统的目录下配置一次,以后就在自己新建的脚本里面写启动服务的命令就好了</p>
<p><strong>1. 自己新建一个脚本,如centnet-service.sh</strong></p>
<p>经过后面的几个步骤后,这个脚本在开机的时候会执行,在这个脚本里面可以写你开机的时候想执行的命令,如启动tomcat,oracle等服务</p>
<p><strong>2. 在脚本中输入启动服务的命令,如(开机启动tomcat):</strong></p>
<p><div class="jb51code"></div></p>
<p><div id="highlighter_596594" class="syntaxhighlighter bash"></div></p>
<p><div class="toolbar"></div></p>
<p><table border="0" cellspacing="0" cellpadding="0"></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<p><td class="gutter"></td></p>
<p><div class="line number1 index0 alt2">1</div></p>
<p><div class="line number2 index1 alt1">2</div></p>
<p><div class="line number3 index2 alt2">3</div></p>
<p><div class="line number4 index3 alt1">4</div></p>
<p><td class="code"></td></p>
<p><div class="container"></div></p>
<p><div class="line number1 index0 alt2"><code>#!/bin/bash</code></div></p>
<p><div class="line number2 index1 alt1"><code>export</code> <code>JDK_HOME=``/home/java/jdk1``.8.0_91</code></div></p>
<p><div class="line number3 index2 alt2"><code>export</code> <code>JAVA_HOME=``/home/java/jdk1``.8.0_91</code></div></p>
<p><div class="line number4 index3 alt1"><code>/home/tomcat/apache-tomcat-8``.0.36``/bin/startup``.sh</code></div><br><br><br><br><br><br><br><strong>3. 执行如下命令,将该脚本标记为可执行文件(添加可执行的权限)</strong></p>
<p><div class="jb51code"></div></p>
<p><div id="highlighter_68007" class="syntaxhighlighter bash"></div></p>
<p><div class="toolbar"></div></p>
<p><table border="0" cellspacing="0" cellpadding="0"></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<p><td class="gutter"></td></p>
<p><div class="line number1 index0 alt2">1</div></p>
<p><td class="code"></td></p>
<p><div class="container"></div></p>
<p><div class="line number1 index0 alt2"><code>chmod</code> <code>+x ``/home/centnet/centnet-service``.sh</code></div><br><br><br><br><br><br><br><strong>4. 执行如下命令将/etc/rc.d/rc.local文标记为可执行文件</strong></p>
<p>在centos7中,/etc/rc.d/rc.local文件的权限被降低了,开机的时候执行在自己的脚本是不能起动一些服务的,执行下面的命令可以文件标记为可执行的文件</p>
<p><div class="jb51code"></div></p>
<p><div id="highlighter_79292" class="syntaxhighlighter bash"></div></p>
<p><div class="toolbar"></div></p>
<p><table border="0" cellspacing="0" cellpadding="0"></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<p><td class="gutter"></td></p>
<p><div class="line number1 index0 alt2">1</div></p>
<p><td class="code"></td></p>
<p><div class="container"></div></p>
<p><div class="line number1 index0 alt2"><code>chmod</code> <code>+x ``/etc/rc``.d``/rc``.``local</code></div><br><br><br><br><br><br><br><strong>5. 打开/etc/rc.d/rc.local文件,在最后面添加如下脚本</strong></p>
<p><div class="jb51code"></div></p>
<p><div id="highlighter_51514" class="syntaxhighlighter bash"></div></p>
<p><div class="toolbar"></div></p>
<p><table border="0" cellspacing="0" cellpadding="0"></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<p><td class="gutter"></td></p>
<p><div class="line number1 index0 alt2">1</div></p>
<p><td class="code"></td></p>
<p><div class="container"></div></p>
<p><div class="line number1 index0 alt2"><code>/home/centnet/centnet-service``.sh</code></div><br><br><br><br><br><br><br>这样,centnet-service.sh这个脚本在开机的时候就会被执行了,以后再这里面写启动服务的命令就可以了</p>
<p>以上就是本文的全部内容，希望对大家的学习有所帮助</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[在Centos 5.x或6.x上安装RHEL EPEL Repo]]></title>
      <url>/Linux/201801/centos-5-x-6-x-isntall-rhel-epel-repo-18.html</url>
      <content type="html"><![CDATA[<p><strong>安装步骤</strong><br>Centos 5.x</p>
<p>wget <a href="http://archives.fedoraproject.org/pub/archive/epel/epel-release-latest-5.noarch.rpm" target="_blank" rel="noopener">http://archives.fedoraproject.org/pub/archive/epel/epel-release-latest-5.noarch.rpm</a></p>
<p>wget <a href="http://rpms.famillecollet.com/enterprise/remi-release-5.rpm" target="_blank" rel="noopener">http://rpms.famillecollet.com/enterprise/remi-release-5.rpm</a></p>
<p>rpm -ivh epel-release-latest-5.noarch.rpm</p>
<p>rpm -ivh remi-release-5.rpm</p>
<p>Centos 6.x</p>
<p>wget <a href="http://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm" target="_blank" rel="noopener">http://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm</a></p>
<p>wget <a href="http://rpms.famillecollet.com/enterprise/remi-release-6.rpm" target="_blank" rel="noopener">http://rpms.famillecollet.com/enterprise/remi-release-6.rpm</a></p>
<p>rpm -ivh epel-release-latest-6.noarch.rpm</p>
<p>rpm -ivh remi-release-6.rpm</p>
<p><strong>完成后的设置</strong></p>
<p>ls -1 /etc/yum.repos.d/epel* /etc/yum.repos.d/remi.repo</p>
<p>返回</p>
<p>/etc/yum.repos.d/epel.repo</p>
<p>/etc/yum.repos.d/epel-testing.repo</p>
<p>/etc/yum.repos.d/remi.repo</p>
<p><strong>允许remi repository</strong></p>
<p>vi /etc/yum.repos.d/remi.repo</p>
<p>编辑[remi]下的enabled选项从0设为1</p>
<p>[remi]</p>
<p>name=Les RPM de remi pour Enterprise Linux 6 - $basearch</p>
<p>#baseurl=<a href="http://rpms.famillecollet.com/enterprise/6/remi/$basearch/" target="_blank" rel="noopener">http://rpms.famillecollet.com/enterprise/6/remi/$basearch/</a></p>
<p>mirrorlist=<a href="http://rpms.famillecollet.com/enterprise/6/remi/mirror" target="_blank" rel="noopener">http://rpms.famillecollet.com/enterprise/6/remi/mirror</a></p>
<p>enabled=1</p>
<p>gpgcheck=1</p>
<p>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-remi</p>
<p>至此，安装完成。</p>
<p>安装完运行yum报错：</p>
<p>Error: Cannot retrieve metalink forrepository: epel. Please verify its path and try again</p>
<p>解决办法：</p>
<p>vi /etc/yum.repos.d/epel.repo</p>
<p>编辑[epel]下的baseurl前的#号去掉，mirrorlist前添加#号。正确配置如下：</p>
<p>[epel]</p>
<p>name=Extra Packages for Enterprise Linux 6 - $basearch</p>
<p>baseurl=<a href="http://download.fedoraproject.org/pub/epel/6/$basearch" target="_blank" rel="noopener">http://download.fedoraproject.org/pub/epel/6/$basearch</a></p>
<p>#mirrorlist=<a href="https://mirrors.fedoraproject.org/metalink?repo=epel-6&amp;arch=$basearch" target="_blank" rel="noopener">https://mirrors.fedoraproject.org/metalink?repo=epel-6&amp;arch=$basearch</a></p>
<p>failovermethod=priority</p>
<p>enabled=1</p>
<p>gpgcheck=1</p>
<p>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6</p>
<p>再运行</p>
<p>yum makecache</p>
<p>英文出自于<a href="http://www.rackspace.com/knowledge_center/article/installing-rhel-epel-repo-on-centos-5x-or-6x" target="_blank" rel="noopener">这里</a>。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[debian 所有的历史发行版本6 7,8, 9 版本 ISO文件下载 Debian Archive ISO Download]]></title>
      <url>/Linux/201801/debian-archive-iso-download-17.html</url>
      <content type="html"><![CDATA[<h1 id="Debian-CDs-DVDs-archive"><a href="#Debian-CDs-DVDs-archive" class="headerlink" title="Debian CDs/DVDs archive"></a>Debian CDs/DVDs archive</h1><p>&nbsp;</p>
<p>Deibain8 cd下载地址</p>
<p><a href="https://cdimage.debian.org/cdimage/archive/8.10.0/amd64/iso-cd/" target="_blank" rel="noopener">http://cdimage.debian.org/mirror/cdimage/archive/8.10.0/amd64/iso-cd/ </a></p>
<p>Debian 历史版本下载地址, 第二级目录 amd64/ arm64/ armel/ armhf/ i386/ mips/ mipsel/  为处理器的类型，一般选择 amd64或者 i386即可</p>
<p><a href="http://cdimage.debian.org/mirror/cdimage/archive/3.0_r0/" target="_blank" rel="noopener">Deibain 3.0_r0/</a> 2011-02-16 23:03 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/3.0_r1/" target="_blank" rel="noopener">Deibain 3.0_r1/</a> 2011-02-16 23:05 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/3.0_r2/" target="_blank" rel="noopener">Deibain 3.0_r2/</a> 2011-02-16 23:05 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/3.0_r3/" target="_blank" rel="noopener">Deibain 3.0_r3/</a> 2011-02-16 23:05 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/3.0_r4/" target="_blank" rel="noopener">Deibain 3.0_r4/</a> 2016-11-04 23:29 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/3.0_r5/" target="_blank" rel="noopener">Deibain 3.0_r5/</a> 2016-11-04 23:21 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/3.0_r6/" target="_blank" rel="noopener">Deibain 3.0_r6/</a> 2016-11-05 01:35 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/3.1_r0/" target="_blank" rel="noopener">Deibain 3.1_r0/</a> 2016-11-02 20:08 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/3.1_r0a/" target="_blank" rel="noopener">Deibain 3.1_r0a/</a> 2016-11-02 20:08 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/3.1_r1/" target="_blank" rel="noopener">Deibain 3.1_r1/</a> 2016-11-02 20:08 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/3.1_r2/" target="_blank" rel="noopener">Deibain 3.1_r2/</a> 2016-11-02 20:08 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/3.1_r3/" target="_blank" rel="noopener">Deibain 3.1_r3/</a> 2016-11-02 20:08 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/3.1_r4/" target="_blank" rel="noopener">Deibain 3.1_r4/</a> 2016-11-02 20:08 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/3.1_r5/" target="_blank" rel="noopener">Deibain 3.1_r5/</a> 2016-11-02 20:08 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/3.1_r6/" target="_blank" rel="noopener">Deibain 3.1_r6/</a> 2016-11-02 20:08 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/3.1_r6a/" target="_blank" rel="noopener">Deibain 3.1_r6a/</a> 2016-11-02 20:08 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/3.1_r7/" target="_blank" rel="noopener">Deibain 3.1_r7/</a> 2016-11-02 20:08 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/3.1_r8/" target="_blank" rel="noopener">Deibain 3.1_r8/</a> 2016-11-02 20:08 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/4.0_r0/" target="_blank" rel="noopener">Deibain 4.0_r0/</a> 2016-10-27 06:38 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/4.0_r1/" target="_blank" rel="noopener">Deibain 4.0_r1/</a> 2016-10-28 19:18 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/4.0_r2/" target="_blank" rel="noopener">Deibain 4.0_r2/</a> 2016-10-27 16:18 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/4.0_r3/" target="_blank" rel="noopener">Deibain 4.0_r3/</a> 2016-10-25 20:26 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/4.0_r4/" target="_blank" rel="noopener">Deibain 4.0_r4/</a> 2016-10-25 02:04 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/4.0_r4a/" target="_blank" rel="noopener">Deibain 4.0_r4a/</a> 2016-10-26 17:20 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/4.0_r5/" target="_blank" rel="noopener">Deibain 4.0_r5/</a> 2016-10-28 14:28 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/4.0_r6/" target="_blank" rel="noopener">Deibain 4.0_r6/</a> 2016-10-29 10:30 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/4.0_r7/" target="_blank" rel="noopener">Deibain 4.0_r7/</a> 2016-10-26 03:19 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/4.0_r8/" target="_blank" rel="noopener">Deibain 4.0_r8/</a> 2016-10-27 11:56 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/4.0_r9/" target="_blank" rel="noopener">Deibain 4.0_r9/</a> 2010-05-26 13:01 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/5.0.0-live/" target="_blank" rel="noopener">Deibain 5.0.0-live/</a> 2016-10-26 17:53 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/5.0.0/" target="_blank" rel="noopener">Deibain 5.0.0/</a> 2016-10-25 12:41 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/5.0.1-live/" target="_blank" rel="noopener">Deibain 5.0.1-live/</a> 2016-10-24 19:20 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/5.0.1/" target="_blank" rel="noopener">Deibain 5.0.1/</a> 2016-10-28 06:43 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/5.0.2-live/" target="_blank" rel="noopener">Deibain 5.0.2-live/</a> 2016-10-28 08:56 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/5.0.2/" target="_blank" rel="noopener">Deibain 5.0.2/</a> 2016-10-29 04:02 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/5.0.2a/" target="_blank" rel="noopener">Deibain 5.0.2a/</a> 2016-10-27 23:49 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/5.0.3-live/" target="_blank" rel="noopener">Deibain 5.0.3-live/</a> 2016-10-28 19:44 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/5.0.3/" target="_blank" rel="noopener">Deibain 5.0.3/</a> 2016-10-27 02:18 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/5.0.4-live/" target="_blank" rel="noopener">Deibain 5.0.4-live/</a> 2016-10-27 07:03 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/5.0.4/" target="_blank" rel="noopener">Deibain 5.0.4/</a> 2016-10-26 11:38 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/5.0.5-live/" target="_blank" rel="noopener">Deibain 5.0.5-live/</a> 2016-10-25 04:30 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/5.0.5/" target="_blank" rel="noopener">Deibain 5.0.5/</a> 2010-06-28 03:05 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/5.0.6-live/" target="_blank" rel="noopener">Deibain 5.0.6-live/</a> 2016-10-28 10:20 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/5.0.6/" target="_blank" rel="noopener">Deibain 5.0.6/</a> 2010-09-07 00:29 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/5.0.7-live/" target="_blank" rel="noopener">Deibain 5.0.7-live/</a> 2016-10-28 19:50 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/5.0.7/" target="_blank" rel="noopener">Deibain 5.0.7/</a> 2010-11-28 22:47 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/5.0.8-live/" target="_blank" rel="noopener">Deibain 5.0.8-live/</a> 2016-10-25 21:08 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/5.0.8/" target="_blank" rel="noopener">Deibain 5.0.8/</a> 2011-01-24 04:05 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/5.0.9-live/" target="_blank" rel="noopener">Deibain 5.0.9-live/</a> 2016-10-25 06:09 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/5.0.9/" target="_blank" rel="noopener">Deibain 5.0.9/</a> 2011-10-02 22:41 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/5.0.10-live/" target="_blank" rel="noopener">Deibain 5.0.10-live/</a> 2016-10-25 13:29 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/5.0.10/" target="_blank" rel="noopener">Deibain 5.0.10/</a> 2012-03-11 20:00 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/6.0.0-live/" target="_blank" rel="noopener">Deibain 6.0.0-live/</a> 2016-10-27 16:42 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/6.0.0/" target="_blank" rel="noopener">Deibain 6.0.0/</a> 2011-02-06 01:09 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/6.0.1-live/" target="_blank" rel="noopener">Deibain 6.0.1-live/</a> 2016-10-29 06:16 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/6.0.1/" target="_blank" rel="noopener">Deibain 6.0.1/</a> 2011-03-24 15:35 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/6.0.1a/" target="_blank" rel="noopener">Deibain 6.0.1a/</a> 2011-03-23 17:27 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/6.0.2-live/" target="_blank" rel="noopener">Deibain 6.0.2-live/</a> 2016-10-26 17:47 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/6.0.2.1/" target="_blank" rel="noopener">Deibain 6.0.2.1/</a> 2011-06-28 15:36 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/6.0.3-live/" target="_blank" rel="noopener">Deibain 6.0.3-live/</a> 2016-10-25 20:52 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/6.0.3/" target="_blank" rel="noopener">Deibain 6.0.3/</a> 2012-01-29 12:10 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/6.0.4-live/" target="_blank" rel="noopener">Deibain 6.0.4-live/</a> 2016-10-27 07:10 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/6.0.4/" target="_blank" rel="noopener">Deibain 6.0.4/</a> 2012-01-29 12:57 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/6.0.5-live/" target="_blank" rel="noopener">Deibain 6.0.5-live/</a> 2016-10-29 04:36 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/6.0.5/" target="_blank" rel="noopener">Deibain 6.0.5/</a> 2012-05-13 14:02 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/6.0.6-live/" target="_blank" rel="noopener">Deibain 6.0.6-live/</a> 2016-10-25 21:02 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/6.0.6/" target="_blank" rel="noopener">Deibain 6.0.6/</a> 2012-10-01 02:10 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/6.0.7-live/" target="_blank" rel="noopener">Deibain 6.0.7-live/</a> 2016-10-25 04:37 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/6.0.7/" target="_blank" rel="noopener">Deibain 6.0.7/</a> 2013-02-24 01:38 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/6.0.8-live/" target="_blank" rel="noopener">Deibain 6.0.8-live/</a> 2016-10-28 14:54 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/6.0.8/" target="_blank" rel="noopener">Deibain 6.0.8/</a> 2013-10-20 14:50 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/6.0.9-live/" target="_blank" rel="noopener">Deibain 6.0.9-live/</a> 2014-12-13 18:14 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/6.0.9/" target="_blank" rel="noopener">Deibain 6.0.9/</a> 2014-02-17 00:27 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/6.0.10-live/" target="_blank" rel="noopener">Deibain 6.0.10-live/</a> 2014-12-13 18:14 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/6.0.10/" target="_blank" rel="noopener">Deibain 6.0.10/</a> 2014-07-20 17:10 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/7.0.0-live/" target="_blank" rel="noopener">Deibain 7.0.0-live/</a> 2015-06-02 13:18 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/7.0.0/" target="_blank" rel="noopener">Deibain 7.0.0/</a> 2013-05-05 01:06 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/7.1.0-live/" target="_blank" rel="noopener">Deibain 7.1.0-live/</a> 2015-06-02 13:18 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/7.1.0/" target="_blank" rel="noopener">Deibain 7.1.0/</a> 2013-06-16 23:30 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/7.2.0-live/" target="_blank" rel="noopener">Deibain 7.2.0-live/</a> 2015-06-02 13:18 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/7.2.0/" target="_blank" rel="noopener">Deibain 7.2.0/</a> 2013-10-13 23:20 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/7.3.0-live/" target="_blank" rel="noopener">Deibain 7.3.0-live/</a> 2015-06-02 13:18 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/7.3.0/" target="_blank" rel="noopener">Deibain 7.3.0/</a> 2013-12-16 04:54 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/7.4.0-live/" target="_blank" rel="noopener">Deibain 7.4.0-live/</a> 2014-02-10 06:44 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/7.4.0/" target="_blank" rel="noopener">Deibain 7.4.0/</a> 2014-02-18 15:32 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/7.5.0-live/" target="_blank" rel="noopener">Deibain 7.5.0-live/</a> 2014-05-23 18:06 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/7.5.0/" target="_blank" rel="noopener">Deibain 7.5.0/</a> 2014-04-29 04:32 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/7.6.0-live/" target="_blank" rel="noopener">Deibain 7.6.0-live/</a> 2014-07-24 15:54 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/7.6.0/" target="_blank" rel="noopener">Deibain 7.6.0/</a> 2014-07-13 05:05 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/7.7.0-live/" target="_blank" rel="noopener">Deibain 7.7.0-live/</a> 2014-11-21 02:57 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/7.7.0/" target="_blank" rel="noopener">Deibain 7.7.0/</a> 2014-10-20 04:46 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/7.8.0-live/" target="_blank" rel="noopener">Deibain 7.8.0-live/</a> 2015-01-14 05:00 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/7.8.0/" target="_blank" rel="noopener">Deibain 7.8.0/</a> 2015-01-12 03:07 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/7.9.0-live/" target="_blank" rel="noopener">Deibain 7.9.0-live/</a> 2015-09-09 15:40 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/7.9.0/" target="_blank" rel="noopener">Deibain 7.9.0/</a> 2015-09-08 01:41 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/7.10.0-live/" target="_blank" rel="noopener">Deibain 7.10.0-live/</a> 2016-04-05 23:50 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/7.10.0/" target="_blank" rel="noopener">Deibain 7.10.0/</a> 2016-04-04 16:14 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/7.11.0-live/" target="_blank" rel="noopener">Deibain 7.11.0-live/</a> 2016-06-11 22:26 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/7.11.0/" target="_blank" rel="noopener">Deibain 7.11.0/</a> 2016-06-07 00:34 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/8.0.0-live/" target="_blank" rel="noopener">Deibain 8.0.0-live/</a> 2015-04-26 02:02 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/8.0.0/" target="_blank" rel="noopener">Deibain 8.0.0/</a> 2015-04-26 01:44 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/8.1.0-live/" target="_blank" rel="noopener">Deibain 8.1.0-live/</a> 2015-06-08 00:31 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/8.1.0/" target="_blank" rel="noopener">Deibain 8.1.0/</a> 2015-06-08 00:31 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/8.2.0-live/" target="_blank" rel="noopener">Deibain 8.2.0-live/</a> 2015-09-09 16:14 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/8.2.0/" target="_blank" rel="noopener">Deibain 8.2.0/</a> 2015-09-11 17:13 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/8.3.0-live/" target="_blank" rel="noopener">Deibain 8.3.0-live/</a> 2016-01-28 02:06 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/8.3.0/" target="_blank" rel="noopener">Deibain 8.3.0/</a> 2016-01-24 19:08 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/8.4.0-live/" target="_blank" rel="noopener">Deibain 8.4.0-live/</a> 2016-04-04 15:29 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/8.4.0/" target="_blank" rel="noopener">Deibain 8.4.0/</a> 2016-04-03 12:27 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/8.5.0-live/" target="_blank" rel="noopener">Deibain 8.5.0-live/</a> 2016-06-10 04:32 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/8.5.0/" target="_blank" rel="noopener">Deibain 8.5.0/</a> 2016-06-05 18:00 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/8.6.0-live/" target="_blank" rel="noopener">Deibain 8.6.0-live/</a> 2016-09-18 18:22 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/8.6.0/" target="_blank" rel="noopener">Deibain 8.6.0/</a> 2016-09-18 18:22 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/8.7.0-live/" target="_blank" rel="noopener">Deibain 8.7.0-live/</a> 2017-01-15 13:48 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/8.7.0/" target="_blank" rel="noopener">Deibain 8.7.0/</a> 2017-01-15 13:48 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/8.7.1-live/" target="_blank" rel="noopener">Deibain 8.7.1-live/</a> 2017-01-17 11:06 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/8.7.1/" target="_blank" rel="noopener">Deibain 8.7.1/</a> 2017-05-07 21:10 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/8.8.0-live/" target="_blank" rel="noopener">Deibain 8.8.0-live/</a> 2017-05-07 20:16 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/8.8.0/" target="_blank" rel="noopener">Deibain 8.8.0/</a> 2017-05-07 20:28 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/8.9.0-live/" target="_blank" rel="noopener">Deibain 8.9.0-live/</a> 2017-07-23 22:19 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/8.9.0/" target="_blank" rel="noopener">Deibain 8.9.0/</a> 2017-07-24 01:30 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/8.10.0-live/" target="_blank" rel="noopener">Deibain 8.10.0-live/</a> 2017-12-11 00:13 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/8.10.0/" target="_blank" rel="noopener">Deibain 8.10.0/</a> 2017-12-11 00:13 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/9.0.0-live/" target="_blank" rel="noopener">Deibain 9.0.0-live/</a> 2017-06-18 02:28 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/9.0.0/" target="_blank" rel="noopener">Deibain 9.0.0/</a> 2017-06-18 04:36 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/9.0.1-live/" target="_blank" rel="noopener">Deibain 9.0.1-live/</a> 2017-06-21 10:45 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/9.1.0-live/" target="_blank" rel="noopener">Deibain 9.1.0-live/</a> 2017-07-23 16:44 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/9.1.0/" target="_blank" rel="noopener">Deibain 9.1.0/</a> 2017-07-23 02:53 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/9.2.0-live/" target="_blank" rel="noopener">Deibain 9.2.0-live/</a> 2017-10-08 04:17 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/9.2.0/" target="_blank" rel="noopener">Deibain 9.2.0/</a> 2017-10-08 04:17 -<br><a href="http://cdimage.debian.org/mirror/cdimage/archive/9.2.1/" target="_blank" rel="noopener">Deibain 9.2.1/</a> 2017-12-10 03:10 -</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Centos历史版本 ISO 下载地址Centos Archive Download]]></title>
      <url>/Linux/201801/centos-archive-iso-download-17.html</url>
      <content type="html"><![CDATA[<h1 id="Centos历史版本-ISO-下载地址Centos-Archive-Download"><a href="#Centos历史版本-ISO-下载地址Centos-Archive-Download" class="headerlink" title="Centos历史版本 ISO 下载地址Centos Archive Download"></a>Centos历史版本 ISO 下载地址Centos Archive Download</h1><p>ISO文件的下载路径为</p>
<h1 id="centos-vault-6-8-isos-x86-64"><a href="#centos-vault-6-8-isos-x86-64" class="headerlink" title="/centos-vault/6.8/isos/x86_64/"></a>/centos-vault/6.8/isos/x86_64/</h1><p>如： <a href="http://archive.kernel.org/centos-vault/6.8/isos/x86_64/CentOS-6.8-x86_64-netinstall.iso" target="_blank" rel="noopener">http://archive.kernel.org/centos-vault/6.8/isos/x86_64/CentOS-6.8-x86_64-netinstall.iso</a></p>
<p><a href="http://archive.kernel.org/centos-vault/2.1/" target="_blank" rel="noopener">Centos 2.1/</a> 19-Aug-2009 01:36 –<br><a href="http://archive.kernel.org/centos-vault/3.1/" target="_blank" rel="noopener">Centos 3.1/</a> 31-Jul-2005 16:05 –<br><a href="http://archive.kernel.org/centos-vault/3.3/" target="_blank" rel="noopener">Centos 3.3/</a> 17-Mar-2005 11:17 –<br><a href="http://archive.kernel.org/centos-vault/3.4/" target="_blank" rel="noopener">Centos 3.4/</a> 01-Mar-2005 01:38 –<br><a href="http://archive.kernel.org/centos-vault/3.5/" target="_blank" rel="noopener">Centos 3.5/</a> 28-Jul-2005 16:14 –<br><a href="http://archive.kernel.org/centos-vault/3.6/" target="_blank" rel="noopener">Centos 3.6/</a> 04-Apr-2006 16:59 –<br><a href="http://archive.kernel.org/centos-vault/3.7/" target="_blank" rel="noopener">Centos 3.7/</a> 06-May-2006 01:20 –<br><a href="http://archive.kernel.org/centos-vault/3.8/" target="_blank" rel="noopener">Centos 3.8/</a> 20-Apr-2012 10:55 –<br><a href="http://archive.kernel.org/centos-vault/3.9/" target="_blank" rel="noopener">Centos 3.9/</a> 20-Apr-2012 10:49 –<br><a href="http://archive.kernel.org/centos-vault/4.0/" target="_blank" rel="noopener">Centos 4.0/</a> 23-Jun-2005 12:09 –<br><a href="http://archive.kernel.org/centos-vault/4.0beta/" target="_blank" rel="noopener">Centos 4.0beta/</a> 15-Sep-2005 23:40 –<br><a href="http://archive.kernel.org/centos-vault/4.1/" target="_blank" rel="noopener">Centos 4.1/</a> 19-Oct-2005 12:09 –<br><a href="http://archive.kernel.org/centos-vault/4.2/" target="_blank" rel="noopener">Centos 4.2/</a> 04-Nov-2006 12:35 –<br><a href="http://archive.kernel.org/centos-vault/4.2beta/" target="_blank" rel="noopener">Centos 4.2beta/</a> 23-Oct-2005 11:17 –<br><a href="http://archive.kernel.org/centos-vault/4.3/" target="_blank" rel="noopener">Centos 4.3/</a> 27-Aug-2006 12:04 –<br><a href="http://archive.kernel.org/centos-vault/4.4/" target="_blank" rel="noopener">Centos 4.4/</a> 01-Nov-2006 19:32 –<br><a href="http://archive.kernel.org/centos-vault/4.5/" target="_blank" rel="noopener">Centos 4.5/</a> 08-Dec-2007 09:23 –<br><a href="http://archive.kernel.org/centos-vault/4.6/" target="_blank" rel="noopener">Centos 4.6/</a> 18-Sep-2008 14:35 –<br><a href="http://archive.kernel.org/centos-vault/4.7/" target="_blank" rel="noopener">Centos 4.7/</a> 14-Feb-2010 12:50 –<br><a href="http://archive.kernel.org/centos-vault/4.8/" target="_blank" rel="noopener">Centos 4.8/</a> 20-Apr-2012 21:13 –<br><a href="http://archive.kernel.org/centos-vault/4.9/" target="_blank" rel="noopener">Centos 4.9/</a> 20-Apr-2012 21:13 –<br><a href="http://archive.kernel.org/centos-vault/5.0/" target="_blank" rel="noopener">Centos 5.0/</a> 11-Apr-2007 17:53 –<br><a href="http://archive.kernel.org/centos-vault/5.1/" target="_blank" rel="noopener">Centos 5.1/</a> 27-Nov-2007 10:38 –<br><a href="http://archive.kernel.org/centos-vault/5.10/" target="_blank" rel="noopener">Centos 5.10/</a> 07-Oct-2014 13:31 –<br><a href="http://archive.kernel.org/centos-vault/5.11/" target="_blank" rel="noopener">Centos 5.11/</a> 27-Sep-2014 12:52 –<br><a href="http://archive.kernel.org/centos-vault/5.2/" target="_blank" rel="noopener">Centos 5.2/</a> 18-Jun-2008 23:34 –<br><a href="http://archive.kernel.org/centos-vault/5.3/" target="_blank" rel="noopener">Centos 5.3/</a> 14-Feb-2010 02:30 –<br><a href="http://archive.kernel.org/centos-vault/5.4/" target="_blank" rel="noopener">Centos 5.4/</a> 25-Jun-2010 14:38 –<br><a href="http://archive.kernel.org/centos-vault/5.5/" target="_blank" rel="noopener">Centos 5.5/</a> 14-May-2010 21:04 –<br><a href="http://archive.kernel.org/centos-vault/5.6/" target="_blank" rel="noopener">Centos 5.6/</a> 12-Aug-2011 19:51 –<br><a href="http://archive.kernel.org/centos-vault/5.7/" target="_blank" rel="noopener">Centos 5.7/</a> 13-Sep-2011 00:58 –<br><a href="http://archive.kernel.org/centos-vault/5.8/" target="_blank" rel="noopener">Centos 5.8/</a> 27-Feb-2012 19:57 –<br><a href="http://archive.kernel.org/centos-vault/5.9/" target="_blank" rel="noopener">Centos 5.9/</a> 12-Jan-2013 01:11 –<br><a href="http://archive.kernel.org/centos-vault/6.0/" target="_blank" rel="noopener">Centos 6.0/</a> 19-Dec-2011 18:49 –<br><a href="http://archive.kernel.org/centos-vault/6.1/" target="_blank" rel="noopener">Centos 6.1/</a> 08-Dec-2011 10:04 –<br><a href="http://archive.kernel.org/centos-vault/6.2/" target="_blank" rel="noopener">Centos 6.2/</a> 19-Dec-2011 13:25 –<br><a href="http://archive.kernel.org/centos-vault/6.3/" target="_blank" rel="noopener">Centos 6.3/</a> 09-Jul-2012 20:10 –<br><a href="http://archive.kernel.org/centos-vault/6.4/" target="_blank" rel="noopener">Centos 6.4/</a> 20-Jun-2013 14:50 –<br><a href="http://archive.kernel.org/centos-vault/6.5/" target="_blank" rel="noopener">Centos 6.5/</a> 21-Dec-2013 14:05 –<br><a href="http://archive.kernel.org/centos-vault/6.6/" target="_blank" rel="noopener">Centos 6.6/</a> 31-Jul-2015 15:17 –<br><a href="http://archive.kernel.org/centos-vault/6.7/" target="_blank" rel="noopener">Centos 6.7/</a> 21-Jan-2016 13:22 –<br><a href="http://archive.kernel.org/centos-vault/6.8/" target="_blank" rel="noopener">Centos 6.8/</a> 24-May-2016 17:36 –<br><a href="http://archive.kernel.org/centos-vault/6.9/" target="_blank" rel="noopener">Centos 6.9/</a> 17-Oct-2017 16:00 –<br><a href="http://archive.kernel.org/centos-vault/7.0.1406/" target="_blank" rel="noopener">Centos 7.0.1406/</a> 07-Apr-2015 14:36 –<br><a href="http://archive.kernel.org/centos-vault/7.1.1503/" target="_blank" rel="noopener">Centos 7.1.1503/</a> 13-Nov-2015 13:01 –<br><a href="http://archive.kernel.org/centos-vault/7.2.1511/" target="_blank" rel="noopener">Centos 7.2.1511/</a> 18-May-2016 16:48 –<br><a href="http://archive.kernel.org/centos-vault/7.3.1611/" target="_blank" rel="noopener">Centos 7.3.1611/</a> 20-Feb-2017 22:21 –<br><a href="http://archive.kernel.org/centos-vault/7.4.1708/" target="_blank" rel="noopener">Centos 7.4.1708/</a> 29-Sep-2017 12:44 –</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> archive </tag>
            
            <tag> centos </tag>
            
            <tag> download </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Centos7  使用 nmcli 命令配置网络详解]]></title>
      <url>/Linux/201801/centos7-nmcli-16.html</url>
      <content type="html"><![CDATA[<p><strong>使用**</strong>nmcli<strong><strong>命令配置网络</strong></strong> **</p>
<p>NetworkManager是管理和监控网络设置的守护进程，设备既就是网络接口，连接是对网络接口的配置，一个网络接口可以有多个连接配置，但同时只有一个连接配置生效。</p>
<p><strong>1 **</strong>配置主机名<strong>** </strong></p>
<p>CentOS6 之前主机配置文件：/etc/sysconfig/network</p>
<p>CentOS7主机名配置文件：/etc/hostname，默认没有这个文件，通过DNS反向解析获取主机名，主机名默认为：localhost.localdomain</p>
<p>显示主机名信息</p>
<p>hostname</p>
<p>hostnamectl status</p>
<p>创建并修改文件并生效</p>
<p>hostnamectl set-hostname deskX.example.com</p>
<p><table width="1305"></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<p><td>1</td></p>
<p>2</p>
<p>3</p>
<p>4</p>
<p>5</p>
<p><td>[root@centos73 ~]# hostnamectl set-hostname centos7.3.com</td></p>
<p>[root@centos73 ~]# hostname</p>
<p>centos7.3.com</p>
<p>[root@centos73 ~]# cat /etc/hostname</p>
<p>centos7.3.com<br><br><br><br>可以看到已经修改成功。</p>
<p>删除文件。回复默认主机名localhost.localdomain</p>
<p><strong>2 **</strong>常用命令<strong>** </strong></p>
<p>nmcli connection show 显示所有连接</p>
<p>nmcli connection show –active    显示所有活动的连接状态</p>
<p>nmcli connection show “ens33”    显示网络连接配置</p>
<p>nmcli device status            显示设备状态</p>
<p>nmcli device show ens33        显示网络接口属性</p>
<p>nmcli connection add help        查看帮助</p>
<p>nmcli connection reload        重新加载配置</p>
<p>nmcli connection down test2        禁用test2的配置，注意一个网卡可以有多个配置。</p>
<p>nmcli connection up test2        启用test2的配置</p>
<p>nmcli device disconnect ens33    禁用ens33网卡，物理网卡</p>
<p>nmcli device connect ens33    启用ens33网卡</p>
<p>图形工具</p>
<p>nm-connection-editor</p>
<p>字符工具</p>
<p>nmtui</p>
<p>nmtui-connect</p>
<p>nmtui-edit</p>
<p>nmtui-hostname</p>
<p><strong>3 **</strong>创建新连接配置<strong>** </strong></p>
<p>（1）创建新连接配置default，IP通过DHCP自动获取</p>
<p><table width="1305"></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<p><td>1</td></p>
<p>2</p>
<p><td>[root@centos73 ~]# nmcli connection add con-name default type Ethernet ifname eth0</td></p>
<p>Connection ‘default’ (d62f98af-86ed-4735-80aa-2d80351765b2) successfully added.<br><br><br><br>删除连接</p>
<p><table width="1305"></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<p><td>1</td></p>
<p>2</p>
<p><td>[root@centos73 ~]# nmcli connection delete default</td></p>
<p>Connection ‘default’ (d62f98af-86ed-4735-80aa-2d80351765b2) successfully deleted.<br><br><br><br>（2）创建新的连接配置test2，指定静态IP，不自动连接</p>
<p><table width="1305"></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<p><td>1</td></p>
<p>2</p>
<p><td>[root@centos73 ~]# nmcli connection add con-name test2 ipv4.method manual ifname ens33 autoconnect no type Ethernet ipv4.addresses 172.25.100.100/24 gw4 172.25.100.1</td></p>
<p>Connection ‘test2’ (98385bf5-8cc3-47e3-a5f2-51e2d736be6d) successfully added.<br><br><br><br>参数说明：</p>
<p>con-name 指定连接名字，没有特殊要求，</p>
<p>ipv4.methmod 指定获取IP地址的方式</p>
<p>ifname 指定网卡设被名，既就是次配置所生效的网卡</p>
<p>autoconnect 指定是否自动启动</p>
<p>ipv4.addresses 指定IPv4地址</p>
<p>gw4指定网关</p>
<p>&nbsp;</p>
<p><strong>4**</strong>查看<strong><strong>/etc/sysconfig/network-scripts/</strong></strong>目录<strong>** </strong></p>
<p>会看到多出一个文件ifcfg-test2。说明添加确实生效了。</p>
<p>/etc/sysconfig/network-scripts/ifcfg-test2</p>
<p><table width="1305"></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<p><td>1</td></p>
<p>2</p>
<p>3</p>
<p><td>[root@centos73 ~]# ls /etc/sysconfig/network-scripts/ifcfg-*</td></p>
<p>/etc/sysconfig/network-scripts/ifcfg-ens33 /etc/sysconfig/network-scripts/ifcfg-lo</p>
<p>/etc/sysconfig/network-scripts/ifcfg-ens34 /etc/sysconfig/network-scripts/ifcfg-test2<br><br><br><br><strong>5 **</strong>启用<strong><strong>test2</strong></strong>连接配置<strong>** </strong></p>
<p><table width="1305"></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<p><td>1</td></p>
<p>2</p>
<p>3</p>
<p><td>[root@centos73 ~]# nmcli connection up test2</td></p>
<p>Connection successfully activated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/7)</p>
<p>[root@centos73 ~]# systemctl restart network<br><br><br><br>看下是否生效</p>
<p>[root@centos73 ~]# nmcli device show ens33</p>
<p>&nbsp;</p>
<p>GENERAL.DEVICE: ens33</p>
<p>GENERAL.TYPE: ethernet</p>
<p>GENERAL.HWADDR: 00:0C:29:3A:00:82</p>
<p>GENERAL.MTU: 1500</p>
<p>GENERAL.STATE: 100 (connected)</p>
<p>GENERAL.CONNECTION: test2</p>
<p>GENERAL.CON-PATH: /org/freedesktop/NetworkManager/ActiveConnection/7</p>
<p>WIRED-PROPERTIES.CARRIER: on</p>
<p>IP4.ADDRESS[1]: 172.25.100.100/24</p>
<p>IP4.GATEWAY: 172.25.100.1</p>
<p>IP6.ADDRESS[1]: fe80::5a5b:2cc3:a448:e2e1/64</p>
<p>IP6.GATEWAY:</p>
<p>好了，基本的IP地址配置成功</p>
<p><strong>6 **</strong>修改连接设置<strong>** </strong></p>
<p>（1）修改test2为自动启动</p>
<p><table width="1305"></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<p><td>1</td></p>
<p><td>[root@centos73 ~]# nmcli connection modify test2 connection.autoconnect yes</td><br><br><br><br>（2）修改DNS为172.25.1.1</p>
<p><table width="1305"></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<p><td>1</td></p>
<p><td>[root@centos73 ~]# nmcli connection modify test2 ipv4.dns 172.25.1.1</td><br><br><br><br>（3）添加DNS 114.114.114.114</p>
<p><table width="1305"></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<p><td>1</td></p>
<p><td>[root@centos73 ~]# nmcli connection modify test2 +ipv4.dns 114.114.114.114</td><br><br><br><br>看下是否成功</p>
<p>[root@centos73 ~]# cat /etc/sysconfig/network-scripts/ifcfg-test2</p>
<p>&nbsp;</p>
<p>TYPE=Ethernet</p>
<p>[……]</p>
<p>NAME=test2</p>
<p>UUID=98385bf5-8cc3-47e3-a5f2-51e2d736be6d</p>
<p>DEVICE=ens33</p>
<p>ONBOOT=yes</p>
<p>DNS1=172.25.1.1</p>
<p>IPADDR=172.25.100.100</p>
<p>PREFIX=24</p>
<p>GATEWAY=172.25.100.1</p>
<p>DNS2=114.114.114.114</p>
<p>可以看到均已生效</p>
<p>（4）删除DNS</p>
<p><table width="1305"></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<p><td>1</td></p>
<p><td>[root@centos73 ~]# nmcli connection modify test2 -ipv4.dns 114.114.114.114</td><br><br><br><br>（5）修改IP地址</p>
<p><table width="1305"></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<p><td>1</td></p>
<p><td>[root@centos73 ~]# nmcli connection modify test2 ipv4.addresses 200.100.100.100/24 gw4 200.100.100.1</td><br><br><br><br>（6）还可以添加多个IP</p>
<p><table width="1305"></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<p><td>1</td></p>
<p><td>[root@centos73 ~]# nmcli connection modify test2 +ipv4.addresses 10.10.10.10/8</td><br><br><br><br><strong>7 nmcli **</strong>命令和<strong><strong>/etc/sysconfig/network-scripts/ifcfg-*</strong></strong>文件的对应关系<strong>** </strong></p>
<p>ipv4.method manual　　　　　　　 BOOTPROTO=none</p>
<p>ipv4.method auto　　　　　　　　BOOTPROTO=dhcp</p>
<p>ipv4.addresses “192.0.2.1/24　　　IPADDR=192.0.2.1</p>
<p>PREFIX=24</p>
<p>gw4 192.0.2.254”   　　　　　　　GATEWAY=192.0.2.254</p>
<p>ipv4.dns 8.8.8.8　　　　　　　　 DNS0=8.8.8.8</p>
<p>ipv4.dns-search example.com 　　DOMAIN=example.com</p>
<p>ipv4.ignore-auto-dns true　　　　 PEERDNS=no</p>
<p>connection.autoconnect yes 　　　ONBOOT=yes</p>
<p>connection.id eth0 　　　　　　　　NAME=eth0</p>
<p>connection.interface-name eth0　　 DEVICE=eth0</p>
<p>802-3-ethernet.mac-address . . . 　　HWADDR= . . .</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>8 Nmcli**</strong>命令详解**</p>
<h2 id="nmcli-connection-help"><a href="#nmcli-connection-help" class="headerlink" title="# nmcli connection help"></a># nmcli connection help</h2><p>Usage: nmcli connection { COMMAND | help }</p>
<p>&nbsp;</p>
<p>COMMAND := { show | up | down | add | modify | clone | edit | delete | monitor | reload | load | import | export }</p>
<p>&nbsp;</p>
<p>show [–active] [–order &lt;order spec&gt;]</p>
<p>show [–active] [id | uuid | path | apath] &lt;ID&gt; …</p>
<p>&nbsp;</p>
<p>up [[id | uuid | path] &lt;ID&gt;] [ifname &lt;ifname&gt;] [ap &lt;BSSID&gt;] [passwd-file &lt;file with passwords&gt;]</p>
<p>&nbsp;</p>
<p>down [id | uuid | path | apath] &lt;ID&gt; …</p>
<p>&nbsp;</p>
<p>add COMMON_OPTIONS TYPE_SPECIFIC_OPTIONS SLAVE_OPTIONS IP_OPTIONS [– ([+|-]&lt;setting&gt;.&lt;property&gt; &lt;value&gt;)+]</p>
<p>&nbsp;</p>
<p>modify [–temporary] [id | uuid | path] &lt;ID&gt; ([+|-]&lt;setting&gt;.&lt;property&gt; &lt;value&gt;)+</p>
<p>&nbsp;</p>
<p>clone [–temporary] [id | uuid | path ] &lt;ID&gt; &lt;new name&gt;</p>
<p>&nbsp;</p>
<p>edit [id | uuid | path] &lt;ID&gt;</p>
<p>edit [type &lt;new_con_type&gt;] [con-name &lt;new_con_name&gt;]</p>
<p>&nbsp;</p>
<p>delete [id | uuid | path] &lt;ID&gt;</p>
<p>&nbsp;</p>
<p>monitor [id | uuid | path] &lt;ID&gt; …</p>
<p>&nbsp;</p>
<p>reload</p>
<p>&nbsp;</p>
<p>load &lt;filename&gt; [ &lt;filename&gt;… ]</p>
<p>&nbsp;</p>
<p>import [–temporary] type &lt;type&gt; file &lt;file to import&gt;</p>
<p>&nbsp;</p>
<p>export [id | uuid | path] &lt;ID&gt; [&lt;output file&gt;]</p>
<p>&nbsp;</p>
<p>nmcli 修改网络连接方式，IP 地址， 网关等方法</p>
<h1 id="nmcli-connection-edit-enp0s8"><a href="#nmcli-connection-edit-enp0s8" class="headerlink" title="nmcli connection edit enp0s8"></a>nmcli connection edit enp0s8</h1><p>&nbsp;</p>
<p>===| nmcli 交互式连接编辑器 |===</p>
<p>&nbsp;</p>
<p>正在编辑已存的连接“802-3-ethernet”：“enp0s8”</p>
<p>&nbsp;</p>
<p>对于可用的命令输入“help”或“?”。</p>
<p>输入“describe [&lt;设置&gt;.&lt;属性&gt;]”来获得详细的属性描述。</p>
<p>&nbsp;</p>
<p>您可编辑下列设置：connection, 802-3-ethernet (ethernet), 802-1x, dcb, ipv4, ipv6, proxy</p>
<p>nmcli&gt;</p>
<p>#查看帮助</p>
<p>nmcli&gt; help</p>
<hr>
<p>—[ Main menu ]—</p>
<p>goto     [&lt;setting&gt; | &lt;prop&gt;]        :: go to a setting or property</p>
<p>remove   &lt;setting&gt;[.&lt;prop&gt;] | &lt;prop&gt; :: remove setting or reset property value</p>
<p>set      [&lt;setting&gt;.&lt;prop&gt; &lt;value&gt;]  :: set property value</p>
<p>describe [&lt;setting&gt;.&lt;prop&gt;]          :: describe property</p>
<p>print    [all | &lt;setting&gt;[.&lt;prop&gt;]]  :: print the connection</p>
<p>verify   [all | fix]                 :: verify the connection</p>
<p>save     [persistent|temporary]      :: save the connection</p>
<p>activate [&lt;ifname&gt;] [/&lt;ap&gt;|&lt;nsp&gt;]    :: activate the connection</p>
<p>back                                 :: go one level up (back)</p>
<p>help/?   [&lt;command&gt;]                 :: print this help</p>
<p>nmcli    &lt;conf-option&gt; &lt;value&gt;       :: nmcli configuration</p>
<p>quit                                 :: exit nmcli</p>
<hr>
<p>nmcli&gt;</p>
<p>&nbsp;</p>
<p>#设置网卡的连接方式 auto / static / manual / dhcp</p>
<p>set ipv4.method static</p>
<p>#设置IP地址 192.168.1.9 【 24表示子网掩码为255.255.255.0】</p>
<p>set. ipv4.address 192.168.1.9/24</p>
<p>#设置DNS 8.8.8.8 8.8.4.4</p>
<p>set ipv4.dns 8.8.8.8,8.8.4.4</p>
<p>#设置网关</p>
<p>set ipv4.gateway 172.17.0.1</p>
<p>#保存网络设置</p>
<p>Save</p>
<p>#退出nmcli交互式设置界面</p>
<p>Quit</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>BOOTPROTO=static 静态IP</p>
<p>BOOTPROTO=dhcp 动态IP</p>
<p>&nbsp;</p>
<p>利用好 print 命令 打印配置信息 和 help帮助命令，不知道具体的属性可以随便给一个不存在的属性 比如 xxx ， 回车后就会显示正确的属性提示</p>
<p>&nbsp;</p>
<p>nmcli&gt; help</p>
<hr>
<p>—[ Main menu ]—</p>
<p>goto     [&lt;setting&gt; | &lt;prop&gt;]        :: go to a setting or property</p>
<p>remove   &lt;setting&gt;[.&lt;prop&gt;] | &lt;prop&gt; :: remove setting or reset property value</p>
<p>set      [&lt;setting&gt;.&lt;prop&gt; &lt;value&gt;]  :: set property value</p>
<p>describe [&lt;setting&gt;.&lt;prop&gt;]          :: describe property</p>
<p>print    [all | &lt;setting&gt;[.&lt;prop&gt;]]  :: print the connection</p>
<p>verify   [all | fix]                 :: verify the connection</p>
<p>save     [persistent|temporary]      :: save the connection</p>
<p>activate [&lt;ifname&gt;] [/&lt;ap&gt;|&lt;nsp&gt;]    :: activate the connection</p>
<p>back                                 :: go one level up (back)</p>
<p>help/?   [&lt;command&gt;]                 :: print this help</p>
<p>nmcli    &lt;conf-option&gt; &lt;value&gt;       :: nmcli configuration</p>
<p>quit                                 :: exit nmcli</p>
<hr>
<p>nmcli&gt; set</p>
<p>错误：未选择设置；有效的为 [connection, 802-3-ethernet (ethernet), 802-1x, dcb, ipv4, ipv6, proxy]</p>
<p>先使用“goto &lt;设置&gt;”，或“set &lt;设置&gt;.&lt;属性&gt;”</p>
<p>nmcli&gt; set ethernet.xx</p>
<p>错误：无效属性：’xx’ 不在 [port, speed, duplex, auto-negotiate, mac-address, cloned-mac-address, generate-mac-address-mask, mac-address-blacklist, mtu, s390-subchannels, s390-nettype, s390-options, wake-on-lan, wake-on-lan-password] 中</p>
<p>nmcli&gt; set ipv4.xx</p>
<p>错误：无效属性：’xx’ 不在 [method, dns, dns-search, dns-options, dns-priority, addresses, gateway, routes, route-metric, ignore-auto-routes, ignore-auto-dns, dhcp-hostname, dhcp-send-hostname, never-default, may-fail, dad-timeout, dhcp-timeout, dhcp-client-id, dhcp-fqdn] 中</p>
<p>&nbsp;</p>
<p>nmcli&gt; set dcb.xx</p>
<p>错误：无效属性：’xx’ 不在 [app-fcoe-flags, app-fcoe-priority, app-fcoe-mode, app-iscsi-flags, app-iscsi-priority, app-fip-flags, app-fip-priority, priority-flow-control-flags, priority-flow-control, priority-group-flags, priority-group-id, priority-group-bandwidth, priority-bandwidth, priority-strict-bandwidth, priority-traffic-class] 中</p>
<p>nmcli&gt; set 802-1x.xx</p>
<p>错误：无效属性：’xx’ 不在 [eap, identity, anonymous-identity, pac-file, ca-cert, ca-cert-password, ca-cert-password-flags, ca-path, subject-match, altsubject-matches, domain-suffix-match, client-cert, client-cert-password, client-cert-password-flags, phase1-peapver, phase1-peaplabel, phase1-fast-provisioning, phase1-auth-flags, phase2-auth, phase2-autheap, phase2-ca-cert, phase2-ca-cert-password, phase2-ca-cert-password-flags, phase2-ca-path, phase2-subject-match, phase2-altsubject-matches, phase2-domain-suffix-match, phase2-client-cert, phase2-client-cert-password, phase2-client-cert-password-flags, password, password-flags, password-raw, password-raw-flags, private-key, private-key-password, private-key-password-flags, phase2-private-key, phase2-private-key-password, phase2-private-key-password-flags, pin, pin-flags, system-ca-certs, auth-timeout] 中</p>
<p>nmcli&gt; set proxy.xx</p>
<p>错误：无效属性：’xx’ 不在 [method, browser-only, pac-url, pac-script] 中</p>
<p>nmcli&gt;</p>
<p>&nbsp;</p>
<p>nmcli connection 里面的 print命令</p>
<p>以下的所有的配置信息可以通过 nmcli con mod enp0s8 连接配置项  值  来设置</p>
<p>===============================================================================</p>
<p>连接配置集详情 (enp0s8)</p>
<p>===============================================================================</p>
<p>connection.id:                          enp0s8</p>
<p>connection.uuid:                        f8c1e3eb-8d0d-32f0-a875-8e3b6326744f</p>
<p>connection.stable-id:                   –</p>
<p>connection.interface-name:              –</p>
<p>connection.type:                        802-3-ethernet</p>
<p>connection.autoconnect:                 yes</p>
<p>connection.autoconnect-priority:        -999</p>
<p>connection.autoconnect-retries:         -1 (默认)</p>
<p>connection.timestamp:                   1516070244</p>
<p>connection.read-only:                   no</p>
<p>connection.permissions:                 –</p>
<p>connection.zone:                        –</p>
<p>connection.master:                      –</p>
<p>connection.slave-type:                  –</p>
<p>connection.autoconnect-slaves:          -1 (默认)</p>
<p>connection.secondaries:                 –</p>
<p>connection.gateway-ping-timeout:        0</p>
<p>connection.metered:                     未知</p>
<p>connection.lldp:                        -1 (default)</p>
<hr>
<p>802-3-ethernet.port:                    –</p>
<p>802-3-ethernet.speed:                   0</p>
<p>802-3-ethernet.duplex:                  –</p>
<p>802-3-ethernet.auto-negotiate:          no</p>
<p>802-3-ethernet.mac-address:             08:00:27:D4:51:67</p>
<p>802-3-ethernet.cloned-mac-address:      –</p>
<p>802-3-ethernet.generate-mac-address-mask:–</p>
<p>802-3-ethernet.mac-address-blacklist:   –</p>
<p>802-3-ethernet.mtu:                     自动</p>
<p>802-3-ethernet.s390-subchannels:        –</p>
<p>802-3-ethernet.s390-nettype:            –</p>
<p>802-3-ethernet.s390-options:            –</p>
<p>802-3-ethernet.wake-on-lan:             1 (default)</p>
<p>802-3-ethernet.wake-on-lan-password:    –</p>
<hr>
<p>ipv4.method:                            auto</p>
<p>ipv4.dns:                               –</p>
<p>ipv4.dns-search:                        –</p>
<p>ipv4.dns-options:                       （默认）</p>
<p>ipv4.dns-priority:                      0</p>
<p>ipv4.addresses:                         172.17.0.20/24</p>
<p>ipv4.gateway:                           172.17.0.1</p>
<p>ipv4.routes:                            –</p>
<p>ipv4.route-metric:                      -1</p>
<p>ipv4.ignore-auto-routes:                no</p>
<p>ipv4.ignore-auto-dns:                   no</p>
<p>ipv4.dhcp-client-id:                    –</p>
<p>ipv4.dhcp-timeout:                      0</p>
<p>ipv4.dhcp-send-hostname:                yes</p>
<p>ipv4.dhcp-hostname:                     –</p>
<p>ipv4.dhcp-fqdn:                         –</p>
<p>ipv4.never-default:                     no</p>
<p>ipv4.may-fail:                          yes</p>
<p>ipv4.dad-timeout:                       -1 (默认)</p>
<hr>
<p>ipv6.method:                            auto</p>
<p>ipv6.dns:                               –</p>
<p>ipv6.dns-search:                        –</p>
<p>ipv6.dns-options:                       （默认）</p>
<p>ipv6.dns-priority:                      0</p>
<p>ipv6.addresses:                         –</p>
<p>ipv6.gateway:                           –</p>
<p>ipv6.routes:                            –</p>
<p>ipv6.route-metric:                      -1</p>
<p>ipv6.ignore-auto-routes:                no</p>
<p>ipv6.ignore-auto-dns:                   no</p>
<p>ipv6.never-default:                     no</p>
<p>ipv6.may-fail:                          yes</p>
<p>ipv6.ip6-privacy:                       -1 (未知)</p>
<p>ipv6.addr-gen-mode:                     stable-privacy</p>
<p>ipv6.dhcp-send-hostname:                yes</p>
<p>ipv6.dhcp-hostname:                     –</p>
<p>ipv6.token:                             –</p>
<hr>
<p>proxy.method:                           none</p>
<p>proxy.browser-only:                     no</p>
<p>proxy.pac-url:                          –</p>
<p>proxy.pac-script:                       –</p>
<hr>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>nmcli device help</p>
<p>Usage: nmcli device { COMMAND | help }</p>
<p>&nbsp;</p>
<p>COMMAND := { status | show | set | connect | reapply | modify | disconnect | delete | monitor | wifi | lldp }</p>
<p>&nbsp;</p>
<p>status</p>
<p>&nbsp;</p>
<p>show [&lt;ifname&gt;]</p>
<p>&nbsp;</p>
<p>set [ifname] &lt;ifname&gt; [autoconnect yes|no] [managed yes|no]</p>
<p>&nbsp;</p>
<p>connect &lt;ifname&gt;</p>
<p>&nbsp;</p>
<p>reapply &lt;ifname&gt;</p>
<p>&nbsp;</p>
<p>modify &lt;ifname&gt; ([+|-]&lt;setting&gt;.&lt;property&gt; &lt;value&gt;)+</p>
<p>&nbsp;</p>
<p>disconnect &lt;ifname&gt; …</p>
<p>&nbsp;</p>
<p>delete &lt;ifname&gt; …</p>
<p>&nbsp;</p>
<p>monitor &lt;ifname&gt; …</p>
<p>&nbsp;</p>
<p>wifi [list [ifname &lt;ifname&gt;] [bssid &lt;BSSID&gt;]]</p>
<p>&nbsp;</p>
<p>wifi connect &lt;(B)SSID&gt; [password &lt;password&gt;] [wep-key-type key|phrase] [ifname &lt;ifname&gt;]</p>
<p>[bssid &lt;BSSID&gt;] [name &lt;name&gt;] [private yes|no] [hidden yes|no]</p>
<p>&nbsp;</p>
<p>wifi hotspot [ifname &lt;ifname&gt;] [con-name &lt;name&gt;] [ssid &lt;SSID&gt;] [band a|bg] [channel &lt;channel&gt;] [password &lt;password&gt;]</p>
<p>&nbsp;</p>
<p>wifi rescan [ifname &lt;ifname&gt;] [[ssid &lt;SSID to scan&gt;] …]</p>
<p>&nbsp;</p>
<p>lldp [list [ifname &lt;ifname&gt;]]</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>示例查看 modify &lt;ifname&gt; ([+|-]&lt;setting&gt;.&lt;property&gt; &lt;value&gt;)+ 中setting和 property的值都有哪些，可以使用以下方式</p>
<p>&nbsp;</p>
<h1 id="nmcli-device-modify-enp0s8-set-xx"><a href="#nmcli-device-modify-enp0s8-set-xx" class="headerlink" title="nmcli device modify enp0s8 set.xx"></a>nmcli device modify enp0s8 set.xx</h1><p>错误：无效或不允许的设置“set”：’set’ 不在 [connection, 802-3-ethernet (ethernet), 802-1x, dcb, ipv4, ipv6, proxy] 中。</p>
<p>上面的提示可以看到 modify &lt;ifname&gt; ([+|-]&lt;setting&gt;.&lt;property&gt; &lt;value&gt;)+ 中setting 的项目有 connection, 802-3-ethernet (ethernet), 802-1x, dcb, ipv4, ipv6, proxy，</p>
<p>继续查看property的值都有哪些</p>
<h1 id="nmcli-device-modify-enp0s8-connection-xxx-00"><a href="#nmcli-device-modify-enp0s8-connection-xxx-00" class="headerlink" title="nmcli device modify enp0s8 connection.xxx 00"></a>nmcli device modify enp0s8 connection.xxx 00</h1><p>错误：无效的属性“xxx”：’xxx’ 不在 [id, uuid, interface-name, type, permissions, autoconnect, autoconnect-priority, autoconnect-retries, timestamp, read-only, zone, master, slave-type, autoconnect-slaves, secondaries, gateway-ping-timeout, metered, lldp, stable-id] 中。</p>
<p>从上面的提示可以看出connection项目的 property有 id, uuid, interface-name, type, permissions, autoconnect, autoconnect-priority, autoconnect-retries, timestamp, read-only, zone, master, slave-type, autoconnect-slaves, secondaries, gateway-ping-timeout, metered, lldp, stable-id</p>
<h1 id="nmcli-device-modify-enp0s8-ethernet-xxx-00"><a href="#nmcli-device-modify-enp0s8-ethernet-xxx-00" class="headerlink" title="nmcli device modify enp0s8 ethernet.xxx 00"></a>nmcli device modify enp0s8 ethernet.xxx 00</h1><p>错误：无效的属性“xxx”：’xxx’ 不在 [port, speed, duplex, auto-negotiate, mac-address, cloned-mac-address, generate-mac-address-mask, mac-address-blacklist, mtu, s390-subchannels, s390-nettype, s390-options, wake-on-lan, wake-on-lan-password] 中。</p>
<p>从上面的提示可以看出ethernet项目的 property有port, speed, duplex, auto-negotiate, mac-address, cloned-mac-address, generate-mac-address-mask, mac-address-blacklist, mtu, s390-subchannels, s390-nettype, s390-options, wake-on-lan, wake-on-lan-password</p>
<p>&nbsp;</p>
<p>修改连接名称</p>
<p>nmcli device modify enp0s8 connection.</p>
<p>&nbsp;</p>
<p>#nmcli con</p>
<p>名称                UUID                                  类型            设备</p>
<p>Wired connection 1  f8c1e3eb-8d0d-32f0-a875-8e3b6326744f  802-3-ethernet  enp0s8</p>
<p>&nbsp;</p>
<p>修改Wired connection 1为 enp0s8</p>
<p>nmcli con modify ‘Wired connection 1’ connection.id enp0s8</p>
<p>&nbsp;</p>
<p><a href="https://asciinema.org/a/eEoTTYXXYGKjGcDTkfAiW0fLe" target="_blank" rel="noopener">https://asciinema.org/a/eEoTTYXXYGKjGcDTkfAiW0fLe</a></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[centos, debian 等linux内核的系统 硬盘分区格式化和硬盘挂载 方法]]></title>
      <url>/Linux/201801/linu-fdisk-mount-method-11.html</url>
      <content type="html"><![CDATA[<p>Linu 硬盘分区挂载方法， 适用于 centos, debian 等linux内核的系统 硬盘分区格式化和硬盘挂载</p>
<p>挂载硬盘步骤:</p>
<ol>
<li><strong>使用fdisk -l 查看分区情况</strong></li>
<li><strong>分区：</strong><br>fdisk /dev/sdb<br>-p 查看分区<br>-n 创建分区<br>-p 创建主分区<br>-1 这是分区序号<br>-回车，回车（这里选择扇区起始位置和分区大小，类似：+1G 这样的格式）<br>-w 保存退出<br>格式化分区<br>挂载硬盘</li>
</ol>
<p>3. 格式化<br>mkfs.ext4 /dev/sdb1</p>
<p>4. 挂载<br>比如挂载到 /data0下面，则先创建目录 mkdir /data0<br>再挂载： mount /dev/sdb1 /data0</p>
<p>5. 硬盘随机启动挂载<br>vim /etc/fstab里面添加如下内容：<br>/dev/sdb1 /data2 ext4 defaults 0 0<br>或者<br>UUID=a4a6201b-4e1e-4f64-bde0-dc502599be2e /data2 ext4 defaults 0 0<br>更推荐下面这种方式，查看UUID通过命令：blkid 查看，例如：</p>
<h1 id="blkid"><a href="#blkid" class="headerlink" title="blkid"></a>blkid</h1><p>/dev/sda1: UUID=”313f8b93-ed62-4f3f-9b27-d92d844fbb6e”TYPE=”swap”<br>/dev/sda2: UUID=”56adf238-c8b2-4458-882b-bfa7204042de”TYPE=”ext4”<br>/dev/sdb1: UUID=”2fd1b7ca-d4de-4a40-b1e5-db14dd503b4a”TYPE=”ext4”<br>/dev/sdb2: UUID=”a4a6201b-4e1e-4f64-bde0-dc502599be2e”TYPE=”ext4”</p>
<p>6. 小技巧</p>
<p>同时创建 data1 data2 data3 data4 4个目录： mkdir data{1,2,3,4}</p>
<p>创建当前文件一个备份文件：cp 1.php{,.bak}</p>
<p>当前文件改名，增加内容：mv 1.php{,20150507}</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Git参考文档]]></title>
      <url>/git/201801/git-doc-01.html</url>
      <content type="html"><![CDATA[<h1 id="创建附注标签"><a href="#创建附注标签" class="headerlink" title="创建附注标签"></a>创建附注标签</h1><p>$ git tag -a v5.6.31 -m  “php 5.6.31”</p>
<p>推送本地的TAG到远程<br>git push -v origin refs/tags/v5.6.31</p>
<p>查看、添加、提交、删除、找回，重置修改文件</p>
<p>git help <command> # 显示command的help</p>
<p>git show # 显示某次提交的内容 git show $id</p>
<p>git co – <file> # 抛弃工作区修改</file></p>
<p>git co . # 抛弃工作区修改</p>
<p>git add <file> # 将工作文件修改提交到本地暂存区</file></p>
<p>git add . # 将所有修改过的工作文件提交暂存区</p>
<p>git rm <file> # 从版本库中删除文件</file></p>
<p>git rm <file> –cached # 从版本库中删除文件，但不删除文件</file></p>
<p>git reset <file> # 从暂存区恢复到工作文件</file></p>
<p>git reset – . # 从暂存区恢复到工作文件</p>
<p>git reset –hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改</p>
<p>git ci <file> git ci . git ci -a # 将git add, git rm和git ci等操作都合并在一起做　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　git ci -am “some comments”</file></p>
<p>git ci –amend # 修改最后一次提交记录</p>
<p>git revert &lt;$id&gt; # 恢复某次提交的状态，恢复动作本身也创建次提交对象</p>
<p>git revert HEAD # 恢复最后一次提交的状态</p>
<p>查看文件diff</p>
<p>git diff <file> # 比较当前文件和暂存区文件差异 git diff</file></p>
<p>git diff <id1><id2> # 比较两次提交之间的差异</id2></id1></p>
<p>git diff <branch1>..<branch2> # 在两个分支之间比较</branch2></branch1></p>
<p>git diff –staged # 比较暂存区和版本库差异</p>
<p>git diff –cached # 比较暂存区和版本库差异</p>
<p>git diff –stat # 仅仅比较统计信息</p>
<p>查看提交记录</p>
<p>git log git log <file> # 查看该文件每次提交记录</file></p>
<p>git log -p <file> # 查看每次详细修改内容的diff</file></p>
<p>git log -p -2 # 查看最近两次详细修改内容的diff</p>
<p>git log –stat #查看提交统计信息</p>
<p>tig</p>
<p>Mac上可以使用tig代替diff和log，brew install tig</p>
<p>Git 本地分支管理</p>
<p>查看、切换、创建和删除分支</p>
<p>git br -r # 查看远程分支</p>
<p>git br <new_branch> # 创建新的分支</new_branch></p>
<p>git br -v # 查看各个分支最后提交信息</p>
<p>git br –merged # 查看已经被合并到当前分支的分支</p>
<p>git br –no-merged # 查看尚未被合并到当前分支的分支</p>
<p>git co <branch> # 切换到某个分支</branch></p>
<p>git co -b <new_branch> # 创建新的分支，并且切换过去</new_branch></p>
<p>git co -b <new_branch> <branch> # 基于branch创建新的new_branch</branch></new_branch></p>
<p>git co $id # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除</p>
<p>git co $id -b <new_branch> # 把某次历史提交记录checkout出来，创建成一个分支</new_branch></p>
<p>git br -d <branch> # 删除某个分支</branch></p>
<p>git br -D <branch> # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</branch></p>
<p> 分支合并和rebase</p>
<p>git merge <branch> # 将branch分支合并到当前分支</branch></p>
<p>git merge origin/master –no-ff # 不要Fast-Foward合并，这样可以生成merge提交</p>
<p>git rebase master <branch> # 将master rebase到branch，相当于： git co <branch> &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge <branch></branch></branch></branch></p>
<p> Git补丁管理(方便在多台机器上开发同步时用)</p>
<p>git diff &gt; ../sync.patch # 生成补丁</p>
<p>git apply ../sync.patch # 打补丁</p>
<p>git apply –check ../sync.patch #测试补丁能否成功</p>
<p> Git暂存管理</p>
<p>git stash # 暂存</p>
<p>git stash list # 列所有stash</p>
<p>git stash apply # 恢复暂存的内容</p>
<p>git stash drop # 删除暂存区</p>
<p>Git远程分支管理</p>
<p>git pull # 抓取远程仓库所有分支更新并合并到本地</p>
<p>git pull –no-ff # 抓取远程仓库所有分支更新并合并到本地，不要快进合并</p>
<p>git fetch origin # 抓取远程仓库更新</p>
<p>git merge origin/master # 将远程主分支合并到本地当前分支</p>
<p>git co –track origin/branch # 跟踪某个远程分支创建相应的本地分支</p>
<p>git co -b <local_branch> origin/<remote_branch> # 基于远程分支创建本地分支，功能同上</remote_branch></local_branch></p>
<p>git push # push所有分支</p>
<p>git push origin master # 将本地主分支推到远程主分支</p>
<p>git push -u origin master # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)</p>
<p>git push origin <local_branch> # 创建远程分支， origin是远程仓库名</local_branch></p>
<p>git push origin <local_branch>:<remote_branch> # 创建远程分支</remote_branch></local_branch></p>
<p>git push origin :<remote_branch> #先删除本地分支(git br -d <branch>)，然后再push删除远程分支</branch></remote_branch></p>
<p>Git远程仓库管理</p>
<p>GitHub</p>
<p>git remote -v # 查看远程服务器地址和仓库名称</p>
<p>git remote show origin # 查看远程服务器仓库状态</p>
<p>git remote add origin git@ github:robbin/robbin_site.git # 添加远程仓库地址</p>
<p>git remote set-url origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址) git remote rm <repository> # 删除远程仓库</repository></p>
<p>创建远程仓库</p>
<p>git clone –bare robbin_site robbin_site.git # 用带版本的项目创建纯版本仓库</p>
<p>scp -r my_project.git git@ git.csdn.net:~ # 将纯仓库上传到服务器上</p>
<p>mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git –bare init # 在服务器创建纯仓库</p>
<p>git remote add origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址</p>
<p>git push -u origin master # 客户端首次提交</p>
<p>git push -u origin develop # 首次将本地develop分支提交到远程develop分支，并且track</p>
<p>git remote set-head origin master # 设置远程仓库的HEAD指向master分支</p>
<p>也可以命令设置跟踪远程库和本地库</p>
<p>git branch –set-upstream master origin/master</p>
<p>git branch –set-upstream develop origin/develop</p>
<hr>
<p>git tag — 标签相关操作</p>
<p>标签可以针对某一时间点的版本做标记，常用于版本发布。</p>
<p>列出标签<br>$ Git tag # 在控制台打印出当前仓库的所有标签<br>$ git tag -l ‘v0.1.*’ # 搜索符合模式的标签</p>
<p>打标签<br>git标签分为两种类型：轻量标签和附注标签。轻量标签是指向提交对象的引用，附注标签则是仓库中的一个独立对象。建议使用附注标签。</p>
<h1 id="创建轻量标签"><a href="#创建轻量标签" class="headerlink" title="创建轻量标签"></a>创建轻量标签</h1><p>$ git tag v0.1.2-light</p>
<h1 id="创建附注标签-1"><a href="#创建附注标签-1" class="headerlink" title="创建附注标签"></a>创建附注标签</h1><p>$ git tag -a v0.1.2 -m “0.1.2版本”</p>
<p>创建轻量标签不需要传递参数，直接指定标签名称即可。<br>创建附注标签时，参数a即annotated的缩写，指定标签类型，后附标签名。参数m指定标签说明，说明信息会保存在标签对象中。</p>
<p>切换到标签<br>与切换分支命令相同，用git checkout [tagname]<br>查看标签信息<br>用git show命令可以查看标签的版本信息：<br>$ git show v0.1.2</p>
<p>删除标签<br>误打或需要修改标签时，需要先将标签删除，再打新标签。<br>$ git tag -d v0.1.2 # 删除标签</p>
<p>参数d即delete的缩写，意为删除其后指定的标签。</p>
<p>给指定的commit打标签<br>打标签不必要在head之上，也可在之前的版本上打，这需要你知道某个提交对象的校验和（通过git log获取）。</p>
<h1 id="补打标签"><a href="#补打标签" class="headerlink" title="补打标签"></a>补打标签</h1><p>$ git tag -a v0.1.1 9fbc3d0</p>
<p>标签发布<br>通常的git push不会将标签对象提交到git服务器，我们需要进行显式的操作：<br>$ git push origin v0.1.2 # 将v0.1.2标签提交到git服务器<br>$ git push origin –tags # 将本地所有标签一次性提交到git服务器</p>
<p>注意：如果想看之前某个标签状态下的文件，可以这样操作</p>
<p>1.git tag   查看当前分支下的标签</p>
<p>2.git  checkout v0.21   此时会指向打v0.21标签时的代码状态，（但现在处于一个空的分支上）</p>
<ol>
<li>cat  test.txt   查看某个文件</li>
</ol>
<p>git 查看远程分支、本地分支、创建分支、把分支推到远程repository、删除本地分支</p>
<p>1 查看远程分支</p>
<p>[plain] view plain copy<br>$ git branch -a  </p>
<ul>
<li>br-2.1.2.2<br>master<br>remotes/origin/HEAD -&gt; origin/master<br>remotes/origin/br-2.1.2.1<br>remotes/origin/br-2.1.2.2<br>remotes/origin/br-2.1.3<br>remotes/origin/master  </li>
</ul>
<p>2 查看本地分支</p>
<p>[plain] view plain copy<br>shuohailhl@SHUOHAILHL-PC /f/ggg/jingwei (br-2.1.2.2)<br>$ git branch  </p>
<ul>
<li>br-2.1.2.2<br>master  </li>
</ul>
<p>3 创建分支</p>
<p>[plain] view plain copy<br>shuohailhl@SHUOHAILHL-PC /f/ggg/jingwei (br-2.1.2.2)<br>$ git branch test  </p>
<p>shuohailhl@SHUOHAILHL-PC /f/ggg/jingwei (br-2.1.2.2)<br>$ git branch  </p>
<ul>
<li>br-2.1.2.2<br>master<br>test  </li>
</ul>
<p>线面是把分支推到远程分支 </p>
<p>[plain] view plain copy<br>$ git push origin test  </p>
<p>4 切换分支到test<br>[plain] view plain copy<br>shuohailhl@SHUOHAILHL-PC /f/ggg/jingwei (br-2.1.2.2)<br>$ git branch  </p>
<ul>
<li>br-2.1.2.2<br>master<br>test  </li>
</ul>
<p>shuohailhl@SHUOHAILHL-PC /f/ggg/jingwei (br-2.1.2.2)<br>$ git checkout test<br>M       jingwei-server/src/main/java/com/taobao/jingwei/server/service/cmd/GetCustomerTarCmd.java<br>M       jingwei-server/src/main/java/com/taobao/jingwei/server/util/ServerUtil.java<br>Switched to branch ‘test’  </p>
<p>shuohailhl@SHUOHAILHL-PC /f/ggg/jingwei (test)<br>$ git branch<br>  br-2.1.2.2<br>  master  </p>
<ul>
<li>test  </li>
</ul>
<p>M 表示cong 原来分支（上一次修改没有提交br-2.1.2.2）带过来的修改<br>5 删除本地分支   Git branch -d xxxxx</p>
<p>shuohailhl@SHUOHAILHL-PC /f/ggg/jingwei (test)</p>
<p>[plain] view plain copy<br>$ git checkout br-2.1.2.2<br>M       jingwei-server/src/main/java/com/taobao/jingwei/server/service/cmd/GetCustomerTarCmd.java<br>M       jingwei-server/src/main/java/com/taobao/jingwei/server/util/ServerUtil.java<br>Switched to branch ‘br-2.1.2.2’  </p>
<p>shuohailhl@SHUOHAILHL-PC /f/ggg/jingwei (br-2.1.2.2)<br>$ git br  </p>
<ul>
<li>br-2.1.2.2<br>master<br>test  </li>
</ul>
<p>shuohailhl@SHUOHAILHL-PC /f/ggg/jingwei (br-2.1.2.2)<br>$ git br -d test<br>Deleted branch test (was 17d28d9).  </p>
<p>shuohailhl@SHUOHAILHL-PC /f/ggg/jingwei (br-2.1.2.2)<br>$ git br  </p>
<ul>
<li>br-2.1.2.2<br>master  </li>
</ul>
<p>6 查看本地和远程分支  -a。前面带*号的代表你当前工作目录所处的分支</p>
<p>[plain] view plain copy<br>remotes/origin/HEAD -&gt; origin/master #啥意思呢？<br>        ”在clone完成之后，git 会自动为你将此远程仓库命名为origin（origin只相当于一个别名，运行git remote –v或者查看.git/config可以看到origin的含义），并下载其中所有的数据，建立一个指向它的master 分支的指针，我们用(远程仓库名)/(分支名) 这样的形式表示远程分支，所以origin/master指向的是一个remote branch（从那个branch我们clone数据到本地）“<br>       这个是执行 git remote -v 的结果，看出来origin其实就是远程的git地址的一个别名。</p>
<p>[plain] view plain copy<br>$ git remote  -v<br>origin  git@xxxx/jingwei.git (fetch)<br>origin  git@xxxx/jingwei.git (push)  </p>
<p>[plain] view plain copy<br>shuohailhl@SHUOHAILHL-PC /f/ggg/jingwei (test)<br>$ git branch -a<br>  br-2.1.2.2<br>  master  </p>
<ul>
<li>test<br>remotes/origin/HEAD -&gt; origin/master<br>remotes/origin/br-2.1.2.1<br>remotes/origin/br-2.1.2.2<br>remotes/origin/br-2.1.3<br>remotes/origin/master  </li>
</ul>
<p>7 删除远程版本</p>
<p>[plain] view plain copy<br>git push origin :br-1.0.0  </p>
<p>[plain] view plain copy<br>删除远程分支<br>git branch -r -d origin/branch-name<br>git push origin :branch-name </p>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
            <tag> 参考文档 </tag>
            
            <tag> git命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git参考文档]]></title>
      <url>/git/201801/git-pub/git-doc-01.html</url>
      <content type="html"><![CDATA[<h1 id="创建附注标签"><a href="#创建附注标签" class="headerlink" title="创建附注标签"></a>创建附注标签</h1><p>$ git tag -a v5.6.31 -m  “php 5.6.31”</p>
<p>推送本地的TAG到远程<br>git push -v origin refs/tags/v5.6.31</p>
<p>查看、添加、提交、删除、找回，重置修改文件</p>
<p>git help <command> # 显示command的help</p>
<p>git show # 显示某次提交的内容 git show $id</p>
<p>git co – <file> # 抛弃工作区修改</file></p>
<p>git co . # 抛弃工作区修改</p>
<p>git add <file> # 将工作文件修改提交到本地暂存区</file></p>
<p>git add . # 将所有修改过的工作文件提交暂存区</p>
<p>git rm <file> # 从版本库中删除文件</file></p>
<p>git rm <file> –cached # 从版本库中删除文件，但不删除文件</file></p>
<p>git reset <file> # 从暂存区恢复到工作文件</file></p>
<p>git reset – . # 从暂存区恢复到工作文件</p>
<p>git reset –hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改</p>
<p>git ci <file> git ci . git ci -a # 将git add, git rm和git ci等操作都合并在一起做　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　git ci -am “some comments”</file></p>
<p>git ci –amend # 修改最后一次提交记录</p>
<p>git revert &lt;$id&gt; # 恢复某次提交的状态，恢复动作本身也创建次提交对象</p>
<p>git revert HEAD # 恢复最后一次提交的状态</p>
<p>查看文件diff</p>
<p>git diff <file> # 比较当前文件和暂存区文件差异 git diff</file></p>
<p>git diff <id1><id2> # 比较两次提交之间的差异</id2></id1></p>
<p>git diff <branch1>..<branch2> # 在两个分支之间比较</branch2></branch1></p>
<p>git diff –staged # 比较暂存区和版本库差异</p>
<p>git diff –cached # 比较暂存区和版本库差异</p>
<p>git diff –stat # 仅仅比较统计信息</p>
<p>查看提交记录</p>
<p>git log git log <file> # 查看该文件每次提交记录</file></p>
<p>git log -p <file> # 查看每次详细修改内容的diff</file></p>
<p>git log -p -2 # 查看最近两次详细修改内容的diff</p>
<p>git log –stat #查看提交统计信息</p>
<p>tig</p>
<p>Mac上可以使用tig代替diff和log，brew install tig</p>
<p>Git 本地分支管理</p>
<p>查看、切换、创建和删除分支</p>
<p>git br -r # 查看远程分支</p>
<p>git br <new_branch> # 创建新的分支</new_branch></p>
<p>git br -v # 查看各个分支最后提交信息</p>
<p>git br –merged # 查看已经被合并到当前分支的分支</p>
<p>git br –no-merged # 查看尚未被合并到当前分支的分支</p>
<p>git co <branch> # 切换到某个分支</branch></p>
<p>git co -b <new_branch> # 创建新的分支，并且切换过去</new_branch></p>
<p>git co -b <new_branch> <branch> # 基于branch创建新的new_branch</branch></new_branch></p>
<p>git co $id # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除</p>
<p>git co $id -b <new_branch> # 把某次历史提交记录checkout出来，创建成一个分支</new_branch></p>
<p>git br -d <branch> # 删除某个分支</branch></p>
<p>git br -D <branch> # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</branch></p>
<p> 分支合并和rebase</p>
<p>git merge <branch> # 将branch分支合并到当前分支</branch></p>
<p>git merge origin/master –no-ff # 不要Fast-Foward合并，这样可以生成merge提交</p>
<p>git rebase master <branch> # 将master rebase到branch，相当于： git co <branch> &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge <branch></branch></branch></branch></p>
<p> Git补丁管理(方便在多台机器上开发同步时用)</p>
<p>git diff &gt; ../sync.patch # 生成补丁</p>
<p>git apply ../sync.patch # 打补丁</p>
<p>git apply –check ../sync.patch #测试补丁能否成功</p>
<p> Git暂存管理</p>
<p>git stash # 暂存</p>
<p>git stash list # 列所有stash</p>
<p>git stash apply # 恢复暂存的内容</p>
<p>git stash drop # 删除暂存区</p>
<p>Git远程分支管理</p>
<p>git pull # 抓取远程仓库所有分支更新并合并到本地</p>
<p>git pull –no-ff # 抓取远程仓库所有分支更新并合并到本地，不要快进合并</p>
<p>git fetch origin # 抓取远程仓库更新</p>
<p>git merge origin/master # 将远程主分支合并到本地当前分支</p>
<p>git co –track origin/branch # 跟踪某个远程分支创建相应的本地分支</p>
<p>git co -b <local_branch> origin/<remote_branch> # 基于远程分支创建本地分支，功能同上</remote_branch></local_branch></p>
<p>git push # push所有分支</p>
<p>git push origin master # 将本地主分支推到远程主分支</p>
<p>git push -u origin master # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)</p>
<p>git push origin <local_branch> # 创建远程分支， origin是远程仓库名</local_branch></p>
<p>git push origin <local_branch>:<remote_branch> # 创建远程分支</remote_branch></local_branch></p>
<p>git push origin :<remote_branch> #先删除本地分支(git br -d <branch>)，然后再push删除远程分支</branch></remote_branch></p>
<p>Git远程仓库管理</p>
<p>GitHub</p>
<p>git remote -v # 查看远程服务器地址和仓库名称</p>
<p>git remote show origin # 查看远程服务器仓库状态</p>
<p>git remote add origin git@ github:robbin/robbin_site.git # 添加远程仓库地址</p>
<p>git remote set-url origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址) git remote rm <repository> # 删除远程仓库</repository></p>
<p>创建远程仓库</p>
<p>git clone –bare robbin_site robbin_site.git # 用带版本的项目创建纯版本仓库</p>
<p>scp -r my_project.git git@ git.csdn.net:~ # 将纯仓库上传到服务器上</p>
<p>mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git –bare init # 在服务器创建纯仓库</p>
<p>git remote add origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址</p>
<p>git push -u origin master # 客户端首次提交</p>
<p>git push -u origin develop # 首次将本地develop分支提交到远程develop分支，并且track</p>
<p>git remote set-head origin master # 设置远程仓库的HEAD指向master分支</p>
<p>也可以命令设置跟踪远程库和本地库</p>
<p>git branch –set-upstream master origin/master</p>
<p>git branch –set-upstream develop origin/develop</p>
<hr>
<p>git tag — 标签相关操作</p>
<p>标签可以针对某一时间点的版本做标记，常用于版本发布。</p>
<p>列出标签<br>$ Git tag # 在控制台打印出当前仓库的所有标签<br>$ git tag -l ‘v0.1.*’ # 搜索符合模式的标签</p>
<p>打标签<br>git标签分为两种类型：轻量标签和附注标签。轻量标签是指向提交对象的引用，附注标签则是仓库中的一个独立对象。建议使用附注标签。</p>
<h1 id="创建轻量标签"><a href="#创建轻量标签" class="headerlink" title="创建轻量标签"></a>创建轻量标签</h1><p>$ git tag v0.1.2-light</p>
<h1 id="创建附注标签-1"><a href="#创建附注标签-1" class="headerlink" title="创建附注标签"></a>创建附注标签</h1><p>$ git tag -a v0.1.2 -m “0.1.2版本”</p>
<p>创建轻量标签不需要传递参数，直接指定标签名称即可。<br>创建附注标签时，参数a即annotated的缩写，指定标签类型，后附标签名。参数m指定标签说明，说明信息会保存在标签对象中。</p>
<p>切换到标签<br>与切换分支命令相同，用git checkout [tagname]<br>查看标签信息<br>用git show命令可以查看标签的版本信息：<br>$ git show v0.1.2</p>
<p>删除标签<br>误打或需要修改标签时，需要先将标签删除，再打新标签。<br>$ git tag -d v0.1.2 # 删除标签</p>
<p>参数d即delete的缩写，意为删除其后指定的标签。</p>
<p>给指定的commit打标签<br>打标签不必要在head之上，也可在之前的版本上打，这需要你知道某个提交对象的校验和（通过git log获取）。</p>
<h1 id="补打标签"><a href="#补打标签" class="headerlink" title="补打标签"></a>补打标签</h1><p>$ git tag -a v0.1.1 9fbc3d0</p>
<p>标签发布<br>通常的git push不会将标签对象提交到git服务器，我们需要进行显式的操作：<br>$ git push origin v0.1.2 # 将v0.1.2标签提交到git服务器<br>$ git push origin –tags # 将本地所有标签一次性提交到git服务器</p>
<p>注意：如果想看之前某个标签状态下的文件，可以这样操作</p>
<p>1.git tag   查看当前分支下的标签</p>
<p>2.git  checkout v0.21   此时会指向打v0.21标签时的代码状态，（但现在处于一个空的分支上）</p>
<ol>
<li>cat  test.txt   查看某个文件</li>
</ol>
<p>git 查看远程分支、本地分支、创建分支、把分支推到远程repository、删除本地分支</p>
<p>1 查看远程分支</p>
<p>[plain] view plain copy<br>$ git branch -a  </p>
<ul>
<li>br-2.1.2.2<br>master<br>remotes/origin/HEAD -&gt; origin/master<br>remotes/origin/br-2.1.2.1<br>remotes/origin/br-2.1.2.2<br>remotes/origin/br-2.1.3<br>remotes/origin/master  </li>
</ul>
<p>2 查看本地分支</p>
<p>[plain] view plain copy<br>shuohailhl@SHUOHAILHL-PC /f/ggg/jingwei (br-2.1.2.2)<br>$ git branch  </p>
<ul>
<li>br-2.1.2.2<br>master  </li>
</ul>
<p>3 创建分支</p>
<p>[plain] view plain copy<br>shuohailhl@SHUOHAILHL-PC /f/ggg/jingwei (br-2.1.2.2)<br>$ git branch test  </p>
<p>shuohailhl@SHUOHAILHL-PC /f/ggg/jingwei (br-2.1.2.2)<br>$ git branch  </p>
<ul>
<li>br-2.1.2.2<br>master<br>test  </li>
</ul>
<p>线面是把分支推到远程分支 </p>
<p>[plain] view plain copy<br>$ git push origin test  </p>
<p>4 切换分支到test<br>[plain] view plain copy<br>shuohailhl@SHUOHAILHL-PC /f/ggg/jingwei (br-2.1.2.2)<br>$ git branch  </p>
<ul>
<li>br-2.1.2.2<br>master<br>test  </li>
</ul>
<p>shuohailhl@SHUOHAILHL-PC /f/ggg/jingwei (br-2.1.2.2)<br>$ git checkout test<br>M       jingwei-server/src/main/java/com/taobao/jingwei/server/service/cmd/GetCustomerTarCmd.java<br>M       jingwei-server/src/main/java/com/taobao/jingwei/server/util/ServerUtil.java<br>Switched to branch ‘test’  </p>
<p>shuohailhl@SHUOHAILHL-PC /f/ggg/jingwei (test)<br>$ git branch<br>  br-2.1.2.2<br>  master  </p>
<ul>
<li>test  </li>
</ul>
<p>M 表示cong 原来分支（上一次修改没有提交br-2.1.2.2）带过来的修改<br>5 删除本地分支   Git branch -d xxxxx</p>
<p>shuohailhl@SHUOHAILHL-PC /f/ggg/jingwei (test)</p>
<p>[plain] view plain copy<br>$ git checkout br-2.1.2.2<br>M       jingwei-server/src/main/java/com/taobao/jingwei/server/service/cmd/GetCustomerTarCmd.java<br>M       jingwei-server/src/main/java/com/taobao/jingwei/server/util/ServerUtil.java<br>Switched to branch ‘br-2.1.2.2’  </p>
<p>shuohailhl@SHUOHAILHL-PC /f/ggg/jingwei (br-2.1.2.2)<br>$ git br  </p>
<ul>
<li>br-2.1.2.2<br>master<br>test  </li>
</ul>
<p>shuohailhl@SHUOHAILHL-PC /f/ggg/jingwei (br-2.1.2.2)<br>$ git br -d test<br>Deleted branch test (was 17d28d9).  </p>
<p>shuohailhl@SHUOHAILHL-PC /f/ggg/jingwei (br-2.1.2.2)<br>$ git br  </p>
<ul>
<li>br-2.1.2.2<br>master  </li>
</ul>
<p>6 查看本地和远程分支  -a。前面带*号的代表你当前工作目录所处的分支</p>
<p>[plain] view plain copy<br>remotes/origin/HEAD -&gt; origin/master #啥意思呢？<br>        ”在clone完成之后，git 会自动为你将此远程仓库命名为origin（origin只相当于一个别名，运行git remote –v或者查看.git/config可以看到origin的含义），并下载其中所有的数据，建立一个指向它的master 分支的指针，我们用(远程仓库名)/(分支名) 这样的形式表示远程分支，所以origin/master指向的是一个remote branch（从那个branch我们clone数据到本地）“<br>       这个是执行 git remote -v 的结果，看出来origin其实就是远程的git地址的一个别名。</p>
<p>[plain] view plain copy<br>$ git remote  -v<br>origin  git@xxxx/jingwei.git (fetch)<br>origin  git@xxxx/jingwei.git (push)  </p>
<p>[plain] view plain copy<br>shuohailhl@SHUOHAILHL-PC /f/ggg/jingwei (test)<br>$ git branch -a<br>  br-2.1.2.2<br>  master  </p>
<ul>
<li>test<br>remotes/origin/HEAD -&gt; origin/master<br>remotes/origin/br-2.1.2.1<br>remotes/origin/br-2.1.2.2<br>remotes/origin/br-2.1.3<br>remotes/origin/master  </li>
</ul>
<p>7 删除远程版本</p>
<p>[plain] view plain copy<br>git push origin :br-1.0.0  </p>
<p>[plain] view plain copy<br>删除远程分支<br>git branch -r -d origin/branch-name<br>git push origin :branch-name </p>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
            <tag> 参考文档 </tag>
            
            <tag> git命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mysql 流程控制语句全接触]]></title>
      <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91/201711/mysql-flow-control-statements-23.html</url>
      <content type="html"><![CDATA[<p>&nbsp;</p>
<p>Flow Control Statements</p>
<p>MySQL supports the <a href="https://dev.mysql.com/doc/refman/5.7/en/if.html" target="_blank" rel="noopener">IF</a>, <a href="https://dev.mysql.com/doc/refman/5.7/en/case.html" target="_blank" rel="noopener">CASE</a>, <a href="https://dev.mysql.com/doc/refman/5.7/en/iterate.html" target="_blank" rel="noopener">ITERATE</a>, <a href="https://dev.mysql.com/doc/refman/5.7/en/leave.html" target="_blank" rel="noopener">LEAVE</a> <a href="https://dev.mysql.com/doc/refman/5.7/en/loop.html" target="_blank" rel="noopener">LOOP</a>, <a href="https://dev.mysql.com/doc/refman/5.7/en/while.html" target="_blank" rel="noopener">WHILE</a>, and <a href="https://dev.mysql.com/doc/refman/5.7/en/repeat.html" target="_blank" rel="noopener">REPEAT</a> constructs for flow control within stored programs. It also supports <a href="https://dev.mysql.com/doc/refman/5.7/en/return.html" target="_blank" rel="noopener">RETURN</a> within stored functions.</p>
<p>Many of these constructs contain other statements, as indicated by the grammar specifications in the following sections. Such constructs may be nested. For example, an <a href="https://dev.mysql.com/doc/refman/5.7/en/if.html" target="_blank" rel="noopener">IF</a> statement might contain a <a href="https://dev.mysql.com/doc/refman/5.7/en/while.html" target="_blank" rel="noopener">WHILE</a> loop, which itself contains a <a href="https://dev.mysql.com/doc/refman/5.7/en/case.html" target="_blank" rel="noopener">CASE</a> statement.</p>
<p>MySQL does not support FOR loops.</p>
<p>&nbsp;</p>
<h4 id="CASE-Syntax"><a href="#CASE-Syntax" class="headerlink" title="CASE Syntax"></a>CASE Syntax</h4><p><pre class="lang:plsql decode:true">CASE case_value</pre></p>
<p>WHEN when_value THEN statement_list</p>
<p>[WHEN when_value THEN statement_list] …</p>
<p>[ELSE statement_list]</p>
<p>END CASE<br>Or:</p>
<p><pre class="lang:plsql decode:true ">CASE</pre></p>
<p>WHEN search_condition THEN statement_list</p>
<p>[WHEN search_condition THEN statement_list] …</p>
<p>[ELSE statement_list]</p>
<p>END CASE<br>&nbsp;</p>
<p>&nbsp;</p>
<p>Example:</p>
<p><pre class="lang:default decode:true ">DELIMITER |</pre></p>
<p>CREATE PROCEDURE p()</p>
<p>BEGIN</p>
<p>DECLARE v INT DEFAULT 1;</p>
<p>CASE v</p>
<p>WHEN 2 THEN SELECT v;</p>
<p>WHEN 3 THEN SELECT 0;</p>
<p>ELSE</p>
<p>BEGIN</p>
<p>END;</p>
<p>END CASE;</p>
<p>END;</p>
<p>|<br>&nbsp;</p>
<h4 id="IF-Syntax"><a href="#IF-Syntax" class="headerlink" title="IF Syntax"></a>IF Syntax</h4><p><pre class="lang:default decode:true">IF search_condition THEN statement_list</pre></p>
<p>[ELSEIF search_condition THEN statement_list] …</p>
<p>[ELSE statement_list]</p>
<p>END IF<br>Example:</p>
<p>&nbsp;</p>
<p><pre class="lang:default decode:true ">DELIMITER //</pre></p>
<p>CREATE FUNCTION SimpleCompare(n INT, m INT)</p>
<p>RETURNS VARCHAR(20)</p>
<p>BEGIN</p>
<p>DECLARE s VARCHAR(20);</p>
<p>IF n &gt; m THEN SET s = ‘&gt;’;</p>
<p>ELSEIF n = m THEN SET s = ‘=’;</p>
<p>ELSE SET s = ‘&lt;’;</p>
<p>END IF;</p>
<p>SET s = CONCAT(n, ‘ ‘, s, ‘ ‘, m);</p>
<p>RETURN s;</p>
<p>END //</p>
<p>DELIMITER ;<br>&nbsp;</p>
<p><pre class="lang:default decode:true ">DELIMITER //</pre></p>
<p>CREATE FUNCTION VerboseCompare (n INT, m INT)</p>
<p>RETURNS VARCHAR(50)</p>
<p>BEGIN</p>
<p>DECLARE s VARCHAR(50);</p>
<p>IF n = m THEN SET s = ‘equals’;</p>
<p>ELSE</p>
<p>IF n &gt; m THEN SET s = ‘greater’;</p>
<p>ELSE SET s = ‘less’;</p>
<p>END IF;</p>
<p>SET s = CONCAT(‘is ‘, s, ‘ than’);</p>
<p>END IF;</p>
<p>SET s = CONCAT(n, ‘ ‘, s, ‘ ‘, m, ‘.’);</p>
<p>RETURN s;</p>
<p>END //</p>
<p>DELIMITER ;<br>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h4 id="LOOP-Syntax"><a href="#LOOP-Syntax" class="headerlink" title="LOOP Syntax"></a>LOOP Syntax</h4><p><pre class="lang:default decode:true ">[begin_label:] LOOP</pre></p>
<p>statement_list</p>
<p>END LOOP [end_label]<br>&nbsp;</p>
<p><pre class="lang:default decode:true ">CREATE PROCEDURE doiterate(p1 INT)</pre></p>
<p>BEGIN</p>
<p>label1: LOOP</p>
<p>SET p1 = p1 + 1;</p>
<p>IF p1 &lt; 10 THEN</p>
<p>ITERATE label1;</p>
<p>END IF;</p>
<p>LEAVE label1;</p>
<p>END LOOP label1;</p>
<p>SET @x = p1;</p>
<p>END;</p>
<p><br>&nbsp;</p>
<p>&nbsp;</p>
<h4 id="REPEAT-Syntax"><a href="#REPEAT-Syntax" class="headerlink" title="REPEAT Syntax"></a>REPEAT Syntax</h4><p><pre class="lang:default decode:true ">[begin_label:] REPEAT</pre></p>
<p>statement_list</p>
<p>UNTIL search_condition</p>
<p>END REPEAT [end_label]</p>
<p><br>&nbsp;</p>
<p>Example:</p>
<p><pre class="lang:default decode:true ">mysql&gt; delimiter //</pre></p>
<p>mysql&gt; CREATE PROCEDURE dorepeat(p1 INT)</p>
<p>-&gt; BEGIN</p>
<p>-&gt;   SET @x = 0;</p>
<p>-&gt;   REPEAT</p>
<p>-&gt;     SET @x = @x + 1;</p>
<p>-&gt;   UNTIL @x &gt; p1 END REPEAT;</p>
<p>-&gt; END</p>
<p>-&gt; //</p>
<p>Query OK, 0 rows affected (0.00 sec)</p>
<p>mysql&gt; CALL dorepeat(1000)//</p>
<p>Query OK, 0 rows affected (0.00 sec)</p>
<p>mysql&gt; SELECT @x//</p>
<p>+——+</p>
<p>| @x   |</p>
<p>+——+</p>
<p>| 1001 |</p>
<p>+——+</p>
<p>1 row in set (0.00 sec)<br>&nbsp;</p>
<p>&nbsp;</p>
<h4 id="RETURN-Syntax"><a href="#RETURN-Syntax" class="headerlink" title="RETURN Syntax"></a>RETURN Syntax</h4><p>RETURN <em>expr</em></p>
<p>The <a href="https://dev.mysql.com/doc/refman/5.7/en/return.html" target="_blank" rel="noopener">RETURN</a> statement terminates execution of a stored function and returns the value <strong><em>expr</em></strong> to the function caller. There must be at least one <a href="https://dev.mysql.com/doc/refman/5.7/en/return.html" target="_blank" rel="noopener">RETURN</a> statement in a stored function. There may be more than one if the function has multiple exit points.</p>
<p>This statement is not used in stored procedures, triggers, or events. The <a href="https://dev.mysql.com/doc/refman/5.7/en/leave.html" target="_blank" rel="noopener">LEAVE</a> statement can be used to exit a stored program of those types.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h4 id="WHILE-Syntax"><a href="#WHILE-Syntax" class="headerlink" title="WHILE Syntax"></a>WHILE Syntax</h4><p><pre class="lang:default decode:true ">[begin_label:] WHILE search_condition DO</pre></p>
<p>statement_list</p>
<p>END WHILE [end_label]<br>&nbsp;</p>
<p>&nbsp;</p>
<p>The statement list within a <a href="https://dev.mysql.com/doc/refman/5.7/en/while.html" target="_blank" rel="noopener">WHILE</a> statement is repeated as long as the <strong>_search<em>condition</em></strong> expression is true. <strong>_statement<em>list</em></strong>consists of one or more SQL statements, each terminated by a semicolon (;) statement delimiter.</p>
<p>A <a href="https://dev.mysql.com/doc/refman/5.7/en/while.html" target="_blank" rel="noopener">WHILE</a> statement can be labeled. For the rules regarding label use, see <a href="https://dev.mysql.com/doc/refman/5.7/en/statement-labels.html" target="_blank" rel="noopener">Section 13.6.2, “Statement Label Syntax”</a>.</p>
<p>Example:</p>
<p><pre class="lang:default decode:true ">CREATE PROCEDURE dowhile()</pre></p>
<p>BEGIN</p>
<p>DECLARE v1 INT DEFAULT 5;</p>
<p>WHILE v1 &gt; 0 DO</p>
<p>…</p>
<p>SET v1 = v1 - 1;</p>
<p>END WHILE;</p>
<p>END;<br>&nbsp;</p>
<h4 id="LEAVE-Syntax"><a href="#LEAVE-Syntax" class="headerlink" title="LEAVE Syntax"></a>LEAVE Syntax</h4><p>LEAVE <em>label</em></p>
<p>This statement is used to exit the flow control construct that has the given label. If the label is for the outermost stored program block, <a href="https://dev.mysql.com/doc/refman/5.7/en/leave.html" target="_blank" rel="noopener">LEAVE</a> exits the program.</p>
<p><a href="https://dev.mysql.com/doc/refman/5.7/en/leave.html" target="_blank" rel="noopener">LEAVE</a> can be used within <a href="https://dev.mysql.com/doc/refman/5.7/en/begin-end.html" target="_blank" rel="noopener">BEGIN … END</a> or loop constructs (<a href="https://dev.mysql.com/doc/refman/5.7/en/loop.html" target="_blank" rel="noopener">LOOP</a>, <a href="https://dev.mysql.com/doc/refman/5.7/en/repeat.html" target="_blank" rel="noopener">REPEAT</a>, <a href="https://dev.mysql.com/doc/refman/5.7/en/while.html" target="_blank" rel="noopener">WHILE</a>).</p>
<p>For an example, see <a href="https://dev.mysql.com/doc/refman/5.7/en/loop.html" target="_blank" rel="noopener">Section 13.6.5.5, “LOOP Syntax”</a>.</p>
<p>&nbsp;</p>
<h4 id="ITERATE-Syntax"><a href="#ITERATE-Syntax" class="headerlink" title="ITERATE Syntax"></a>ITERATE Syntax</h4><p>ITERATE <em>label</em></p>
<p>&nbsp;</p>
<p><a href="https://dev.mysql.com/doc/refman/5.7/en/iterate.html" target="_blank" rel="noopener">ITERATE</a> can appear only within <a href="https://dev.mysql.com/doc/refman/5.7/en/loop.html" target="_blank" rel="noopener">LOOP</a>, <a href="https://dev.mysql.com/doc/refman/5.7/en/repeat.html" target="_blank" rel="noopener">REPEAT</a>, and <a href="https://dev.mysql.com/doc/refman/5.7/en/while.html" target="_blank" rel="noopener">WHILE</a> statements. <a href="https://dev.mysql.com/doc/refman/5.7/en/iterate.html" target="_blank" rel="noopener">ITERATE</a> means “start the loop again.”</p>
<p>For an example, see <a href="https://dev.mysql.com/doc/refman/5.7/en/loop.html" target="_blank" rel="noopener">Section 13.6.5.5, “LOOP Syntax”</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3 id="Statement-Label-Syntax"><a href="#Statement-Label-Syntax" class="headerlink" title="Statement Label Syntax"></a>Statement Label Syntax</h3><p><pre class="lang:default decode:true ">[begin_label:] BEGIN</pre></p>
<p>[statement_list]</p>
<p>END [end_label]</p>
<p>[begin_label:] LOOP</p>
<p>statement_list</p>
<p>END LOOP [end_label]</p>
<p>[begin_label:] REPEAT</p>
<p>statement_list</p>
<p>UNTIL search_condition</p>
<p>END REPEAT [end_label]</p>
<p>[begin_label:] WHILE search_condition DO</p>
<p>statement_list</p>
<p>END WHILE [end_label]</p>
<p><br>&nbsp;</p>
<p>Labels are permitted for <a href="https://dev.mysql.com/doc/refman/5.7/en/begin-end.html" target="_blank" rel="noopener">BEGIN … END</a> blocks and for the <a href="https://dev.mysql.com/doc/refman/5.7/en/loop.html" target="_blank" rel="noopener">LOOP</a>, <a href="https://dev.mysql.com/doc/refman/5.7/en/repeat.html" target="_blank" rel="noopener">REPEAT</a>, and <a href="https://dev.mysql.com/doc/refman/5.7/en/while.html" target="_blank" rel="noopener">WHILE</a> statements. Label use for those statements follows these rules:</p>
<ul>
<li><strong>_begin<em>label</em></strong>must be followed by a colon.</li>
<li><strong>_begin<em>label</em></strong>can be given without <strong>_end<em>label</em></strong>. If <strong>_end<em>label</em></strong> is present, it must be the same as <strong>_begin<em>label</em></strong>.</li>
<li><strong>_end<em>label</em></strong>cannot be given without <strong>_begin<em>label</em></strong>.</li>
<li>Labels at the same nesting level must be distinct.</li>
<li>Labels can be up to 16 characters long.<br>To refer to a label within the labeled construct, use an <a href="https://dev.mysql.com/doc/refman/5.7/en/iterate.html" target="_blank" rel="noopener">ITERATE</a> or <a href="https://dev.mysql.com/doc/refman/5.7/en/leave.html" target="_blank" rel="noopener">LEAVE</a> statement. The following example uses those statements to continue iterating or terminate the loop:<br><pre class="lang:default decode:true ">CREATE PROCEDURE doiterate(p1 INT)</pre></li>
</ul>
<p>BEGIN</p>
<p>label1: LOOP</p>
<p>SET p1 = p1 + 1;</p>
<p>IF p1 &lt; 10 THEN ITERATE label1; END IF;</p>
<p>LEAVE label1;</p>
<p>END LOOP label1;</p>
<p>END;</p>
<p><br>&nbsp;</p>
<p>&nbsp;</p>
<p>More info on mysql:</p>
<p><a href="https://dev.mysql.com/doc/refman/5.7/en/case.html" target="_blank" rel="noopener">13.6.5.1 CASE Syntax</a></p>
<p><a href="https://dev.mysql.com/doc/refman/5.7/en/if.html" target="_blank" rel="noopener">13.6.5.2 IF Syntax</a></p>
<p><a href="https://dev.mysql.com/doc/refman/5.7/en/iterate.html" target="_blank" rel="noopener">13.6.5.3 ITERATE Syntax</a></p>
<p><a href="https://dev.mysql.com/doc/refman/5.7/en/leave.html" target="_blank" rel="noopener">13.6.5.4 LEAVE Syntax</a></p>
<p><a href="https://dev.mysql.com/doc/refman/5.7/en/loop.html" target="_blank" rel="noopener">13.6.5.5 LOOP Syntax</a></p>
<p><a href="https://dev.mysql.com/doc/refman/5.7/en/repeat.html" target="_blank" rel="noopener">13.6.5.6 REPEAT Syntax</a></p>
<p><a href="https://dev.mysql.com/doc/refman/5.7/en/return.html" target="_blank" rel="noopener">13.6.5.7 RETURN Syntax</a></p>
<p><a href="https://dev.mysql.com/doc/refman/5.7/en/while.html" target="_blank" rel="noopener">13.6.5.8 WHILE Syntax</a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
]]></content>
      
        <categories>
            
            <category> 数据库开发 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[mysql 产生指定位数的随机浮点数]]></title>
      <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91/201711/mysql-rand-convert-decimal-23.html</url>
      <content type="html"><![CDATA[<h1 id="mysql-rand，round，floor，ceiling函数以及获得指定范围随机数-这些都是整数或者是rand-默认位数的随机小数，如何获得指定位数的随机浮点数呢？"><a href="#mysql-rand，round，floor，ceiling函数以及获得指定范围随机数-这些都是整数或者是rand-默认位数的随机小数，如何获得指定位数的随机浮点数呢？" class="headerlink" title="mysql rand，round，floor，ceiling函数以及获得指定范围随机数 这些都是整数或者是rand()默认位数的随机小数，如何获得指定位数的随机浮点数呢？"></a>mysql rand，round，floor，ceiling函数以及获得指定范围随机数 这些都是整数或者是rand()默认位数的随机小数，如何获得指定位数的随机浮点数呢？</h1><h1 id="一下是mysql中几种获取指定位数随机数的方法："><a href="#一下是mysql中几种获取指定位数随机数的方法：" class="headerlink" title="一下是mysql中几种获取指定位数随机数的方法："></a>一下是mysql中几种获取指定位数随机数的方法：</h1><h2 id="1-直接使用-round-x-n-的形式获取指定位数的随机浮点数："><a href="#1-直接使用-round-x-n-的形式获取指定位数的随机浮点数：" class="headerlink" title="1. 直接使用 round(x,n) 的形式获取指定位数的随机浮点数："></a>1. 直接使用 round(x,n) 的形式获取指定位数的随机浮点数：</h2><p><span class="s1">例一： </span></p>
<pre class="brush: sql;">select round(10.23678,2);
+-------------------+
| round(10.23678,2) |
+-------------------+
| 10.24             |
+-------------------+
</pre>
&nbsp;

## 2.使用 truncate 直接截取（不四舍五入）指定位数的浮点数:

例一：   select truncate((1+rand()*10),2);

&nbsp;

例二：
<pre class="brush: sql;"> select truncate(10.23678,2);   -- 直接截取2位小数

+----------------------+

| truncate(10.23678,2) |

+----------------------+

| 10.23                |

+----------------------+
</pre>

<h2 id="3-使用convert-函数将rand-函数生成的浮点数转换为指定位数的浮点数-多余位数的小数将四舍五入"><a href="#3-使用convert-函数将rand-函数生成的浮点数转换为指定位数的浮点数-多余位数的小数将四舍五入" class="headerlink" title="3. 使用convert 函数将rand()函数生成的浮点数转换为指定位数的浮点数, 多余位数的小数将四舍五入"></a>3. 使用convert 函数将rand()函数生成的浮点数转换为指定位数的浮点数, 多余位数的小数将四舍五入</h2><p>&nbsp;</p>
<p>例一： select convert((1+rand()<em>10),<em>*<span style="color: #ff0000;">decimal</span>(10,2)</em></em>);   – 将数字以四舍五入的方式转换为指定位数的浮点数</p>
<p>&nbsp;</p>
<p>例二：</p>
<pre class="brush: sql;"> select convert(10.23678,decimal(12,2));

+---------------------------------+

| convert(10.23678,decimal(12,2)) |

+---------------------------------+

| 10.24                           |

+---------------------------------+

</pre>

<hr>
<h2 id="rand（）函数只能生成0到1之间的随机小数，如果想要生成0到10-0到100就rand（）-相应的值。"><a href="#rand（）函数只能生成0到1之间的随机小数，如果想要生成0到10-0到100就rand（）-相应的值。" class="headerlink" title="rand（）函数只能生成0到1之间的随机小数，如果想要生成0到10,0到100就rand（）*相应的值。"></a>rand（）函数只能生成0到1之间的随机小数，如果想要生成0到10,0到100就rand（）*相应的值。</h2><p>&nbsp;</p>
<h2 id="如果想得到整数就要用到round（x），floor（x）和ceiling（x）。"><a href="#如果想得到整数就要用到round（x），floor（x）和ceiling（x）。" class="headerlink" title="如果想得到整数就要用到round（x），floor（x）和ceiling（x）。"></a>如果想得到整数就要用到round（x），floor（x）和ceiling（x）。</h2><p>round（x）是四舍五入 ；<br>floor（x）是去小于等于x的整数；<br>ceiling（x）是取大于等于x的整数；<br>其中round函数还有round（x，n）的形式，保留n位小数。</p>
<p>&nbsp;</p>
<h2 id="得到指定范围的随机数-round（rand（）-（max-min）-min）即可"><a href="#得到指定范围的随机数-round（rand（）-（max-min）-min）即可" class="headerlink" title="得到指定范围的随机数 round（rand（）*（max-min）+min）即可"></a>得到指定范围的随机数 round（rand（）*（max-min）+min）即可</h2><p>&nbsp;</p>
<hr>
<p>MySQL 的CAST()和CONVERT()函数可用来获取一个类型的值，并产生另一个类型的值。两者具体的语法如下：</p>
<p><pre class="brush: sql;">CAST(value as type);<br>CONVERT(value, type);<br></pre><br>就是<a href="http://www.nowamagic.net/librarys/veda/tag/CAST" target="_blank" rel="noopener">CAST</a>(xxx AS 类型), CONVERT(xxx,类型)。</p>
<p>可以转换的类型是有限制的。这个类型可以是以下值其中的一个：</p>
<ul>
<li>二进制，同带binary前缀的效果 : BINARY</li>
<li>字符型，可带参数 : CHAR()</li>
<li>日期 : DATE</li>
<li>时间: TIME</li>
<li>日期时间型 : DATETIME</li>
<li>浮点数 : DECIMAL</li>
<li>整数 : SIGNED</li>
<li>无符号整数 : UNSIGNED<br>下面举几个例子：</li>
</ul>
<p>例一</p>
<p><pre class="brush: sql;">mysql&gt; SELECT CONVERT(‘23’,SIGNED);<br>+———————-+<br>| CONVERT(‘23’,SIGNED) |<br>+———————-+<br>|                   23 |<br>+———————-+<br>1 row in set<br></pre><br>例二</p>
<p><pre class="brush: sql;">mysql&gt; SELECT CAST(‘125e342.83’ AS signed);<br>+——————————+<br>| CAST(‘125e342.83’ AS signed) |<br>+——————————+<br>|                          125 |<br>+——————————+<br>1 row in set<br></pre><br>例三</p>
<p><pre class="brush: sql;">mysql&gt; SELECT CAST(‘3.35’ AS signed);<br>+————————+<br>| CAST(‘3.35’ AS signed) |<br>+————————+<br>|                      3 |<br>+————————+<br>1 row in set<br></pre><br>像上面例子一样，将varchar 转为int 用 cast(a as signed)，其中a为varchar类型的字符串。</p>
<p>例4</p>
<p>在SQL Server中，下面的代码演示了datetime变量中，仅包含单纯的日期和单纯的时间时，日期存储的十六进制存储表示结果。</p>
<p><pre class="brush: php;">DECLARE @dt datetime</pre></p>
<p>–单纯的日期<br>SET @dt=’1900-1-2’<br>SELECT CAST(@dt as binary(8))<br>–结果: 0x0000000100000000</p>
<p>–单纯的时间<br>SET @dt=’00:00:01’<br>SELECT CAST(@dt as binary(8))<br>–结果: 0x000000000000012C<br><br>MySQL的类型转换和SQL Server一样，就是类型参数有点点不同：CAST(xxx AS 类型) , CONVERT(xxx,类型)。</p>
]]></content>
      
        <categories>
            
            <category> 数据库开发 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[提高sql查询效率的30个技巧]]></title>
      <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91/201711/tips-of-improve-sql-select-speed-08.html</url>
      <content type="html"><![CDATA[<p>1.对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</p>
<p>2.应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：<br>select id from t where num is null<br>可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：<br>select id from t where num=0</p>
<p>3.应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。</p>
<p>4.应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：<br>select id from t where num=10 or num=20<br>可以这样查询：<br>select id from t where num=10<br>union all<br>select id from t where num=20</p>
<p>5.in 和 not in 也要慎用，否则会导致全表扫描，如：<br>select id from t where num in(1,2,3)<br>对于连续的数值，能用 between 就不要用 in 了：<br>select id from t where num between 1 and 3</p>
<p>6.下面的查询也将导致全表扫描：<br>select id from t where name like ‘%abc%’<br>若要提高效率，可以考虑全文检索。</p>
<p>7. 如果在 where 子句中使用参数，也会导致全表扫描。因为SQL只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然 而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描：<br>select id from t where num=@num<br>可以改为强制查询使用索引：<br>select id from t with(index(索引名)) where num=@num</p>
<p>8.应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：<br>select id from t where num/2=100<br>应改为:<br>select id from t where num=100*2</p>
<p>9.应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：<br>select id from t where substring(name,1,3)=’abc’–name以abc开头的id<br>select id from t where datediff(day,createdate,’2005-11-30’)=0–‘2005-11-30’生成的id<br>应改为:<br>select id from t where name like ‘abc%’<br>select id from t where createdate&gt;=’2005-11-30’ and createdate&lt;’2005-12-1’</p>
<p>10.不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。</p>
<p>11.在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。</p>
<p>12.不要写一些没有意义的查询，如需要生成一个空表结构：<br>select col1,col2 into #t from t where 1=0<br>这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：<br>create table #t(…)</p>
<p>13.很多时候用 exists 代替 in 是一个好的选择：<br>select num from a where num in(select num from b)<br>用下面的语句替换：<br>select num from a where exists(select 1 from b where num=a.num)</p>
<p>14.并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。</p>
<p>15. 索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要。</p>
<p>16.应尽可能的避免更新 clustered 索引数据列，因为 clustered 索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新 clustered 索引数据列，那么需要考虑是否应将该索引建为 clustered 索引。</p>
<p>17.尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。</p>
<p>18.尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</p>
<p>19.任何地方都不要使用 select <em> from t ，用具体的字段列表代替“</em>”，不要返回用不到的任何字段。</p>
<p>20.尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。</p>
<p>21.避免频繁创建和删除临时表，以减少系统表资源的消耗。</p>
<p>22.临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。</p>
<p>23.在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。</p>
<p>24.如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。</p>
<p>25.尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。</p>
<p>26.使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。</p>
<p>27. 与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时 间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。</p>
<p>28.在所有的存储过程和触发器的开始处设置 SET NOCOUNT ON ，在结束时设置 SET NOCOUNT OFF 。无需在执行存储过程和触发器的每个语句后向客户端发送 DONE_IN_PROC 消息。</p>
<p>29.尽量避免大事务操作，提高系统并发能力。</p>
<p>30.尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理</p>
]]></content>
      
        <categories>
            
            <category> 数据库开发 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[根据地图的坐标计算出两点之间的距离 java]]></title>
      <url>/JAVA%E5%BC%80%E5%8F%91/201711/lnglat-java-05.html</url>
      <content type="html"><![CDATA[<p>&nbsp;</p>
<p><pre class="font:sourcecodepro lang:java decode:true  ">public class Distribution<br>{<br>    // 经度<br>    double longitude;<br>    // 维度<br>    double dimensionality;<br>    public double getLongitude()<br>    {<br>        return longitude;<br>    }<br>    public void setLongitude(double longitude)<br>    {<br>        this.longitude = longitude;<br>    }<br>    public double getDimensionality()<br>    {<br>        return dimensionality;<br>    }<br>    public void setDimensionality(double dimensionality)<br>    {<br>        this.dimensionality = dimensionality;<br>    }<br>    /*</pre></p>
<pre><code> * 计算两点之间距离
 * 
 * @param start
 * 
 * @param end
 * 
 * @return 米
 */
public double getDistance(Distribution start, Distribution end)
{
    double lon1 = (Math.PI / 180) * start.longitude;
    double lon2 = (Math.PI / 180) * end.longitude;
    double lat1 = (Math.PI / 180) * start.dimensionality;
    double lat2 = (Math.PI / 180) * end.dimensionality;
    // double Lat1r = (Math.PI/180)*(gp1.getLatitudeE6()/1E6);
    // double Lat2r = (Math.PI/180)*(gp2.getLatitudeE6()/1E6);
    // double Lon1r = (Math.PI/180)*(gp1.getLongitudeE6()/1E6);
    // double Lon2r = (Math.PI/180)*(gp2.getLongitudeE6()/1E6);
    // 地球半径
    double R = 6371;
    // 两点间距离 km，如果想要米的话，结果*1000就可以了
    double d = Math.acos(Math.sin(lat1) * Math.sin(lat2) + Math.cos(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1)) * R;
    return d * 1000;
}
</code></pre><p>}<br><br>&nbsp;</p>
]]></content>
      
        <categories>
            
            <category> JAVA开发 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[【转】利用java、js或mysql计算高德地图中两坐标之间的距离]]></title>
      <url>/JavaScript/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91/201711/java-js-mysql-lnglat-calculate-01.html</url>
      <content type="html"><![CDATA[<div id="magicdomid6" class="ace-line gutter-author-p-1375536 emptyGutter"><span class="author-p-1375536 color:rgb(102, 102, 102) font-size:14px"> 最近在做与地图相关的应用，使用了高德地图，研究了下高德地图计算两坐标距离的方法，官网上提供的开发包中有相关的方法，但是我的产品中比较特殊，无法直接使用提供的方法，所以就自己封装了相关计算方法，供大家参考，下面话不多说了，来一起看看详细的介绍吧。</span></div><br><div id="magicdomid7" class="ace-line gutter-author-p-1375536 emptyGutter"><span class="author-p-1375536 bold:true color:rgb(255, 0, 0) font-size:14px">Java实现</span></div><br><div id="magicdomid8" class="ace-line gutter-author-p-1375536 emptyGutter"><span class="author-p-1375536 color:rgb(102, 102, 102) font-size:14px">首先定义一个用于存储经纬度的类，这里起个名字叫：LngLat</span></div><br><div id="magicdomid9" class="ace-line longKeep gutter-noauthor"></div><br><div id="magicdomid10" class="ace-line gutter-author-p-1375536 line-list-type-code emptyGutter"><br><pre class="prettyprint lang-java">package amap;<br>import java.text.DecimalFormat;<br>import java.text.DecimalFormatSymbols;<br>import java.util.Locale;<br>/<strong><br><em> 存储经纬度坐标值的类，单位角度
</em><br><em> @author jianggujin
</em><br>*/<br>public final class LngLat implements Cloneable<br>{<br>/</strong><br><em> 纬度 (垂直方向)
</em>/<br>public final double latitude;<br>/<strong><br><em> 经度 (水平方向)
</em>/<br>public final double longitude;<br>/</strong><br><em> 格式
</em>/<br>private static DecimalFormat format = new DecimalFormat(“0.000000”, new DecimalFormatSymbols(Locale.US));<br>/<strong><br><em> 使用传入的经纬度构造LatLng 对象，一对经纬度值代表地球上一个地点。
</em><br><em> @param longitude
</em>  地点的经度，在-180 与180 之间的double 型数值。<br><em> @param latitude
</em>  地点的纬度，在-90 与90 之间的double 型数值。<br>*/<br>public LngLat(double longitude, double latitude)<br>{<br>this(longitude, latitude, true);<br>}<br>/</strong><br><em> 使用传入的经纬度构造LatLng 对象，一对经纬度值代表地球上一个地点
</em><br><em> @param longitude
</em>  地点的经度，在-180 与180 之间的double 型数值。<br><em>
</em> @param latitude<br><em>  地点的纬度，在-90 与90 之间的double 型数值。
</em> @param isCheck<br><em>  是否需要检查经纬度的合理性，建议填写true
</em>/<br>public LngLat(double longitude, double latitude, boolean isCheck)<br>{<br>if (isCheck)<br>{<br>if ((-180.0D &lt;= longitude) &amp;&amp; (longitude &lt; 180.0D))<br>this.longitude = parse(longitude);<br>else<br>{<br>throw new IllegalArgumentException(“the longitude range [-180, 180].”);<br>// this.longitude = parse(((longitude - 180.0D) % 360.0D + 360.0D) %<br>// 360.0D - 180.0D);<br>}<br>if ((latitude &lt; -90.0D) || (latitude &gt; 90.0D))<br>{<br>throw new IllegalArgumentException(“the latitude range [-90, 90].”);<br>}<br>this.latitude = latitude;<br>// this.latitude = parse(Math.max(-90.0D, Math.min(90.0D, latitude)));<br>}<br>else<br>{<br>this.latitude = latitude;<br>this.longitude = longitude;<br>}<br>}<br>/<strong><br><em> 解析
</em><br><em> @param d
</em> @return<br><em>/<br>private static double parse(double d)<br>{<br>return Double.parseDouble(format.format(d));<br>}<br>public LngLat clone()<br>{<br>return new LngLat(this.latitude, this.longitude);<br>}<br>@Override<br>public int hashCode()<br>{<br>final int prime = 31;<br>int result = 1;<br>long temp;<br>temp = Double.doubleToLongBits(latitude);<br>result = prime </em> result + (int) (temp ^ (temp &gt;&gt;&gt; 32));<br>temp = Double.doubleToLongBits(longitude);<br>result = prime * result + (int) (temp ^ (temp &gt;&gt;&gt; 32));<br>return result;<br>}<br>@Override<br>public boolean equals(Object obj)<br>{<br>if (this == obj)<br>return true;<br>if (obj == null)<br>return false;<br>if (getClass() != obj.getClass())<br>return false;<br>LngLat other = (LngLat) obj;<br>if (Double.doubleToLongBits(latitude) != Double.doubleToLongBits(other.latitude))<br>return false;<br>if (Double.doubleToLongBits(longitude) != Double.doubleToLongBits(other.longitude))<br>return false;<br>return true;<br>}<br>public String toString()<br>{<br>return “lat/lng: (“ + this.latitude + “,” + this.longitude + “)”;<br>}<br>}</strong></pre><br>&nbsp;<br><br></div><br><div id="magicdomid139" class="ace-line gutter-author-p-1375536 emptyGutter"><span class="author-p-1375536 color:rgb(102, 102, 102) font-size:14px">计算工具类如下：</span></div><br><div id="magicdomid140" class="ace-line longKeep gutter-noauthor"></div><br>&nbsp;<br><pre class="prettyprint lang-java">package amap;<br>/<br><em> 高德地图工具
</em><br><em> @author jianggujin
</em><br><em>/<br>public class AMapUtils<br>{<br>/**
</em> 根据用户的起点和终点经纬度计算两点间距离，此距离为相对较短的距离，单位米。<br><em>
</em> @param start<br><em>  起点的坐标
</em> @param end<br><em>  终点的坐标
</em> @return<br><em>/<br>public static double calculateLineDistance(LngLat start, LngLat end)<br>{<br>if ((start == null) || (end == null))<br>{<br>throw new IllegalArgumentException(“非法坐标值，不能为null”);<br>}<br>double d1 = 0.01745329251994329D;<br>double d2 = start.longitude;<br>double d3 = start.latitude;<br>double d4 = end.longitude;<br>double d5 = end.latitude;<br>d2 </em>= d1;<br>d3 <em>= d1;<br>d4 </em>= d1;<br>d5 <em>= d1;<br>double d6 = Math.sin(d2);<br>double d7 = Math.sin(d3);<br>double d8 = Math.cos(d2);<br>double d9 = Math.cos(d3);<br>double d10 = Math.sin(d4);<br>double d11 = Math.sin(d5);<br>double d12 = Math.cos(d4);<br>double d13 = Math.cos(d5);<br>double[] arrayOfDouble1 = new double[3];<br>double[] arrayOfDouble2 = new double[3];<br>arrayOfDouble1[0] = (d9 </em> d8);<br>arrayOfDouble1[1] = (d9 <em> d6);<br>arrayOfDouble1[2] = d7;<br>arrayOfDouble2[0] = (d13 </em> d12);<br>arrayOfDouble2[1] = (d13 <em> d10);<br>arrayOfDouble2[2] = d11;<br>double d14 = Math.sqrt((arrayOfDouble1[0] - arrayOfDouble2[0]) </em> (arrayOfDouble1[0] - arrayOfDouble2[0])<br>+ (arrayOfDouble1[1] - arrayOfDouble2[1]) <em> (arrayOfDouble1[1] - arrayOfDouble2[1])<br>+ (arrayOfDouble1[2] - arrayOfDouble2[2]) </em> (arrayOfDouble1[2] - arrayOfDouble2[2]));<br>return (Math.asin(d14 / 2.0D) <em> 12742001.579854401D);<br>}<br>}</em></pre><br>&nbsp;<br><br>&nbsp;<br><div id="magicdomid198" class="ace-line gutter-author-p-1375536 emptyGutter"><span class="author-p-1375536 color:rgb(102, 102, 102) font-size:14px">最后边写一段测试代码测试一下：</span></div><br><div id="magicdomid199" class="ace-line longKeep gutter-noauthor"></div><br><div id="magicdomid200" class="ace-line gutter-author-p-1375536 line-list-type-code emptyGutter"><br><pre class="prettyprint lang-java">package test;<br>import org.junit.Test;<br>import amap.AMapUtils;<br>import amap.LngLat;<br>public class AMapTest<br>{<br>@Test<br>public void Test()<br>{<br>LngLat start = new LngLat(116.368904, 39.923423);<br>LngLat end = new LngLat(116.387271, 39.922501);<br>System.err.println(AMapUtils.calculateLineDistance(start, end));<br>}<br>}</pre><br>&nbsp;<br><br></div><br><div id="magicdomid217" class="ace-line gutter-author-p-1375536 emptyGutter"><span class="author-p-1375536 color:rgb(102, 102, 102) font-size:14px">运行结果为：1569.6213922679392，官网的javascript API示例结果如图：</span></div><br><div id="magicdomid218" class="ace-line gutter-author-p-1375536 emptyGutter"></div><br><div id="magicdomid219" class="ace-line gutter-author-p-1375536 emptyGutter"><span class="author-p-1375536 color:rgb(102, 102, 102) font-size:14px">结果虽然有一点误差，但是这hi在可接受范围内的。</span></div><br><div id="magicdomid220" class="ace-line gutter-author-p-1375536 emptyGutter"><span class="author-p-1375536 bold:true color:rgb(255, 0, 0) font-size:14px">Javascript实现</span></div><br><div id="magicdomid221" class="ace-line gutter-author-p-1375536 emptyGutter"><span class="author-p-1375536 color:rgb(102, 102, 102) font-size:14px">同样的算法，将其转换成JS的写法，完整的代码如下：</span></div><br><div id="magicdomid222" class="ace-line longKeep gutter-noauthor"></div><br><div id="magicdomid223" class="ace-line gutter-author-p-1375536 line-list-type-code emptyGutter"><br><pre class="prettyprint lang-html">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=”utf-8” /&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;script type=”text/javascript” src=”js/ajax.js”&gt;&lt;/script&gt;<br>&lt;script&gt;<br>/**
 存储经纬度<br><em> @param {Object} longitude
</em> @param {Object} latitude<br><em>/<br>function LngLat(longitude, latitude) {<br>this.longitude = longitude;<br>this.latitude = latitude;<br>}<br>function calculateLineDistance(start, end) {<br>var d1 = 0.01745329251994329;<br>var d2 = start.longitude;<br>var d3 = start.latitude;<br>var d4 = end.longitude;<br>var d5 = end.latitude;<br>d2 </em>= d1;<br>d3 <em>= d1;<br>d4 </em>= d1;<br>d5 <em>= d1;<br>var d6 = Math.sin(d2);<br>var d7 = Math.sin(d3);<br>var d8 = Math.cos(d2);<br>var d9 = Math.cos(d3);<br>var d10 = Math.sin(d4);<br>var d11 = Math.sin(d5);<br>var d12 = Math.cos(d4);<br>var d13 = Math.cos(d5);<br>var arrayOfDouble1 = [];<br>var arrayOfDouble2 = [];<br>arrayOfDouble1.push(d9 </em> d8);<br>arrayOfDouble1.push(d9 <em> d6);<br>arrayOfDouble1.push(d7);<br>arrayOfDouble2.push(d13 </em> d12);<br>arrayOfDouble2.push(d13 <em> d10);<br>arrayOfDouble2.push(d11);<br>var d14 = Math.sqrt((arrayOfDouble1[0] - arrayOfDouble2[0]) </em> (arrayOfDouble1[0] - arrayOfDouble2[0]) +<br>(arrayOfDouble1[1] - arrayOfDouble2[1]) <em> (arrayOfDouble1[1] - arrayOfDouble2[1]) +<br>(arrayOfDouble1[2] - arrayOfDouble2[2]) </em> (arrayOfDouble1[2] - arrayOfDouble2[2]));<br>return(Math.asin(d14 / 2.0) <em> 12742001.579854401);<br>}<br>var start = new LngLat(116.368904, 39.923423);<br>var end = new LngLat(116.387271, 39.922501);<br>&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;script&gt;<br>document.write(calculateLineDistance(start, end));<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</em></pre><br>&nbsp;<br><br></div><br><div id="magicdomid284" class="ace-line gutter-author-p-1375536 line-list-type-code emptyGutter"></div><br><div id="magicdomid285" class="ace-line gutter-author-p-1375536 emptyGutter"><span class="author-p-1375536 bold:true color:rgb(255, 0, 0) font-size:14px">MySQL实现</span></div><br><div id="magicdomid286" class="ace-line longKeep gutter-noauthor"></div><br><div id="magicdomid287" class="ace-line gutter-author-p-1375536 line-list-type-code emptyGutter"><br><pre class="prettyprint">DELIMITER $$<br>CREATE FUNCTION <code>calculateLineDistance</code>(startLng double, startLat double, endLng double, endLat double) RETURNS double<br>BEGIN<br>declare d2 DOUBLE;<br>declare d3 DOUBLE;<br>declare d4 DOUBLE;<br>declare d5 DOUBLE;<br>declare d6 DOUBLE;<br>declare d7 DOUBLE;<br>declare d8 DOUBLE;<br>declare d9 DOUBLE;<br>declare d10 DOUBLE;<br>declare d11 DOUBLE;<br>declare d12 DOUBLE;<br>declare d13 DOUBLE;<br>declare d14 DOUBLE;<br>declare arrayOfDouble10 DOUBLE;<br>declare arrayOfDouble11 DOUBLE;<br>declare arrayOfDouble12 DOUBLe;<br>declare arrayOfDouble20 DOUBLE;<br>declare arrayOfDouble21 DOUBLE;<br>declare arrayOfDouble22 DOUBLE;<br>set d2 = startLng  0.01745329251994329;<br>set d3 = startLat <em> 0.01745329251994329;<br>set d4 = endLng </em> 0.01745329251994329;<br>set d5 = endLat <em> 0.01745329251994329;<br>set d6 = sin(d2);<br>set d7 = sin(d3);<br>set d8 = cos(d2);<br>set d9 = cos(d3);<br>set d10 = sin(d4);<br>set d11 = sin(d5);<br>set d12 = cos(d4);<br>set d13 = cos(d5);<br>set arrayOfDouble10 = (d9 </em> d8);<br>set arrayOfDouble11 = (d9 <em> d6);<br>set arrayOfDouble12 = d7;<br>set arrayOfDouble20 = (d13 </em> d12);<br>set arrayOfDouble21 = (d13 <em> d10);<br>set arrayOfDouble22 = d11;<br>set d14 = sqrt((arrayOfDouble10 - arrayOfDouble20) </em> (arrayOfDouble10 - arrayOfDouble20)<br>+ (arrayOfDouble11 - arrayOfDouble21) <em> (arrayOfDouble11 - arrayOfDouble21)<br>+ (arrayOfDouble12 - arrayOfDouble22) </em> (arrayOfDouble12 - arrayOfDouble22));<br>return (asin(d14 / 2.0) * 12742001.579854401);<br>END $$<br>DELIMITER ;</pre><br>&nbsp;<br><br></div><br><div id="magicdomid333" class="ace-line longKeep gutter-noauthor"></div>]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
            <category> 数据库开发 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[什么是UNPHAT原则]]></title>
      <url>/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/201710/unphat-29.html</url>
      <content type="html"><![CDATA[<p>最近在看技术文章时发现最近比较热的一个技术原则 UNPHAT , 所谓的UNPHAT原则即是下面的这个6条的字母组合：</p>
<ol>
<li>在彻底了解（Understand）你的问题之前，不要急着去寻找解决方案。你的目标应该是在问题领域内“解决”问题，而不是在方案领域内解决问题。</li>
<li>列出（eNumerate）多种方案，不要只把眼睛盯在你最喜欢的方案上。</li>
<li>选择一个候选方案，并阅读相关论文（Paper）。</li>
<li>了解候选方案的产生背景（Historical context）。</li>
<li>比较优点（Advantages）和缺点，扬长避短。</li>
<li>思考（Think）！冷静地思考候选方案是否适合用于解决你的问题。要出现怎样异常的情况才会让你改变注意？例如，数据要少到什么程度才会让你打消使用Hadoop的念头？</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 编程开发 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[[转载]You Are Not Google]]></title>
      <url>/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/201710/you-are-not-google-29.html</url>
      <content type="html"><![CDATA[<p>Software engineers go crazy for the most ridiculous things. We like to think that we’re hyper-rational, but when we have to choose a technology, we end up in a kind of frenzy — bouncing from one person’s Hacker News comment to another’s blog post until, in a stupor, we float helplessly toward the brightest light and lay prone in front of it, oblivious to what we were looking for in the first place.</p>
<p>This is not how rational people make decisions, but it <em>is</em> how software engineers decide to use MapReduce.</p>
<p>As Joe Hellerstein sideranted to <a href="https://archive.org/details/ucberkeley_webcast_NSKvCVFmk2E" target="_blank" rel="noopener">his undergrad databases class</a> (54 min in):</p>
<blockquote>
<p>The thing is there’s like 5 companies in the world that run jobs that big. For everybody else… you’re doing all this I/O for fault tolerance that you didn’t really need. People got kinda Google mania in the 2000s: “we’ll do everything the way Google does because we also run the world’s largest internet data service” [tilts head sideways and waits for laughter]</p>
<p><figure id="3245" class="graf graf--figure graf-after--blockquote"></figure></p>
<p><div class="aspectRatioPlaceholder is-locked"></div></p>
<p><div class="aspectRatioPlaceholder-fill"></div><br><img src="https://cdn-images-1.medium.com/max/800/1*9ngayPVvoHBf5Le7Uqw1dA.jpeg" alt=""></p>
</blockquote>
<p></p>
<p><figcaption class="imageCaption">How many stories are your data center buildings? Google chose to stop at 4, for this one in Mayes County, Oklahoma.</figcaption></p>
<p>Having more fault tolerance than you need might sound fine, but consider the cost: not only would you be doing much more I/O, you might be switching from a mature system—with stuff like transactions, indexes, and query optimizers—to something relatively threadbare. What a <a href="https://homes.cs.washington.edu/~billhowe/mapreduce_a_major_step_backwards.html" target="_blank" rel="noopener">major step backwards</a>. How many Hadoop users make these tradeoffs consciously? How many of those users make these tradeoffs wisely?</p>
<p>MapReduce/Hadoop is a soft target at this point because even the cargo culters have realized that the planes ain’t en route. But the same observation can be made more broadly: if you’re using a technology that originated at a large company, but your use case is very different, it’s unlikely that you arrived there deliberately; no, it’s more likely you got there through a ritualistic belief that imitating the giants would bring the same riches.</p>
<figure id="2e40" class="graf graf--figure graf-after--p"><br><div class="aspectRatioPlaceholder is-locked"><br><div class="aspectRatioPlaceholder-fill"></div><br><img src="https://cdn-images-1.medium.com/max/800/1*eOGYrIsn8jRwY9Q6IMjLBQ.jpeg" alt=""><br><br></div></figure>

<p>Ok, so yes: this is another “don’t cargo cult” article. But wait! I have a helpful checklist for you, one you can use to make better decisions.</p>
<h4 id="Cool-Tech-UNPHAT"><a href="#Cool-Tech-UNPHAT" class="headerlink" title="Cool Tech? UNPHAT."></a>Cool Tech? UNPHAT.</h4><p>Next time you find yourself Googling some cool new technology to (re)build your architecture around, I urge you to stop and follow <strong>UNPHAT</strong> instead:</p>
<ol>
<li>Don’t even start considering solutions until you <strong>Understand</strong> the problem. Your goal should be to “solve” the problem mostly within the<em>problem</em> domain, not the solution domain.</li>
<li><strong>eNumerate </strong>multiple candidate solutions. Don’t just start prodding at your favorite!</li>
<li>Consider a candidate solution, then read the<strong> Paper</strong> if there is one.</li>
<li>Determine the<strong> Historical context</strong> in which the candidate solution was designed or developed.</li>
<li>Weigh <strong>Advantages</strong> against disadvantages. <em>Determine what was de-prioritized</em> to achieve what _was _prioritized.</li>
<li><strong>Think!</strong> Soberly and humbly ponder how well this solution fits your problem. _What fact would need to be different for you to change your mind? _For instance, how much smaller would the data need to be before you’d elect <em>not</em> to use Hadoop?</li>
</ol>
<h4 id="You-Are-Also-Not-Amazon"><a href="#You-Are-Also-Not-Amazon" class="headerlink" title="You Are Also Not Amazon"></a>You Are Also Not Amazon</h4><p>It’s pretty straightforward to apply UNPHAT. Consider my recent conversation with a company that briefly considered using Cassandra for a read-heavy workflow over data that was loaded in nightly:</p>
<p>Having read the Dynamo paper, and knowing Cassandra to be a close derivative, I understood that these distributed databases prioritize <em>write availability</em> (Amazon wanted the “add to cart” action to never fail). I also appreciated that they did this by compromising consistency, as well as basically every feature present in a traditional RDBMS. But the company I was speaking with _did not _need to prioritize write availability since the access pattern called for one big write per day.</p>
<figure id="66e7" class="graf graf--figure graf-after--p"><br><div class="aspectRatioPlaceholder is-locked"><br><div class="aspectRatioPlaceholder-fill"></div><br><img src="https://cdn-images-1.medium.com/max/800/1*2c9zLYMMHf0SMJRCs2rtUg.jpeg" alt=""><br><br></div><br><figcaption class="imageCaption">Amazon sells a lot of stuff. If “add to cart” occasionally failed, they would lose a lot of money. Is your use case the same?</figcaption></figure>

<p>This company considered Cassandra because the PostgreSQL query in question was taking minutes, which they figured was a hardware limitation. After a few questions, we determined that the table was around 50 million rows and 80 bytes wide, so would take around 5 seconds to to be read in its entirety off SSD, if a full FileScan were needed. That’s slow, but it’s 2 orders of magnitudes faster than the actual query.</p>
<p>At this point, I really wanted to ask more questions (understand the problem!) and had started weighing up about 5 strategies for when the problem grew (enumerate multiple candidate solutions!), but it was already pretty clear that Cassandra would have been the wrong solution entirely. All they needed was some patient tuning, perhaps re-modeling some of the data, <em>maybe</em> (but probably not) another technology choice… but certainly not the high-write availability key value store that Amazon created for its shopping cart!</p>
<h4 id="Furthermore-You-Are-Not-LinkedIn"><a href="#Furthermore-You-Are-Not-LinkedIn" class="headerlink" title="Furthermore, You Are Not LinkedIn"></a>Furthermore, You Are Not LinkedIn</h4><p>I was surprised to discover that one student’s company had chosen to architect their system around Kafka. This was surprising because, as far as I could tell, their business processed just a few dozen very high value transactions per day—perhaps a few hundred on a good day. <span class="markup--quote markup--p-quote is-other" data-creator-ids="anon"><em>At this throughput, the primary datastore could be a human writing into a physical book.</em></span></p>
<p>In comparison, Kafka was designed to handle the throughput of all the analytics events at LinkedIn: a monumental number. Even a couple of years ago, this amounted to <a href="https://engineering.linkedin.com/kafka/running-kafka-scale" target="_blank" rel="noopener">around 1 trillion events per day, with peaks of over 10 million messages per second</a>. I understand that Kafka is still useful for lower throughput workloads, but 10 orders of magnitude lower?</p>
<figure id="017e" class="graf graf--figure graf-after--p"><br><div class="aspectRatioPlaceholder is-locked"><br><div class="aspectRatioPlaceholder-fill"></div><br><img src="https://cdn-images-1.medium.com/max/800/1*58fByP3ysdAKFlbH_KAWRQ.jpeg" alt=""><br><br></div><br><figcaption class="imageCaption">The sun, while massive, is only 6 orders of magnitude larger than earth.</figcaption></figure>

<p>Perhaps the engineers really <em>did</em> make an informed decision based on their expected needs and a good understanding of the rationale of Kafka. But my guess is that they fed off the community’s (generally justifiable) enthusiasm around Kafka and put little thought into whether it was the right fit for the job. I mean… 10 orders of magnitude!</p>
<h4 id="You-Are-Not-Amazon-Again"><a href="#You-Are-Not-Amazon-Again" class="headerlink" title="You Are Not Amazon, Again"></a>You Are Not Amazon, Again</h4><p>More popular than Amazon’s distributed datastore is the architectural pattern they credit with enabling them to scale: service-oriented architecture. As Werner Vogels pointed out in <a href="https://queue.acm.org/detail.cfm?id=1142065" target="_blank" rel="noopener">this 2006 interview by Jim Gray</a>, Amazon realized in 2001 that they were struggling to scale their front end, and that a service-oriented architecture ended up helping. This sentiment reverberated from one engineer to another, until startups with just a few engineers and barely any users started splintering their brochureware app into nanoservices.</p>
<p>But by the time Amazon decided to move to SOA, <a href="http://media.corporate-ir.net/media_files/irol/97/97664/reports/2001annualreport.pdf" target="_blank" rel="noopener">they had around 7,800 employees and did over $3 billion in sales</a>.</p>
<figure id="d474" class="graf graf--figure graf-after--p"><br><div class="aspectRatioPlaceholder is-locked"><br><div class="aspectRatioPlaceholder-fill"></div><br><img src="https://cdn-images-1.medium.com/max/800/1*Y0LRyBrgv4U7NAgy3fLhlA.jpeg" alt=""><br><br></div><br><figcaption class="imageCaption">The Bill Graham Auditorium in San Francisco has capacity for 7,000 people. Amazon had around 7,800 employees when it moved to SOA.</figcaption></figure>

<p>That’s not to say you should hold off on SOA until you reach the 7,800 employee mark… just, <em>think</em> <em>for yourself</em>. Is it the best solution to your problem? What is your problem exactly, and what are other ways you could solve it?</p>
<p>If you tell me that your 50-person engineering organization would grind to a halt without SOA, I’m going to wonder why so many larger companies do just fine with a large but well-organized single application.</p>
<h4 id="Even-Google-Is-Not-Google"><a href="#Even-Google-Is-Not-Google" class="headerlink" title="Even Google Is Not Google"></a>Even Google Is Not Google</h4><p>Use of large scale dataflow engines like Hadoop and Spark can be particularly funny: very often a traditional DBMS is better suited to the workload, and sometimes the volume of data is so small that it could even fit_in memory. _Did you know you can buy a terabyte of RAM for around $10,000? Even if you had a billion users, this would give you 1kB _of RAM_per user to work with.</p>
<p>Perhaps this isn’t enough for your workload, and you will need to read and write back to disk. But do you need to read and write back to literally thousands of disks? How much data do you have exactly? GFS and MapReduce were created to deal with the problem of computing over <em>the entire web</em>, such as… rebuilding a search index over <em>the entire web</em>.</p>
<figure id="4f43" class="graf graf--figure graf-after--p"><br><div class="aspectRatioPlaceholder is-locked"><br><div class="aspectRatioPlaceholder-fill"></div><br><img src="https://cdn-images-1.medium.com/max/800/1*IIXjS60xq8fQOT_7IsbrQA.jpeg" alt=""><br><br></div><br><figcaption class="imageCaption">Hard drives prices are now much lower than they were in 2003, the year the GFS paper was published.</figcaption></figure>

<p>Perhaps you have read the GFS and MapReduce papers and appreciate that part of the problem for Google wasn’t capacity but throughput: they distributed storage because it was taking too long to stream bytes off disk. But what’s the throughput of the devices you’ll be using in 2017? Considering that you won’t need nearly as many of them as Google did, can you just buy better ones? What would it cost you to use SSDs?</p>
<p>Maybe you expect to scale. But have you done the math? Are you likely to accumulate data faster than the rate at which SSD prices will go down? How much would your business need to grow before all your data would no longer fit on one machine? As of 2016, Stack Exchange served 200 million requests per day, <a href="https://nickcraver.com/blog/2016/02/17/stack-overflow-the-architecture-2016-edition/" target="_blank" rel="noopener">backed by just four SQL servers</a>: a primary for Stack Overflow, a primary for everything else, and two replicas.</p>
<p>Again, you may go through a process like UNPHAT and still decide to use Hadoop or Spark. The decision may even be the right one. What’s important is that you <em>actually use the right tool for the job</em>. Google knows this well: once they decided that MapReduce wasn’t the right tool for building the index, they stopped using it.</p>
<h4 id="First-Understand-the-Problem"><a href="#First-Understand-the-Problem" class="headerlink" title="First, Understand the Problem"></a>First, Understand the Problem</h4><p>My message isn’t new, but maybe it’s the version that speaks to you, or maybe UNPHAT is memorable enough for you to apply it. If not, you might try Rich Hickey’s talk <a href="https://www.youtube.com/watch?v=f84n5oFoZBc" target="_blank" rel="noopener">Hammock Driven Development</a>, or the Polya book<a href="https://www.amazon.com/How-Solve-Mathematical-Princeton-Science/dp/069111966X" target="_blank" rel="noopener"><em>How to Solve It</em></a>, or Hamming’s course <a href="https://www.youtube.com/playlist?list=PL2FF649D0C4407B30" target="_blank" rel="noopener"><em>The Art of Doing Science and Engineering</em></a>. What we’re all imploring you to do is to <strong>think</strong>! And to actually understand the problem you are trying to solve. In Polya’s galvanic words:</p>
<blockquote>
<p>It is foolish to answer a question that you do not understand. It is sad to work for an end that you do not desire.</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 编程开发 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[2017最新全国 省市县/区 街道/乡镇 社区/村 5级联动 mysql数据库 71.3万条]]></title>
      <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91/201706/mysql-region-5-24.html</url>
      <content type="html"><![CDATA[<p>2017最新全国 省市县/区 街道/乡镇 社区/村 5级联动 mysql数据库 71.3万条</p>
<p>&nbsp;</p>
<p>注释: 全国省市区/县 乡镇/街道 村/社区 5级联动数据库</p>
<table cellspacing="0"><br><thead><br><tr><br><th>列</th><br><td>类型</td><br><td>注释</td><br></tr><br></thead><br><tbody><br><tr><br><th>region_id</th><br><td><span title="">bigint(12) unsigned</span></td><br><td>地区ID</td><br></tr><br><tr class="odd"><br><th>parent_id</th><br><td><span title="">bigint(12) unsigned</span></td><br><td>父级地区ID</td><br></tr><br><tr><br><th>region_name</th><br><td><span title="utf8_general_ci">varchar(50)</span></td><br><td>地区名称</td><br></tr><br><tr class="odd"><br><th>merge_name</th><br><td><span title="utf8_general_ci">varchar(200)</span></td><br><td>合并名称</td><br></tr><br><tr><br><th>level</th><br><td><span title="">tinyint(1) unsigned</span> <span title="Default value">[<strong>0</strong>]</span></td><br><td>地区类型 级别 1 省; 2 市; 3 区/县 ; 4 乡镇/街道; 5 村/社区</td><br></tr><br><tr class="odd"><br><th>class_code</th><br><td><span title="">int(3) unsigned</span> <em>NULL</em></td><br><td>城乡分类代码 村/社区级别</td><br></tr><br><tr><br><th>is_show</th><br><td><span title="utf8_general_ci">enum(‘0’,’1’)</span> <em>NULL</em> <span title="Default value">[<strong>1</strong>]</span></td><br><td>是否显示 1 显示 0 不显示</td><br></tr><br></tbody><br></table>

<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p><table cellspacing="0"></table></p>
<p><tbody></tbody></p>
<p><tr title="PRIMARY"></tr></p>
<p><th>PRIMARY</th></p>
<p><td>_region<em>id</em></td><br></p>
<p><tr title="region_id"></tr></p>
<p><th>UNIQUE</th></p>
<p><td>_region<em>id</em></td><br></p>
<p><tr title="parent_id"></tr></p>
<p><th>INDEX</th></p>
<p><td>_parent<em>id</em></td><br></p>
<p><tr title="merge_name"></tr></p>
<p><th>FULLTEXT</th></p>
<p><td>_merge<em>name</em></td><br></p>
<p><tr title="region_name"></tr></p>
<p><th>FULLTEXT</th></p>
<p><td>_region<em>name</em></td><br><br><br><br>&nbsp;</p>
<p>原创内容,使用请注明出处,谢谢!</p>
<p><a href="http://blog.chuangxin.biz/wp-content/uploads/2017/06/ynws_region_713031条数据.sql_.gz" target="_blank" rel="noopener">ynws_region_713031条数据.sql</a></p>
]]></content>
      
        <categories>
            
            <category> 数据库开发 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[php如何向一个二维数组里面添加元素]]></title>
      <url>/PHP%E6%8A%80%E6%9C%AF/201706/php-add-items-to-two-dimensional-array-10.html</url>
      <content type="html"><![CDATA[<p>php如何向一个二维数组里面添加元素</p>
<p>$array=array([0]=&gt;array(id=&gt;1,name=&gt;’my name’),[1]=&gt;array([id]=&gt;1,[name]=&gt;’my name’), ……)</p>
<p>如：向$array二维数组里面添加一个元素 test</p>
<p>索引数组</p>
<p><pre class="EnlighterJSRAW" data-enlighter-language="php">for($i=0; $i &lt; count($array); ++$i){$array[$i][‘test’] = ‘test name’;}</pre><br>&nbsp;</p>
<p>下标数组</p>
<p><pre class="EnlighterJSRAW" data-enlighter-language="php">foreach($array as $key =&gt; $val){$array[$key][‘test’] = ‘test name’;}</pre><br>&nbsp;</p>
<p>&nbsp;</p>
]]></content>
      
        <categories>
            
            <category> PHP技术 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker for Windows10 如何配置共享文件夹]]></title>
      <url>/Docker%E6%8A%80%E6%9C%AF/201706/docker-windows10-share-container-07.html</url>
      <content type="html"><![CDATA[<p>Docker for Windows10 如何配置共享文件夹到容器中</p>
<p>第一步: 想在docker的设置中设置共享的drivers[PS: 设置共享前需要先设置windows的用户密码 ]<br><img src="http://r.photo.store.qq.com/psb?/8c300a2f-20cd-4ff4-b8d1-6be36152f829/nY98K1nze2vty*GbZxUC05qfXCcj8pjxCNdysuvyXIA!/o/dIMBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=QAMaAkADGgIDEDU!&amp;su=1181985025&amp;tm=1496844000&amp;sce=0-12-12&amp;rf=2-9" alt="图片"></p>
<p>第二步: Apply保存设置, docker会自动重启,重启后即设置成功,</p>
<p>第三步: 打开powershell就可以直接使用了, 共享的路径为 共享盘的根路径, 比如在D盘根目录有一个文件夹 d:\test ,则映射到容器中的地址为  /D/test</p>
<p>实例:<br>docker run –name tengine -d -it -p 80:80 -v /D/test:/home/wwwroot  tekintian/tengine-php:7.0</p>
]]></content>
      
        <categories>
            
            <category> Docker技术 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP获取IP客户端地址 并验证IP地址正确性]]></title>
      <url>/PHP%E6%8A%80%E6%9C%AF/201705/php-get-ip-address-validate-30.html</url>
      <content type="html"><![CDATA[<p>&nbsp;</p>
<p>&nbsp;</p>
<p><pre class="EnlighterJSRAW" data-enlighter-language="php">/**</pre></p>
<ul>
<li>取得IP<br><em>
</em></li>
<li>@return string 字符串类型的返回结果<br>*/<br>function getIp(){<br>if (@$_SERVER[‘HTTP_CLIENT_IP’] &amp;&amp; $_SERVER[‘HTTP_CLIENT_IP’]!=’unknown’) {<br> $ip = $_SERVER[‘HTTP_CLIENT_IP’];<br>} elseif (@$_SERVER[‘HTTP_X_FORWARDED_FOR’] &amp;&amp; $_SERVER[‘HTTP_X_FORWARDED_FOR’]!=’unknown’) {<br> $ip = $_SERVER[‘HTTP_X_FORWARDED_FOR’];<br>} else {<br> $ip = $_SERVER[‘REMOTE_ADDR’];<br>}<br>return preg_match(‘/^\d[\d.]+\d$/‘, $ip) ? $ip : ‘’;<br>}<br>&nbsp;</li>
</ul>
]]></content>
      
        <categories>
            
            <category> PHP技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 客户端IP </tag>
            
            <tag> IP地址验证 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[php AesCrypter  pkcs7 加解密]]></title>
      <url>/PHP%E6%8A%80%E6%9C%AF/201705/php-aescrypter-pkcs7-encrypt-30.html</url>
      <content type="html"><![CDATA[<p>PHP aes加解密类</p>
<p><pre class="EnlighterJSRAW" data-enlighter-language="php"><br>class AesCrypter {</pre></p>
<pre><code>private $key = &apos;php1234567890&apos;;
private $algorithm;
private $mode;

public function __construct($key = &apos;&apos;, $algorithm = MCRYPT_RIJNDAEL_128,
    $mode = MCRYPT_MODE_CBC) {
    if (!empty($key)) {
        $this-&amp;gt;key = $key;
    }
    $this-&amp;gt;key = hash(&apos;sha256&apos;, $this-&amp;gt;key, true);
    $this-&amp;gt;algorithm = $algorithm;
    $this-&amp;gt;mode = $mode;
}

public function encrypt($orig_data) {
    $encrypter = mcrypt_module_open($this-&amp;gt;algorithm, &apos;&apos;,
        $this-&amp;gt;mode, &apos;&apos;);
    $orig_data = $this-&amp;gt;pkcs7padding(
        $orig_data, mcrypt_enc_get_block_size($encrypter)
    );
    mcrypt_generic_init($encrypter, $this-&amp;gt;key, substr($this-&amp;gt;key, 0, 16));
    $ciphertext = mcrypt_generic($encrypter, $orig_data);
    mcrypt_generic_deinit($encrypter);
    mcrypt_module_close($encrypter);
    return base64_encode($ciphertext);
}

public function decrypt($ciphertext) {
    $encrypter = mcrypt_module_open($this-&amp;gt;algorithm, &apos;&apos;,
        $this-&amp;gt;mode, &apos;&apos;);
    $ciphertext = base64_decode($ciphertext);
    mcrypt_generic_init($encrypter, $this-&amp;gt;key, substr($this-&amp;gt;key, 0, 16));
    $orig_data = mdecrypt_generic($encrypter, $ciphertext);
    mcrypt_generic_deinit($encrypter);
    mcrypt_module_close($encrypter);
    return $this-&amp;gt;pkcs7unPadding($orig_data);
}

public function pkcs7padding($data, $blocksize) {
    $padding = $blocksize - strlen($data) % $blocksize;
    $padding_text = str_repeat(chr($padding), $padding);
    return $data . $padding_text;
}

public function pkcs7unPadding($data) {
    $length = strlen($data);
    $unpadding = ord($data[$length - 1]);
    return substr($data, 0, $length - $unpadding);
}
</code></pre><p>}<br><br>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
]]></content>
      
        <categories>
            
            <category> PHP技术 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP加密解密函数]]></title>
      <url>/PHP%E6%8A%80%E6%9C%AF/201705/php-encrypt-decrypt-30.html</url>
      <content type="html"><![CDATA[<p>PHP加密解密函数</p>
<p>&nbsp;</p>
<p><pre class="EnlighterJSRAW" data-enlighter-language="php">/**</pre></p>
<ul>
<li>加密函数<br>*</li>
<li>@param string $txt 需要加密的字符串</li>
<li>@param string $key 密钥</li>
<li>@return string 返回加密结果<br>*/<br>function encrypt($txt, $key = ‘’){<br>if (empty($txt)) return $txt;<br>if (empty($key)) $key = md5(MD5<em>KEY);<br>$chars = “ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-</em>.”;<br>$ikey =”-x6g6ZWm2G9g_vr0Bo.pOq3kRIxsZ6rm”;<br>$nh1 = rand(0,64);<br>$nh2 = rand(0,64);<br>$nh3 = rand(0,64);<br>$ch1 = $chars{$nh1};<br>$ch2 = $chars{$nh2};<br>$ch3 = $chars{$nh3};<br>$nhnum = $nh1 + $nh2 + $nh3;<br>$knum = 0;$i = 0;<br>while(isset($key{$i})) $knum +=ord($key{$i++});<br>$mdKey = substr(md5(md5(md5($key.$ch1).$ch2.$ikey).$ch3),$nhnum%8,$knum%8 + 16);<br>$txt = base64<em>encode(time().’</em>‘.$txt);<br>$txt = str<em>replace(array(‘+’,’/‘,’=’),array(‘-‘,’</em>‘,’.’),$txt);<br>$tmp = ‘’;<br>$j=0;$k = 0;<br>$tlen = strlen($txt);<br>$klen = strlen($mdKey);<br>for ($i=0; $i&lt;$tlen; $i++) {<br> $k = $k == $klen ? 0 : $k;<br> $j = ($nhnum+strpos($chars,$txt{$i})+ord($mdKey{$k++}))%64;<br> $tmp .= $chars{$j};<br>}<br>$tmplen = strlen($tmp);<br>$tmp = substr_replace($tmp,$ch3,$nh2 % ++$tmplen,0);<br>$tmp = substr_replace($tmp,$ch2,$nh1 % ++$tmplen,0);<br>$tmp = substr_replace($tmp,$ch1,$knum % ++$tmplen,0);<br>return $tmp;<br>}</li>
</ul>
<p>/**</p>
<ul>
<li>解密函数<br>*</li>
<li>@param string $txt 需要解密的字符串</li>
<li>@param string $key 密匙</li>
<li><p>@return string 字符串类型的返回结果<br>*/<br>function decrypt($txt, $key = ‘’, $ttl = 0){<br>if (empty($txt)) return $txt;<br>if (empty($key)) $key = md5(MD5_KEY);</p>
<p>$chars = “ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.”;<br>$ikey =”-x6g6ZWm2G9g_vr0Bo.pOq3kRIxsZ6rm”;<br>$knum = 0;$i = 0;<br>$tlen = @strlen($txt);<br>while(isset($key{$i})) $knum +=ord($key{$i++});<br>$ch1 = @$txt{$knum % $tlen};<br>$nh1 = strpos($chars,$ch1);<br>$txt = @substr_replace($txt,’’,$knum % $tlen–,1);<br>$ch2 = @$txt{$nh1 % $tlen};<br>$nh2 = @strpos($chars,$ch2);<br>$txt = @substr_replace($txt,’’,$nh1 % $tlen–,1);<br>$ch3 = @$txt{$nh2 % $tlen};<br>$nh3 = @strpos($chars,$ch3);<br>$txt = @substr_replace($txt,’’,$nh2 % $tlen–,1);<br>$nhnum = $nh1 + $nh2 + $nh3;<br>$mdKey = substr(md5(md5(md5($key.$ch1).$ch2.$ikey).$ch3),$nhnum % 8,$knum % 8 + 16);<br>$tmp = ‘’;<br>$j=0; $k = 0;<br>$tlen = @strlen($txt);<br>$klen = @strlen($mdKey);<br>for ($i=0; $i&lt;$tlen; $i++) {<br> $k = $k == $klen ? 0 : $k;<br> $j = strpos($chars,$txt{$i})-$nhnum - ord($mdKey{$k++});<br> while ($j&lt;0) $j+=64;<br> $tmp .= $chars{$j};<br>}<br>$tmp = str<em>replace(array(‘-‘,’</em>‘,’.’),array(‘+’,’/‘,’=’),$tmp);<br>$tmp = trim(base64_decode($tmp));</p>
<p>if (preg<em>match(“/\d{10}</em>/s”,substr($tmp,0,11))){<br> if ($ttl &gt; 0 &amp;&amp; (time() - substr($tmp,0,11) &gt; $ttl)){<br>   $tmp = null;<br> }else{<br>   $tmp = substr($tmp,11);<br> }<br>}<br>return $tmp;<br>}</p>
</li>
</ul>
<p><br>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
]]></content>
      
        <categories>
            
            <category> PHP技术 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP跳转函数]]></title>
      <url>/PHP%E6%8A%80%E6%9C%AF/201705/php-redirect-30.html</url>
      <content type="html"><![CDATA[<p>&nbsp;</p>
<p>&nbsp;</p>
<p><pre class="EnlighterJSRAW" data-enlighter-language="php">/**</pre></p>
<ul>
<li>不显示信息直接跳转<br>*</li>
<li>@param string $url<br>*/<br>function redirect($url = ‘’){<br>if (empty($url)){<br> if(!empty($_REQUEST[‘ref_url’])){<br>   $url = $_REQUEST[‘ref_url’];<br> }else{<br>   $url = getReferer();<br> }<br>}<br>header(‘Location: ‘.$url);exit();<br>}</li>
</ul>
<p>/**</p>
<ul>
<li>取上一步来源地址<br>*</li>
<li>@param</li>
<li>@return string 字符串类型的返回结果<br>*/<br>function getReferer(){<br>return empty($_SERVER[‘HTTP_REFERER’])?’’:$_SERVER[‘HTTP_REFERER’];<br>}<br><br>&nbsp;</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
]]></content>
      
        <categories>
            
            <category> PHP技术 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[tp5自定义上传文件名和保存路径]]></title>
      <url>/PHP%E6%8A%80%E6%9C%AF/201705/tp5-diy-filename-29.html</url>
      <content type="html"><![CDATA[<p>tp5自定义上传文件名和保存路径</p>
<p>在上传文件后调用file类的 mov方法的时候就可以自定义上传文件的类型</p>
<p>&nbsp;</p>
<p>\think\File  mov方法:</p>
<p><pre class="EnlighterJSRAW" data-enlighter-language="php">/**</pre></p>
<ul>
<li>移动文件</li>
<li>@param  string           $path    保存路径</li>
<li>@param  string|bool      $savename    保存的文件名 默认自动生成</li>
<li>@param  boolean          $replace 同名文件是否覆盖</li>
<li><p>@return false|SplFileInfo false-失败 否则返回SplFileInfo实例<br>*/<br>public function move($path, $savename = true, $replace = true)<br>{<br> // 文件上传失败，捕获错误代码<br> if (!empty($this-&gt;info[‘error’])) {</p>
<pre><code>$this-&amp;gt;error($this-&amp;gt;info[&apos;error&apos;]);
return false;
</code></pre><p> }</p>
<p> // 检测合法性<br> if (!$this-&gt;isValid()) {</p>
<pre><code>$this-&amp;gt;error = &apos;非法上传文件&apos;;
return false;
</code></pre><p> }</p>
<p> // 验证上传<br> if (!$this-&gt;check()) {</p>
<pre><code>return false;
</code></pre><p> }<br> $path = rtrim($path, DS) . DS;<br> // 文件保存命名规则<br> $saveName = $this-&gt;buildSaveName($savename);<br> $filename = $path . $saveName;</p>
<p> // 检测目录<br> if (false === $this-&gt;checkPath(dirname($filename))) {</p>
<pre><code>return false;
</code></pre><p> }</p>
<p> /<em> 不覆盖同名文件 </em>/<br> if (!$replace &amp;&amp; is_file($filename)) {</p>
<pre><code>$this-&amp;gt;error = &apos;存在同名文件&apos; . $filename;
return false;
</code></pre><p> }</p>
<p> /<em> 移动文件 </em>/<br> if ($this-&gt;isTest) {</p>
<pre><code>rename($this-&amp;gt;filename, $filename);
</code></pre><p> } elseif (!move_uploaded_file($this-&gt;filename, $filename)) {</p>
<pre><code>$this-&amp;gt;error = &apos;文件上传保存错误！&apos;;
return false;
</code></pre><p> }<br> // 返回 File对象实例<br> $file = new self($filename);<br> $file-&gt;setSaveName($saveName);<br> $file-&gt;setUploadInfo($this-&gt;info);<br> return $file;<br>}<br><br>&nbsp;</p>
</li>
</ul>
<p>&nbsp;</p>
<p>auth 文件命名规则</p>
<p>&nbsp;</p>
<p>[caption id=”attachment_105” align=”alignnone” width=”300”]<a href="http://blog.chuangxin.biz/wp-content/uploads/2017/05/2637180933-5858db3dadf2f_articlex.png" target="_blank" rel="noopener"><img src="http://blog.chuangxin.biz/wp-content/uploads/2017/05/2637180933-5858db3dadf2f_articlex-300x109.png" alt=""></a> thinkphp5上传文件命名规则[/caption]</p>
<p>&nbsp;</p>
<p>示例:</p>
<p>表单代码：</p>
<p><pre class="EnlighterJSRAW" data-enlighter-language="html">&lt;form action=”/index/index/upload” enctype=”multipart/form-data” method=”post”&gt;<br>&lt;input type=”file” name=”image” /&gt;<br>&lt;input type=”submit” value=”上传” /&gt;<br>&lt;/form&gt;</pre><br>&nbsp;</p>
<p>控制器代码：</p>
<p><pre class="EnlighterJSRAW" data-enlighter-language="php">public function upload(){<br>    // 获取表单上传文件 例如上传了001.jpg<br>    $file = request()-&gt;file(‘image’);<br>    // 移动到框架应用根目录/public/uploads/ 目录下<br>    $info = $file-&gt;move(ROOT_PATH . ‘public’ . DS . ‘uploads’);<br>    if($info){<br>        // 成功上传后 获取上传信息<br>        // 输出 jpg<br>        echo $info-&gt;getExtension();<br>        // 输出 20160820/42a79759f284b767dfcb2a0197904287.jpg<br>        echo $info-&gt;getSaveName();<br>        // 输出 42a79759f284b767dfcb2a0197904287.jpg<br>        echo $info-&gt;getFilename();<br>    }else{<br>        // 上传失败获取错误信息<br>        echo $file-&gt;getError();<br>    }<br>}</pre><br>move方法成功的话返回的是一个SplFileInfo对象，你可以对上传后的文件进行后续操作，比如改名。</p>
<p>&nbsp;</p>
]]></content>
      
        <categories>
            
            <category> PHP技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tp5 </tag>
            
            <tag> 文件命名 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS 格式化字节单位为 kb, m, g 等为友好大小单位]]></title>
      <url>/JavaScript/201705/js-format-size-29.html</url>
      <content type="html"><![CDATA[<p>经常用到的JS单位转换函数:</p>
<p><pre class="EnlighterJSRAW" data-enlighter-language="js">function format_size(bytes) {<br>       if (bytes === 0) return ‘0 B’;<br>        var k = 1024;<br>        sizes = [‘B’,’KB’, ‘MB’, ‘GB’, ‘TB’, ‘PB’, ‘EB’, ‘ZB’, ‘YB’];<br>        i = Math.floor(Math.log(bytes) / Math.log(k));<br>    return (bytes / Math.pow(k, i)).toPrecision(2) + ‘ ‘ + sizes[i];<br>       //toPrecision(3) 后面保留一位小数，如1.0GB                                                       //return (bytes / Math.pow(k, i)).toPrecision(3) + ‘ ‘ + sizes[i];<br>       //bytes / Math.pow(1024, Math.floor(Math.log(bytes) / Math.log(1024)))<br>    }</pre><br>&nbsp;</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[tp5 多关键字查找实现方法]]></title>
      <url>/PHP%E6%8A%80%E6%9C%AF/201705/tp5-mulit-keywords-search-27.html</url>
      <content type="html"><![CDATA[<p>多个关键词用空格分开，</p>
<p>控制器</p>
<p><pre class="EnlighterJSRAW" data-enlighter-language="php"><br>$keyword = \think\Request::instance()-&gt;post(‘keyword’);<br>$json = array();<br>foreach (explode(‘ ‘, $keyword) as $keyword) {<br>$result = $model-&gt;searchKeyword($keyword);<br>foreach ($result as $item) {<br>if (!in_array($item, $json)) {<br>array_push($json, $item);<br>}<br>}<br>}</pre><br>&nbsp;</p>
<p>模型：</p>
<p><pre class="EnlighterJSRAW" data-enlighter-language="php">/**</pre></p>
<pre><code> * 搜索关键字
 * @param $keyword
 * @return mixed
 */
public function searchKeyword($keyword)
{
    return $this-&amp;gt;where([&apos;keyword&apos; =&amp;gt; array(&apos;like&apos;, &apos;%&apos; . $keyword . &apos;%&apos;), &apos;status&apos; =&amp;gt; 1])
        -&amp;gt;field([&apos;id&apos;, &apos;title&apos;, &apos;image&apos;, &apos;description&apos;])
        -&amp;gt;order([&apos;amount&apos; =&amp;gt; &apos;DESC&apos;])-&amp;gt;limit(5)-&amp;gt;select();
}&lt;/pre&gt;
</code></pre><p>&nbsp;</p>
]]></content>
      
        <categories>
            
            <category> PHP技术 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[JS 事件绑定   SHA256加密测试代码演示]]></title>
      <url>/JavaScript/201705/js-event-sha256-digest-26.html</url>
      <content type="html"><![CDATA[<p>JS 事件绑定   SHA256加密测试代码演示</p>
<p>核心JS代码，完整的请下载附件查看</p>
<p>&nbsp;</p>
<p><pre class="EnlighterJSRAW " data-enlighter-language="js">window.onload=function(){</pre></p>
<pre><code>var oPass=document.getElementById(&apos;pass&apos;);
var oShaResult=document.getElementById(&apos;sha_result&apos;);

//监听 HTML5 OnInput事件
oPass.addEventListener(&apos;input&apos;,function(o){
  oShaResult.innerHTML=sha256_digest(o.target.value);
},false);

//监听blur事件
// oPass.addEventListener(&quot;blur&quot;,function(e){
//     console.log(sha256_digest(oPass.value));
//     oShaResult.innerHTML=sha256_digest(oPass.value);
// },true)
</code></pre><p>  }</p>
<p>//直接在表单里面触发事情， 需要在需要触发的表单上面添加 oninput=”OnInput (event)” onpropertychange=”OnPropChanged (event)” </p>
<p> // Firefox, Google Chrome, Opera, Safari, Internet Explorer from version 9<br> function OnInput (event) {<br> alert (“The new content: “ + event.target.value);<br> }<br> // Internet Explorer<br> function OnPropChanged (event) {<br> if (event.propertyName.toLowerCase () == “value”) {<br> alert (“The new content: “ + event.srcElement.value);<br> }<br> }<br>&nbsp;</p>
<p>SHA256.MIN.JS文件下载：<br><a href="http://blog.chuangxin.biz/wp-content/uploads/2017/05/sha256.min_.js" target="_blank" rel="noopener">sha256.min</a></p>
<p><a href="http://blog.chuangxin.biz/wp-content/uploads/2017/05/js-event_sha256_degist.zip" target="_blank" rel="noopener">js-event_sha256_degist</a></p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[JS 页面加载触发事件 document.ready和window.onload的区别]]></title>
      <url>/JavaScript/201705/js-document-ready-window-onload-26.html</url>
      <content type="html"><![CDATA[<p>document.ready和onload的区别——JavaScript文档加载完成事件<br>页面加载完成有两种事件：</p>
<p>一是ready，表示文档结构已经加载完成（不包含图片等非文字媒体文件）；</p>
<p>二是onload，指示页面包含图片等文件在内的所有元素都加载完成。</p>
<p>&nbsp;</p>
<p><strong>1、Dom Ready</strong></p>
<p>使用jq时一般都是这么开始写脚本的：</p>
<p><div class="cnblogs_code"></div></p>
<p><pre class="">$(function(){<br>      // do something<br>});</pre><br><br>例如：</p>
<p><div class="cnblogs_code"></div></p>
<p><pre>$(function() {<br>     $(“a”).click(function() {<br>           alert(“Hello world!”);<br>      });<br>})</pre><br><br>这个例子就是给所有的a标签绑定了一个click事件。即当所有链接被鼠标单击的时候，都执行 alert(“Hello World!”);<br>也就是说页面加载时绑定，真正该触发时触发。<br>其实这个就是jq ready()的简写，它等价于：</p>
<p><div class="cnblogs_code"></div></p>
<p><div class="cnblogs_code_toolbar"></div></p>
<p><pre>$(document).ready(function(){<br>     //do something<br>})<br>//或者下面这个方法，jQuer的默认参数是：“document”；<br>$().ready(function(){<br>    //do something<br>})</pre></p>
<p><div class="cnblogs_code_toolbar"></div><br><br>这个就是jq ready()的方法就是Dom Ready，他的作用或者意义就是:在DOM加载完成后就可以可以对DOM进行操作。<br>一般情况一个页面响应加载的顺序是，域名解析-加载html-加载js和css-加载图片等其他信息。<br>那么Dom Ready应该在“加载js和css”和“加载图片等其他信息”之间，就可以操作Dom了。</p>
<p>&nbsp;</p>
<p><strong>2、Dom Load</strong></p>
<p>用原生的js的时候我们通常用onload时间来做一些事情，比如：</p>
<p><div class="cnblogs_code"></div></p>
<p><div class="cnblogs_code_toolbar"></div></p>
<p><pre>window.onload=function(){<br>      //do something<br>}<br>//或者经常用到的图片<br>document.getElementById(“imgID”).onload=function(){<br>     //do something<br>}</pre></p>
<p><div class="cnblogs_code_toolbar"></div><br><br>这种就是Dom Load，他的作用或者意义就是：在document文档加载完成后就可以可以对DOM进行操作，document文档包括了加载图片等其他信息。<br>那么Dom Load就是在页面响应加载的顺序中的“加载图片等其他信息”之后，就可以操作Dom了。</p>
<p>&nbsp;</p>
<p>最后附上一段在所有DOM元素加载之前执行的jQuery代码。</p>
<p><div class="cnblogs_code"></div></p>
<p><pre>&lt;script type=”text/javascript”&gt;<br>(function() {<br>            alert(“DOM还没加载哦!”);<br>        })(jQuery)<br>&lt;/script&gt;</pre><br><br>&nbsp;</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[用js实现in_array的方法]]></title>
      <url>/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/201705/js-is-in-array-23.html</url>
      <content type="html"><![CDATA[<p>js没有in_array函数，但是我们可以自己给js写一个in_array函数</p>
<p>&nbsp;</p>
<p>在js中我们不能像php中那样直接要判断一个值或字符串在数组中利用in_array来实现，因为js没有in_array函数，但是我们可以自定来给js写一个in_array函数，下面我收集了几个。</p>
<p>方式一：</p>
<p><pre class="EnlighterJSRAW" data-enlighter-language="js">function in_array(stringToSearch, arrayToSearch) {<br> for (s = 0; s &lt; arrayToSearch.length; s++) {<br>  thisEntry = arrayToSearch[s].toString();<br>  if (thisEntry == stringToSearch) {<br>   return true;<br>  }<br> }<br> return false;<br>}</pre><br>&nbsp;</p>
<p>方式二：</p>
<p><pre class="EnlighterJSRAW" data-enlighter-language="js">var a = Array(1,2,3,4,5);<br>function in_array(search,array){<br>    for(var i in array){<br>        if(array[i]==search){<br>            return true;<br>        }<br>    }<br>    return false;<br>}<br>alert(in_array(11,a));<br></pre><br>方式三：</p>
<p><pre class="EnlighterJSRAW" data-enlighter-language="js">/** </pre></p>
<ul>
<li>JS判断一个值是否存在数组中<br>*/<br>// 定义一个判断函数<br>var in_array = function(arr){<br>// 判断参数是不是数组<br>var isArr = arr &amp;&amp; console.log(<br>typeof arr===’object’ ? arr.constructor===Array ? arr.length ? arr.length===1 ? arr[0]:arr.join(‘,’):’an empty array’: arr.constructor: typeof arr<br>);<br>// 不是数组则抛出异常<br>if(!isArr){<br>throw “arguments is not Array”;<br>}<br>// 遍历是否在数组中<br>for(var i=0,k=arr.length;i&lt;k;i++){<br>if(this==arr[i]){<br>return true;<br>}<br>}<br>// 如果不在数组中就会返回false<br>return false;<br>}<br>// 给字符串添加原型<br>String.prototype.in_array = in_array;<br>// 给数字类型添加原型<br>Number.prototype.in_array = in_array;<br>// 声明一个数组<br>var arr = null;<br>// 字符串测试<br>var str = ‘red’;<br>var isInArray = str.in_array(arr);<br>alert(isInArray); // uncaught exception: arguments is not Array<br>JS判断一个数组中是否有重复值的<br>var ary = new Array(“111”,”22”,”33”,”111”);<br>var s = ary.join(“,”)+”,”;<br>for(var i=0;i&lt;ary.length;i++) {<br>if(s.replace(ary[i]+”,”,””).indexOf(ary[i]+”,”)&gt;-1) {<br>alert(“数组中有重复元素：” + ary[i]);<br>break;<br>}<br>}<br>&nbsp;</li>
</ul>
<p>&nbsp;</p>
]]></content>
      
        <categories>
            
            <category> 编程开发 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[thinkphp5兼容TP3.2版本的单字母操作函数]]></title>
      <url>/PHP%E6%8A%80%E6%9C%AF/201705/tp5-with-tp3-2-one-words-function-21.html</url>
      <content type="html"><![CDATA[<p>thinkphp5兼容TP3.2版本的单字母操作函数</p>
<p>&nbsp;</p>
<p><pre class="EnlighterJSRAW" data-enlighter-language="php">if (!function_exists(‘M’)) {<br>    /**</pre></p>
<pre><code> * 兼容以前3.2的单字母单数 M
 * @param string $name 表名     
 * @return DB对象
 */
function M($name = &apos;&apos;)
{
    if(!empty($name))
    {          
        return Db::name($name);
    }                    
}
</code></pre><p>}</p>
<p>if (!function_exists(‘D’)) {<br>    /**</p>
<pre><code> * 兼容以前3.2的单字母单数 D
 * @param string $name 表名     
 * @return DB对象
 */
function D($name = &apos;&apos;)
{               
    $name = Loader::parseName($name, 1); // 转换驼峰式命名
    if(file_exists(APP_PATH.&quot;/home/model/$name.php&quot;))
        $class = &apos;\app\home\model\\&apos;.$name;
    elseif(file_exists(APP_PATH.&quot;/mobile/model/$name.php&quot;))
        $class = &apos;\app\mobile\model\\&apos;.$name;
    elseif(file_exists(APP_PATH.&quot;/api/model/$name.php&quot;))                 
        $class = &apos;\app\api\model\\&apos;.$name;     
    elseif(file_exists(APP_PATH.&quot;/admin/model/$name.php&quot;))
        $class = &apos;\app\admin\model\\&apos;.$name;                      

    if($class)
    {
        return new $class();
    }            
    elseif(!empty($name))
    {          
        return Db::name($name);
    }                    
}
</code></pre><p>}</p>
<p>if (!function_exists(‘U’)) {<br>    /**</p>
<pre><code> * 兼容以前3.2的单字母单数 M
 * URL组装 支持不同URL模式
 * @param string $url URL表达式，格式：&apos;[模块/控制器/操作#锚点@域名]?参数1=值1&amp;amp;参数2=值2...&apos;
 * @param string|array $vars 传入的参数，支持数组和字符串
 * @param string|boolean $suffix 伪静态后缀，默认为true表示获取配置值
 * @param boolean $domain 是否显示域名
 * @return string
 */
function  U($url=&apos;&apos;,$vars=&apos;&apos;,$suffix=true,$domain=false) 
{
   return Url::build($url, $vars, $suffix, $domain);
}
</code></pre><p>}</p>
<p>if (!function_exists(‘S’)) {<br>    /**</p>
<pre><code> * 兼容以前3.2的单字母单数 S 
* @param mixed $name 缓存名称，如果为数组表示进行缓存设置
* @param mixed $value 缓存值
* @param mixed $options 缓存参数
* @return mixed
*/
</code></pre><p>   function S($name,$value=’’,$options=null) {<br>       if(!empty($value))<br>            Cache::set($name,$value,$options);<br>       else<br>           return Cache::get($name);<br>   }<br>}</p>
<p>if (!function_exists(‘C’)) {<br>/**</p>
<ul>
<li>兼容以前3.2的单字母单数 S </li>
<li>获取和设置配置参数 支持批量定义</li>
<li>@param string|array $name 配置变量</li>
<li>@param mixed $value 配置值</li>
<li>@param mixed $default 默认值</li>
<li>@return mixed<br>*/<br> function C($name=null, $value=null,$default=null) {<pre><code>return config($name);
</code></pre>}<br>}</li>
</ul>
<p>if (!function_exists(‘I’)) {<br>    /**</p>
<pre><code> * 兼容以前3.2的单字母单数 S 
 * 获取输入参数 支持过滤和默认值
 * 使用方法:
 * &amp;lt;code&amp;gt;
 * I(&apos;id&apos;,0); 获取id参数 自动判断get或者post
 * I(&apos;post.name&apos;,&apos;&apos;,&apos;htmlspecialchars&apos;); 获取$_POST[&apos;name&apos;]
 * I(&apos;get.&apos;); 获取$_GET
 * &amp;lt;/code&amp;gt;
 * @param string $name 变量的名称 支持指定类型
 * @param mixed $default 不存在的时候默认值
 * @param mixed $filter 参数过滤方法
 * @param mixed $datas 要获取的额外数据源
 * @return mixed
 */
function I($name,$default=&apos;&apos;,$filter=null,$datas=null) {

    $value = input($name,&apos;&apos;,$filter);        
    if($value !== null &amp;amp;&amp;amp; $value !== &apos;&apos;){
        return $value;
    }
    if(strstr($name, &apos;.&apos;))  
    {
        $name = explode(&apos;.&apos;, $name);
        $value = input(end($name),&apos;&apos;,$filter);           
        if($value !== null &amp;amp;&amp;amp; $value !== &apos;&apos;)
            return $value;            
    }  
    return $default;        
} 
</code></pre><p>   <a href="https://www.acheterviagrafr24.com/" target="_blank" rel="noopener">acheter viagra</a><br>    if (!function_exists(‘F’)) {<br>       /**</p>
<pre><code>  * 兼容以前3.2的单字母单数 F
 * @param mixed $name 缓存名称，如果为数组表示进行缓存设置
 * @param mixed $value 缓存值
 * @param mixed $path 缓存参数
 * @return mixed
 */
function F($name,$value=&apos;&apos;,$path=&apos;&apos;) {
    if(!empty($value))
         Cache::set($name,$value);
    else
        return Cache::get($name);
}
</code></pre><p>   }<br>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
]]></content>
      
        <categories>
            
            <category> PHP技术 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[php控制台输出调试代码函数]]></title>
      <url>/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/201705/php-console-log-19.html</url>
      <content type="html"><![CDATA[<p>&nbsp;</p>
<p><pre class="EnlighterJSRAW" data-enlighter-language="php">/**</pre></p>
<ul>
<li>console.log控制台调试函数</li>
<li>@param  [type] $data [要在控制台输出的数据 支持数组、对象和字符串]</li>
<li>@return [type]       [description]<br>*/<br>function console_log($data)<br>{<br> if (is_array($data) || is_object($data)) {<pre><code>echo (&quot;&amp;lt;script&amp;gt;console.log(&apos;&quot; . json_encode($data) . &quot;&apos;);&amp;lt;/script&amp;gt;&quot;);
</code></pre> } else {<pre><code>echo (&quot;&amp;lt;script&amp;gt;console.log(&apos;&quot; . $data . &quot;&apos;);&amp;lt;/script&amp;gt;&quot;);
</code></pre> }<br>}<br>&nbsp;</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
]]></content>
      
        <categories>
            
            <category> 编程开发 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[shell脚本删除XX天之前指定类型的备份文件实例]]></title>
      <url>/Shell%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/201705/shell-delete-old-file-13.html</url>
      <content type="html"><![CDATA[<p>打开SSH</p>
<p>#vi  delete_old_file.sh</p>
<p><span style="color: #339966;">#!/bin/bash </span></p>
<p><span style="color: #339966;"> location=”<span style="color: #ff0000;">/home/backup/</span>“</span></p>
<p><span style="color: #339966;"> find $location -name “<span style="color: #ff0000;">webback_</span><span style="color: #000080;"><strong>*</strong></span><span style="color: #ff0000;">.tar.gz</span>“  -type f -mtime +<span style="color: #ff0000;">30</span> -exec rm -f {} <a href="http://cialisfrance24.com/" target="_blank" rel="noopener">cialis : generiques</a> \;</span></p>
<p>&nbsp;</p>
<p>给SH文件执行权限</p>
<p>#chmod +x delete_old_file.sh</p>
<p>&nbsp;</p>
<p>说明：/home/backup/ 是find查找备份文件的路径。</p>
<p>-name “<span style="color: #ff0000;">webback<em></em></span><span style="color: #000080;"><strong>*</strong></span><span style="color: #ff0000;">.tar.gz</span>“  是查找以 webback 开头的文件名的 .tar.gz 压缩文件， 文件名支持正则模式  * 表示任意多个任意字符  ？ 表示单个任意字符</p>
<p>-type f是指定文件类型为普通文件。</p>
<p>-mtime +30是指30天之前的文件。</p>
<p>-exec rm -f指执行静默删除匹配出来的文件。</p>
<p>&nbsp;</p>
<p>将上面的SH文件加入到自动任务里面，这样就可以做到自动清除了。</p>
<p>&nbsp;</p>
<p>#vi /etc/crontab</p>
<p>59 11 01 <em> </em> root /root/delete_old_file.sh    每月的01日11点59执行</p>
<p>:wq</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
]]></content>
      
        <categories>
            
            <category> Shell编程学习 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[hhvm  php mysql_numrows 至500错误的解决方法]]></title>
      <url>/PHP%E6%8A%80%E6%9C%AF/201407/hhvm-php-mysql-numrows-500-error-11.html</url>
      <content type="html"><![CDATA[<p>最近安装了<a href="http://blog.chuangxin.biz" target="_blank" rel="noopener">HHVM</a>运行PHP程序，发现hhvm 竟然不支持<strong>mysql_numrows</strong>(）函数，解决方法很简单，直接把 <strong>mysql_numrows</strong>(）函数替换为count() 函数即可正常运行HHVM</p>
<p>&nbsp;</p>
<p>案例：</p>
<p>$length_users = <strong>mysql_numrows</strong>($query_users);</p>
<p>$length_users =<span style="color: #ff0000;"> <strong>count</strong></span>($query_users);</p>
<p>&nbsp;</p>
]]></content>
      
        <categories>
            
            <category> PHP技术 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[apache服务器.htaccess伪静态规则语法教程大全]]></title>
      <url>/JAVA%E5%BC%80%E5%8F%91/201407/htaccess-06.html</url>
      <content type="html"><![CDATA[<p><strong>htaccess语法教程apache服务器伪静态规则教程</strong></p>
<p>&nbsp;</p>
<p>教程从绑定域名到子目录开始，教程写法如下：</p>
<p><pre class="lang:default decode:true">RewriteEngine On</pre></p>
<p>RewriteCond %{HTTP_HOST} ^(www.)?xxx.com$</p>
<p>RewriteCond %{REQUEST_URI} !^/blog/</p>
<p>RewriteCond %{REQUEST_FILENAME} !-f</p>
<p>RewriteCond %{REQUEST_FILENAME} !-d</p>
<p>RewriteRule ^(.*)$ /blog/$1<br>&nbsp;</p>
<p>#没有输入文件名的默认到到首页</p>
<p><pre class="lang:default decode:true">RewriteCond %{HTTP_HOST}  ^(www.)?xxx.com$</pre></p>
<p>RewriteRule ^(/)?$  blog/index.php[L]<br>&nbsp;</p>
<p>下面我开始解说一下上面的意思：</p>
<p>【RewriteEngine  On】表示重写引擎开，关闭off，作用就是方便的开启或关闭以下的语句，这样就不需要一条一条的注释语句了。</p>
<p>【RewriteCond %{HTTP_HOST}  ^(www.)?xxx.com$】</p>
<p>这是重写条件，前面%{HTTP_HOST}表示当前访问的网址，只是指前缀部分，格式是www.xxx.com不包括“<a href="http://”和“/”，^表示字符串开始，$表示字符串结尾，\.表示转义的.，如果不转义也行，推荐转义，防止有些服务器不支持，?表示前面括号www\.出现0次或1次，这句规则的意思就是如果访问的网址是xxx.com或者www.xxx.com就执行以下的语句，不符合就跳过。" target="_blank" rel="noopener">http://”和“/”，^表示字符串开始，$表示字符串结尾，\.表示转义的.，如果不转义也行，推荐转义，防止有些服务器不支持，?表示前面括号www\.出现0次或1次，这句规则的意思就是如果访问的网址是xxx.com或者www.xxx.com就执行以下的语句，不符合就跳过。</a></p>
<p>RewriteCond %{REQUEST_URI}  !^/blog/</p>
<p>也是重写条件，%{REQUEST_URI}表示访问的相对地址，就是相对根目录的地址，就是域名/后面的成分，格式上包括最前面的“/”，!表示非，这句语句表示访问的地址不以/blog/开头，只是开头^，没有结尾$</p>
<p>RewriteCond  %{REQUEST_FILENAME}  !-f</p>
<p>RewriteCond %{REQUEST_FILENAME}  !-d</p>
<p>这两句语句的意思是请求的文件或路径是不存在的，如果文件或路径存在将返回已经存在的文件或路径</p>
<p>&nbsp;</p>
<p>【RewriteRule^(.<em>)$  /blog/$1】重写规则，最重要的部分，意思是当上面的RewriteCond条件都满足的时候，将会执行此重写规则，^(.</em>)$是一个正则表达的匹配，匹配的是当前请求的URL，^(.<em>)$意思是匹配当前URL任意字符，.表示任意单个字符，</em>表示匹配0次或N次（N&gt;0），后面/blog/$1是重写成分，意思是将前面匹配的字符重写成/blog/$1，这个$1表示反向匹配，引用的是前面第一个圆括号的成分，即^(.<em>)$中的.</em>，其实这儿将会出现一个问题，后面讨论。</p>
<p>&nbsp;</p>
<p>【RewriteCond %{HTTP_HOST}  ^(www.)?xxx.com$】</p>
<p>【RewriteRule ^(/)?$  blog/index.php  [L]】</p>
<p>这两句的意思是指请求的host地址是www.xxx.com是，如果地址的结尾只有0个或者1个“/”时，将会重写到子目录下的主页，我猜想这主要因为重写后的地址是不能自动寻找主页的，需要自己指定。</p>
<p>现在说说出现的问题，RewriteRule^(.<em>)$  /blog/$1前部分^(.</em>)$将会匹配当前请求的url，例如：请求网址是<a href="http://www.xxx.com/a.html，到底是匹配整个http://www.xxx.com/a.html，还是只匹配/a.html即反斜杠后面的成分，还是只匹配a.html。" target="_blank" rel="noopener">http://www.xxx.com/a.html，到底是匹配整个http://www.xxx.com/a.html，还是只匹配/a.html即反斜杠后面的成分，还是只匹配a.html。</a></p>
<p>答案是：根据RewriteBase规则规定，如果rewritebase为/，将会匹配a.html，不带前面的反斜杠，所以上条语句应该写成RewriteRule^(.*)$  blog/$1（不带/），不过实际应用上带上前面的反斜杠，也可以用，可能带不带都行。现在问题出来了，如果不设置rewritebase为/，将会匹配整个网址<a href="http://www.xxx.com/a.html，显然这是错误的，所以应该添加这条：" target="_blank" rel="noopener">http://www.xxx.com/a.html，显然这是错误的，所以应该添加这条：</a></p>
<p>RewiteBase/</p>
<p>还有一个问题是，不能保证每个人输入的网址都是小写的，如果输入大写的呢，linux系统是区分大小写的，所以应该在RewriteCond后添加[NC]忽略大小写的。</p>
<p>&nbsp;</p>
<p>至此，完整的语句应该是：</p>
<p><pre class="lang:default decode:true">####start####</pre></p>
<p>RewriteEngineOn</p>
<p>RewiteBase/</p>
<p>RewriteCond %{HTTP_HOST} ^(www.)?xxx.com$ [NC]</p>
<p>RewriteCond %{REQUEST_URI}  !^/blog/</p>
<p>RewriteCond %{REQUEST_FILENAME} !-f</p>
<p>RewriteCond %{REQUEST_FILENAME} !-d</p>
<p>RewriteRule ^(.*)$  blog/$1</p>
<p>#没有输入文件名的默认到到首页</p>
<p>RewriteCond %{HTTP_HOST}  ^(www.)?xxx.com$ <a href="http://cialisfrance24.com/" target="_blank" rel="noopener">homepage</a> [NC]</p>
<p>RewriteRule ^(/)?$  blog/index.php [L]</p>
<p>####end####<br>&nbsp;</p>
<p>&nbsp;</p>
<p>如果后面还继续有语句的，就不应该加上最后的[L]，因为这是表示最后一条语句的意思</p>
<p>防盗链的语句，同样需要添加RewiteBase/，如下：</p>
<p><pre class="lang:default decode:true ">RewriteEngine on</pre></p>
<p>RewiteBase /</p>
<p>RewriteCond %{HTTP_REFERER} !^$ [NC]</p>
<p>RewriteCond %{HTTP_REFERER} !xxx.info [NC]</p>
<p>RewriteRule .(jpg|gif|png|bmp|swf|jpeg)$ /error/daolian.gif [R,NC,L]<br>&nbsp;</p>
<p>如果后面还继续有语句的，就不应该加上最后的[L]，/error/daolian.gif为别人盗链时显示的图片。</p>
<p>&nbsp;</p>
<p>下面附上简单的语法规则和flags：</p>
<p>【RewriteCond语法：】</p>
<p>RewriteCondTestStringCondPattern[flags]</p>
<p>rewritecond的其他用法：</p>
<p>‘-d’(目录)</p>
<p>将TestString视为一个路径名并测试它是否为一个存在的目录。</p>
<p>‘-f’(常规文件)</p>
<p>将TestString视为一个路径名并测试它是否为一个存在的常规文件。</p>
<p>‘-s’(非空的常规文件)</p>
<p>将TestString视为一个路径名并测试它是否为一个存在的、尺寸大于0的常规文件。</p>
<p>‘-l’(符号连接)</p>
<p>将TestString视为一个路径名并测试它是否为一个存在的符号连接。</p>
<p>‘-x’(可执行)</p>
<p>将TestString视为一个路径名并测试它是否为一个存在的、具有可执行权限的文件。该权限由操作系统检测。</p>
<p>‘-F’(对子请求存在的文件)</p>
<p>检查TestString是否为一个有效的文件，而且可以在服务器当前的访问控制配置下被访问。它使用一个内部子请求来做检查，由于会降低服务器的性能，所以请谨慎使用！</p>
<p>‘-U’(对子请求存在的URL)</p>
<p>检查TestString是否为一个有效的URL，而且可以在服务器当前的访问控制配置下被访问。它使用一个内部子请求来做检查，由于会降低服务器的性能，所以请谨慎使用！</p>
<p>&nbsp;</p>
<p>【RewriteRule语法：】</p>
<p>RewriteRule Pattern Substitution [flags]</p>
<p>&nbsp;</p>
<p>【flags】：</p>
<p>‘chain|C’(链接下一规则)</p>
<p>此标记使当前规则与下一个规则相链接。它产生这样的效果：如果一个规则被匹配，则继续处理其后继规则，也就是这个标记不起作用；如果该规则不被匹配，则其后继规则将被跳过。比如，在一个目录级规则中执行一个外部重定向时，你可能需要删除”.www”(此处不应该出现”.www”)。</p>
<p>‘cookie|CO=NAME:VAL:domain[:lifetime[:path]]’(设置cookie)</p>
<p>在客户端设置一个cookie。cookie的名称是NAME，值是VAL。domain是该cookie的域，比如’.apache.org’，可选的lifetime是cookie的有效期(分钟)，可选的path是cookie的路径。</p>
<p>‘env|E=VAR:VAL’(设置环境变量)</p>
<p>此标记将环境变量VAR的值为VAL，VAL可以包含可扩展的正则表达式反向引用($N和%N)。此标记可以多次使用以设置多个变量。这些变量可以在其后许多情况下被间接引用，通常是在XSSI(&lt;!–#echovar=”VAR”–&gt;)或CGI($ENV{‘VAR’})中，也可以在后继的RewriteCond指令的CondPattern参数中通过%{ENV:VAR}引用。使用它可以记住从URL中剥离的信息。</p>
<p>&nbsp;</p>
<p>‘forbidden|F’(强制禁止URL)</p>
<p>强制禁止当前URL，也就是立即反馈一个HTTP响应码403(被禁止的)。使用这个标记，可以链接若干个RewriteConds来有条件地阻塞某些URL。</p>
<p>&nbsp;</p>
<p>‘gone|G’(强制废弃URL)</p>
<p>强制当前URL为已废弃，也就是立即反馈一个HTTP响应码410(已废弃的)。使用这个标记，可以标明页面已经被废弃而不存在了。</p>
<p>&nbsp;</p>
<p>‘handler|H=Content-handler’(强制指定内容处理器)</p>
<p>强自制定目标文件的内容处理器为Content-handler。例如，用来模拟mod_alias模块的ScriptAlias指令，以强制映射文件夹内的所有文件都由”cgi-script”处理器处理。</p>
<p>&nbsp;</p>
<p>‘last|L’(结尾规则)</p>
<p>立即停止重写操作，并不再应用其他重写规则。它对应于Perl中的last命令或C语言中的break命令。这个标记用于阻止当前已被重写的URL被后继规则再次重写。例如，使用它可以重写根路径的URL(‘/’)为实际存在的URL(比如：’/e/www/’)。</p>
<p>&nbsp;</p>
<p>‘next|N’(从头再来)</p>
<p>重新执行重写操作(从第一个规则重新开始)。此时再次进行处理的URL已经不是原始的URL了，而是经最后一个重写规则处理过的URL。它对应于Perl中的next命令或C语言中的continue命令。此标记可以重新开始重写操作(立即回到循环的开头)。但是要小心，不要制造死循环！</p>
<p>&nbsp;</p>
<p>‘nocase|NC’(忽略大小写)</p>
<p>它使Pattern忽略大小写，也就是在Pattern与当前URL匹配时，’A-Z’和’a-z’没有区别。</p>
<p>&nbsp;</p>
<p>‘noescape|NE’(在输出中不对URI进行转义)</p>
<p>此标记阻止mod_rewrite对重写结果应用常规的URI转义规则。一般情况下，特殊字符(‘%’,‘$’,‘;’等)会被转义为等值的十六进制编码(‘%′,‘$′,‘;’等)。此标记可以阻止这样的转义，以允许百分号等符号出现在输出中，比如：</p>
<p>RewriteRule/foo/(.*)/bar?arg=P1\=$1[R,NE]</p>
<p>可以使’/foo/zed转向到一个安全的请求’/bar?arg=P1=zed’。</p>
<p>&nbsp;</p>
<p>‘nosubreq|NS’(不对内部子请求进行处理)</p>
<p>在当前请求是一个内部子请求时，此标记强制重写引擎跳过该重写规则。比如，在mod_include试图搜索目录默认文件(index.xxx)时，Apache会在内部产生子请求。对于子请求，重写规则不一定有用，而且如果整个规则集都起作用，它甚至可能会引发错误。所以，可以用这个标记来排除某些规则。</p>
<p>使用原则：如果你为URL添加了CGI脚本前缀，以强制它们由CGI脚本处理，但对子请求处理的出错率(或者资源开销)很高，在这种情况下，可以使用这个标记。</p>
<p>&nbsp;</p>
<p>‘proxy|P’(强制为代理)</p>
<p>此标记使替换成分被内部地强制作为代理请求发送，并立即中断重写处理，然后把处理移交给mod_proxy模块。你必须确保此替换串是一个能够被mod_proxy处理的有效URI(比如以<a href="http://hostname开头)，否则将得到一个代理模块返回的错误。使用这个标记，可以把某些远程成分映射到本地服务器域名空间，从而增强了ProxyPass指令的功能。" target="_blank" rel="noopener">http://hostname开头)，否则将得到一个代理模块返回的错误。使用这个标记，可以把某些远程成分映射到本地服务器域名空间，从而增强了ProxyPass指令的功能。</a></p>
<p>注意：要使用这个功能，必须已经启用了mod_proxy模块。</p>
<p>&nbsp;</p>
<p>‘passthrough|PT’(移交给下一个处理器)</p>
<p>此标记强制重写引擎将内部request_rec结构中的uri字段设置为filename字段的值，这个小小的修改使得RewriteRule指令的输出能够被(从URI转换到文件名的)Alias,ScriptAlias,Redirect等指令进行后续处理[原文：Thisflagisjustahacktoenablepost-processingoftheoutputofRewriteRuledirectives,usingAlias,ScriptAlias,Redirect,andotherdirectivesfromvariousURI-to-filenametranslators.]。</p>
<p>&nbsp;</p>
<p>举一个能说明其含义的例子：如果要将/abc重写为/def，然后再使用mod_alias将/def转换为/ghi，可以这样：</p>
<p>RewriteRule ^/abc(.*) /def$1 [PT]</p>
<p>Alias /def/ghi</p>
<p>如果省略了PT标记，虽然将uri=/abc/…重写为filename=/def/…的部分运作正常，但是后续的mod_alias在试图将URI转换到文件名时会遭遇失效。</p>
<p>注意：如果需要混合使用多个将URI转换到文件名的模块时，就必须使用这个标记。。此处混合使用mod_alias和mod_rewrite就是个典型的例子。</p>
<p>‘qsappend|QSA’(追加查询字符串)</p>
<p>此标记强制重写引擎在已有的替换字符串中追加一个查询字符串，而不是简单的替换。如果需要通过重写规则在请求串中增加信息，就可以使用这个标记。</p>
<p>&nbsp;</p>
<p>‘redirect|R[=code]‘(强制重定向)</p>
<p>若Substitution以<a href="http://thishost[:thisport]/(使新的URL成为一个URI)开头，可以强制性执行一个外部重定向。如果没有指定code，则产生一个HTTP响应码302(临时性移动)。如果需要使用在300-400范围内的其他响应代码，只需在此指定即可(或使用下列符号名称之一：temp(默认),permanent,seeother)。使用它可以把规范化的URL反馈给客户端，如将”/~”重写为”/u/”，或始终对/u/user加上斜杠，等等。" target="_blank" rel="noopener">http://thishost[:thisport]/(使新的URL成为一个URI)开头，可以强制性执行一个外部重定向。如果没有指定code，则产生一个HTTP响应码302(临时性移动)。如果需要使用在300-400范围内的其他响应代码，只需在此指定即可(或使用下列符号名称之一：temp(默认),permanent,seeother)。使用它可以把规范化的URL反馈给客户端，如将”/~”重写为”/u/”，或始终对/u/user加上斜杠，等等。</a></p>
<p>&nbsp;</p>
<p><strong>注意</strong>：在使用这个标记时，必须确保该替换字段是一个有效的URL。否则，它会指向一个无效的位置！并且要记住，此标记本身只是对URL加上<a href="http://thishost[:thisport]/前缀，重写操作仍然会继续进行。通常，你还会希望停止重写操作而立即重定向，那么就还需要使用’L&#39;标记。" target="_blank" rel="noopener">http://thishost[:thisport]/前缀，重写操作仍然会继续进行。通常，你还会希望停止重写操作而立即重定向，那么就还需要使用’L&#39;标记。</a></p>
<p>&nbsp;</p>
<p>‘skip|S=num’(跳过后继规则)</p>
<p>此标记强制重写引擎跳过当前匹配规则之后的num个规则。它可以模拟if-then-else结构：最后一个规则是then从句，而被跳过的skip=N个规则是else从句。注意：它和’chain|C’标记是不同的！</p>
<p>&nbsp;</p>
<p>‘type|T=MIME-type’(强制MIME类型)</p>
<p>强制目标文件的MIME类型为MIME-type，可以用来基于某些特定条件强制设置内容类型。比如，下面的指令可以让.php文件在以.phps扩展名调用的情况下由mod_php按照PHP源代码的MIME类型(application/x-httpd-php-source)显示：</p>
<p>RewriteRule ^(.+.php)s$ $1[T=application/x-httpd-php-source]</p>
<p>&nbsp;</p>
<h2 id="htaccess-实现-301-重定向"><a href="#htaccess-实现-301-重定向" class="headerlink" title=".htaccess 实现 301 重定向"></a>.htaccess 实现 301 重定向</h2><p>出于 SEO、PR 值传递、网址转换的目的，在网站初建和网站迁移时我们都需要使用 301 重定向，通常包括域名对域名，目录对目录和一个独立网址对另一个独立网址的重定向。在虚拟主机上作 301 重定向，最常用的方法有2种：</p>
<p><strong>1.直接编辑 .htaccess。</strong></p>
<p><strong>2.用 cPanel 设定。</strong></p>
<p>实质二者都是修改文件 .htaccess，只是前者手工编辑，后者是由 cPanel 完成。用 cPanel 操作相当简单，登陆你的 cPanel–&gt;Domain–&gt;Redirects，选择相应的选项即可完成设置，这里暂不讨论。下面讲一下直接编辑 .htaccess 的方法。</p>
<p><strong>注意：在设置 301 重定向之前务必备份相应目录下的.htaccess文件。</strong></p>
<p><strong>1.重定向domain.com到www.domain.com</strong></p>
<p>这种重定向旨在使域名唯一，是网站SEO必须要做的，后面重定向www.domain.com到domain.com也是出于同样的原因，只是形式不同。打开.htaccess文件，加入以下规则。(下面的规则是针对主域名的，子域名要修改)</p>
<blockquote>
<p>RewriteEngine On</p>
<p>RewriteCond  %{HTTP_HOST}  !^www.domain.com$  [NC]</p>
<p>RewriteRule  ^(.<em>)$  <a href="http://www.domain.com/$1" target="_blank" rel="noopener">http://www.domain.com/$1</a>  [L,R=301]<br><em>*2.重定向www.domain.com到domain.com</em></em><br>RewriteEngine  On</p>
<p>RewriteCond  %{HTTP_HOST}  !^domain.com$ [NC]</p>
<p>RewriteRule  ^(.<em>)$  <a href="http://domain.com/$1" target="_blank" rel="noopener">http://domain.com/$1</a>  [L,R=301]<br><em>*3.重定向olddomain.com到www.newdomain.com</em></em><br>RewriteEngine On</p>
<p>RewriteCond %{HTTP_HOST} !olddomain.com$ [NC]</p>
<p>RewriteRule ^(.<em>)$ <a href="http://www.newdomain.com/$1" target="_blank" rel="noopener">http://www.newdomain.com/$1</a> [L,R=301]<br><em>*4.重定向olddomain.com to newdomain.com</em></em><br>RewriteEngine On</p>
<p>RewriteBase  /</p>
<p>RewriteCond  %{HTTP_HOST}  !olddomain.com$ [NC]</p>
<p>RewriteRule  ^(.<em>)$  <a href="http://newdomain.com/$1" target="_blank" rel="noopener">http://newdomain.com/$1</a>  [L,R=301]<br><em>*5.重定向domain.com/file/file.php 到 otherdomain.com/otherfile/other.php</em></em><br>RewriteCond  %{HTTP_HOST}  ^www.domain.com$</p>
<p>RewriteRule  ^file/file.php$  <a href="http://www.otherdomain.com/otherfile/other.php" target="_blank" rel="noopener">http://www.otherdomain.com/otherfile/other.php</a>  [R=301,L]</p>
</blockquote>
<h1 id="htaccess实现目录绑定二级域名-域名功能"><a href="#htaccess实现目录绑定二级域名-域名功能" class="headerlink" title=".htaccess实现目录绑定二级域名/域名功能"></a>.htaccess实现目录绑定二级域名/域名功能</h1><p>　　独立IP LINUX空间，空间支持伪静态功能。由于网站根目录下安装的是DEDECMS，bbs目录下安装的是论坛，home目录下安装是ucenterHome,虚拟主机只支持根目录绑定域名，如何让网站支持二级域名呢?下面我教你利用.htaccess实现一个网站空间可以用多个二级域名指向多个二级目录，建立多个网站。以独立IP虚拟主机为例：</p>
<p>　　一、将域名做一个泛解析*.xxxx.com 解析到你的空间IP，独立IP虚拟主机支持泛解析，不需要绑定域名就可以访问网站。</p>
<p>　　二、建立bbs 、home 目录，将CMS上传到根目录，将论坛上传到bbs目录，将ucenterHome上传到home目录。</p>
<p>　　三、打开记事本将以下代码复制进去，保存为.htaccess文件，上传到根目录下。</p>
<p>　　.htaccess文件内容如下：(以xxx.cn域名为例)</p>
<p><pre class="lang:default decode:true  ">RewriteEngine on</pre></p>
<p>　　DirectoryIndex index.php index.html index.htm</p>
<p>　　#让www.xxx.cn 访问根目录CMS</p>
<p>　　RewriteCond %{HTTP_HOST} ^www.xxx.cn$</p>
<p>　　RewriteCond %{REQUEST_URI} !^/</p>
<p>　　RewriteCond %{REQUEST_FILENAME} !-f</p>
<p>　　RewriteCond %{REQUEST_FILENAME} !-d</p>
<p>　　RewriteRule ^(.*)$ /$1</p>
<p>　　RewriteCond %{HTTP_HOST} ^www.xxx.cn$</p>
<p>　　RewriteRule ^(/)?$ /index.php [L]</p>
<p>　　#让home.xrnic.cn 访问home目录UcenterHome</p>
<p>　　RewriteCond %{HTTP_HOST} ^home.xxx.cn$</p>
<p>　　RewriteCond %{REQUEST_URI} !^/home/</p>
<p>　　RewriteCond %{REQUEST_FILENAME} !-f</p>
<p>　　RewriteCond %{REQUEST_FILENAME} !-d</p>
<p>　　RewriteRule ^(.*)$ /home/$1</p>
<p>　　RewriteCond %{HTTP_HOST} ^home.xxx.cn$</p>
<p>　　RewriteRule ^(/)?$ home/index.php [L]</p>
<p>　　#让bbs.xxx.cn 访问bbs目录论坛</p>
<p>　　RewriteCond %{HTTP_HOST} ^bbs.xxx.cn$</p>
<p>　　RewriteCond %{REQUEST_URI} !^/wap/</p>
<p>　　RewriteCond %{REQUEST_FILENAME} !-f</p>
<p>　　RewriteCond %{REQUEST_FILENAME} !-d</p>
<p>　　RewriteRule ^(.*)$ /bbs/$1</p>
<p>　　RewriteCond %{HTTP_HOST} ^bbs.xxx.cn$</p>
<p>　　RewriteRule ^(/)?$ bbs/index.php [L]<br>&nbsp;</p>
<p>　　按照以上方法可以一个空间建立N个网站，当然也可以把其他顶级域名指向子目录，实现一个空间建立多个网站的功能。</p>
]]></content>
      
        <categories>
            
            <category> JAVA开发 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[[原创]linux 下使用TAR分卷打包自动增量备份网站和数据库并发送到指定邮箱]]></title>
      <url>/Shell%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/201407/linux-tar-split-backup-web-05.html</url>
      <content type="html"><![CDATA[<p>[原创]linux 下使用TAR分卷打包自动增量备份网站和数据库并发送到指定邮箱</p>
<p>&nbsp;</p>
<p><pre class="theme:eclipse font:tahoma lang:sh decode:true ">#!/bin/bash</pre></p>
<h1 id="creates-backups-of-essential-files"><a href="#creates-backups-of-essential-files" class="headerlink" title="creates backups of essential files"></a>creates backups of essential files</h1><p>#邮件收件人<br>MAIL_TO=”932256355@qq.com”</p>
<p>#邮件密送收件人<br>Mail_bcc=”tekin@163.com”<br>SERVER_IP=”104.128.83.51”</p>
<p>URL=”chuangxin.biz”</p>
<p>#需要备份的文件夹绝对路径<br>DATA_ForBakup=”/home/web/${URL}/www/“</p>
<p>#tar网站打包分卷大小<br>Tar_Size=”49m”</p>
<p>#邮件收件人<br>MAIL_TO=”932256355@qq.com”</p>
<p>#邮件密送收件人<br>Mail_bcc=”tekin@163.com”</p>
<p>#mysql用户名<br>Mysql_User=”root”</p>
<p>#mysql密码<br>Mysql_Pass=”888888”</p>
<p>#Mysql数据库名<br>Mysql<em>Name=”dbname”<br>MysqlBakName=Mysql</em>${Mysql<em>Name}</em>$(date +%Y%m%d_%H%M%S)</p>
<p>#mysql数据库的bin安装目录，rpm自动安装的一般都为 /usr/bin/<br>Mysql_Bin_Dir=”/usr/local/mysql/bin/“</p>
<p>Web_Backup<em>Name=${URL}</em>$(date +%Y%m%d_%H%M%S).tgz</p>
<p>save_to=”/home/backup/${URL}/“<br>if [ ! -d $save_to ]; then<br>mkdir -p $save_to<br>fi<br>incremental_file=”/home/backup/${URL}_increment_file.txt”</p>
<p>cd ${save_to}</p>
<p>#删除1天前的备份文件名<br>rm -rf ${URL}_$(date +%Y%m%d -d “1 days ago”)*</p>
<p>#mysql数据库备份<br>${Mysql_Bin_Dir}/mysqldump -u ${Mysql_User} -p${Mysql_Pass} ${Mysql_Name} | gzip -9 - &gt; ${save_to}/${MysqlBakName}.sql.gz</p>
<p>#压缩数据库数据<br>tar zcfP $MysqlBakName.tgz ${MysqlBakName}.sql.gz<br>rm -f ${MysqlBakName}.sql.gz</p>
<p>#tar网站增量备份<br>tar -g $incremental_file \<br>-C $DATA_ForBakup \<br>–exclude cache \<br>-cpzf - . |split -b ${Tar_Size} -d -a 1 - ${Web_Backup_Name}.</p>
<p>chmod -R 755 $save_to</p>
<p>#============ get the file name and add mutt atach var ===========<br>Output_file=”atachfile.txt”</p>
<p>#清空Output_file文件的内容<br>: &gt; $Output_file</p>
<p>#循环读取备份的文件名<br>for file_a in ${save_to}${Web_Backup_Name}*; do<br>temp_file=<code>basename $file_a</code><br>echo -n \ -a \ ${temp_file} &gt;&gt; ${Output_file}</p>
<p>done</p>
<p>#读取文件并赋值给$Att_Files<br>Att_Files=$(cat $Output_file)</p>
<p>#Mutt Sendmail 发送备份文件到邮箱<br>echo “ $URL 网站增量全备份完成！服务器IP:$SERVER_IP 网站备份文件名：$Web_Backup_Name 数据库备份文件名:$MysqlBakName.tgz “ | mutt $MAIL_TO -b $Mail_bcc -s “$Web_Backup_Name增量+数据库备份 $SERVER_IP “ -a $MysqlBakName.tgz $Att_Files</p>
<p>#查找并删除7天前的所有备份文件<br>find $save_to -name “<em>.tgz.</em>“ -type f -mtime +7 -exec rm {} \; &gt; /dev/null 2&gt;&amp;1<br>&nbsp;</p>
<p>本站原创文章，转载请注明本站链接<a href="http://blog.chuangxin.biz/" title="创新博客" target="_blank" rel="noopener">http://blog.chuangxin.biz </a></p>
<p>&nbsp;</p>
]]></content>
      
        <categories>
            
            <category> Shell编程学习 </category>
            
        </categories>
        
        
    </entry>
    
  
  
</search>
